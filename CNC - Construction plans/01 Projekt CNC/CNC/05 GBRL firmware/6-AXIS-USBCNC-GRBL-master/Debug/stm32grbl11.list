
stm32grbl11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abfc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  0800ad0c  0800ad0c  0001ad0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  0800b43c  0800b43c  0001b43c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b444  0800b444  0001b444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000051c  20000000  0800b448  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001174  2000051c  0800b964  0002051c  2**2
                  ALLOC
  7 ._user_heap_stack 00000280  20001690  0800b964  00021690  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002051c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c43b  00000000  00000000  00020545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00005d20  00000000  00000000  0003c980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000125bc  00000000  00000000  000426a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010e8  00000000  00000000  00054c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00003898  00000000  00000000  00055d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00015dbe  00000000  00000000  000595e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023a47  00000000  00000000  0006f39e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0005d4db  00000000  00000000  00092de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  000f02c0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003258  00000000  00000000  000f0310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000051c 	.word	0x2000051c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800acf4 	.word	0x0800acf4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000520 	.word	0x20000520
 800014c:	0800acf4 	.word	0x0800acf4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_d2f>:
 80005d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80005e0:	bf24      	itt	cs
 80005e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80005e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80005ea:	d90d      	bls.n	8000608 <__aeabi_d2f+0x30>
 80005ec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000600:	bf08      	it	eq
 8000602:	f020 0001 	biceq.w	r0, r0, #1
 8000606:	4770      	bx	lr
 8000608:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800060c:	d121      	bne.n	8000652 <__aeabi_d2f+0x7a>
 800060e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000612:	bfbc      	itt	lt
 8000614:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000618:	4770      	bxlt	lr
 800061a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000622:	f1c2 0218 	rsb	r2, r2, #24
 8000626:	f1c2 0c20 	rsb	ip, r2, #32
 800062a:	fa10 f30c 	lsls.w	r3, r0, ip
 800062e:	fa20 f002 	lsr.w	r0, r0, r2
 8000632:	bf18      	it	ne
 8000634:	f040 0001 	orrne.w	r0, r0, #1
 8000638:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800063c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000640:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000644:	ea40 000c 	orr.w	r0, r0, ip
 8000648:	fa23 f302 	lsr.w	r3, r3, r2
 800064c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000650:	e7cc      	b.n	80005ec <__aeabi_d2f+0x14>
 8000652:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000656:	d107      	bne.n	8000668 <__aeabi_d2f+0x90>
 8000658:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800065c:	bf1e      	ittt	ne
 800065e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000662:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000666:	4770      	bxne	lr
 8000668:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800066c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000670:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_frsub>:
 8000678:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800067c:	e002      	b.n	8000684 <__addsf3>
 800067e:	bf00      	nop

08000680 <__aeabi_fsub>:
 8000680:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000684 <__addsf3>:
 8000684:	0042      	lsls	r2, r0, #1
 8000686:	bf1f      	itttt	ne
 8000688:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800068c:	ea92 0f03 	teqne	r2, r3
 8000690:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000694:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000698:	d06a      	beq.n	8000770 <__addsf3+0xec>
 800069a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800069e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80006a2:	bfc1      	itttt	gt
 80006a4:	18d2      	addgt	r2, r2, r3
 80006a6:	4041      	eorgt	r1, r0
 80006a8:	4048      	eorgt	r0, r1
 80006aa:	4041      	eorgt	r1, r0
 80006ac:	bfb8      	it	lt
 80006ae:	425b      	neglt	r3, r3
 80006b0:	2b19      	cmp	r3, #25
 80006b2:	bf88      	it	hi
 80006b4:	4770      	bxhi	lr
 80006b6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006c2:	bf18      	it	ne
 80006c4:	4240      	negne	r0, r0
 80006c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006ca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006ce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006d2:	bf18      	it	ne
 80006d4:	4249      	negne	r1, r1
 80006d6:	ea92 0f03 	teq	r2, r3
 80006da:	d03f      	beq.n	800075c <__addsf3+0xd8>
 80006dc:	f1a2 0201 	sub.w	r2, r2, #1
 80006e0:	fa41 fc03 	asr.w	ip, r1, r3
 80006e4:	eb10 000c 	adds.w	r0, r0, ip
 80006e8:	f1c3 0320 	rsb	r3, r3, #32
 80006ec:	fa01 f103 	lsl.w	r1, r1, r3
 80006f0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006f4:	d502      	bpl.n	80006fc <__addsf3+0x78>
 80006f6:	4249      	negs	r1, r1
 80006f8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000700:	d313      	bcc.n	800072a <__addsf3+0xa6>
 8000702:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000706:	d306      	bcc.n	8000716 <__addsf3+0x92>
 8000708:	0840      	lsrs	r0, r0, #1
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	f102 0201 	add.w	r2, r2, #1
 8000712:	2afe      	cmp	r2, #254	; 0xfe
 8000714:	d251      	bcs.n	80007ba <__addsf3+0x136>
 8000716:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800071a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800071e:	bf08      	it	eq
 8000720:	f020 0001 	biceq.w	r0, r0, #1
 8000724:	ea40 0003 	orr.w	r0, r0, r3
 8000728:	4770      	bx	lr
 800072a:	0049      	lsls	r1, r1, #1
 800072c:	eb40 0000 	adc.w	r0, r0, r0
 8000730:	3a01      	subs	r2, #1
 8000732:	bf28      	it	cs
 8000734:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000738:	d2ed      	bcs.n	8000716 <__addsf3+0x92>
 800073a:	fab0 fc80 	clz	ip, r0
 800073e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000742:	ebb2 020c 	subs.w	r2, r2, ip
 8000746:	fa00 f00c 	lsl.w	r0, r0, ip
 800074a:	bfaa      	itet	ge
 800074c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000750:	4252      	neglt	r2, r2
 8000752:	4318      	orrge	r0, r3
 8000754:	bfbc      	itt	lt
 8000756:	40d0      	lsrlt	r0, r2
 8000758:	4318      	orrlt	r0, r3
 800075a:	4770      	bx	lr
 800075c:	f092 0f00 	teq	r2, #0
 8000760:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000764:	bf06      	itte	eq
 8000766:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800076a:	3201      	addeq	r2, #1
 800076c:	3b01      	subne	r3, #1
 800076e:	e7b5      	b.n	80006dc <__addsf3+0x58>
 8000770:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000774:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000778:	bf18      	it	ne
 800077a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800077e:	d021      	beq.n	80007c4 <__addsf3+0x140>
 8000780:	ea92 0f03 	teq	r2, r3
 8000784:	d004      	beq.n	8000790 <__addsf3+0x10c>
 8000786:	f092 0f00 	teq	r2, #0
 800078a:	bf08      	it	eq
 800078c:	4608      	moveq	r0, r1
 800078e:	4770      	bx	lr
 8000790:	ea90 0f01 	teq	r0, r1
 8000794:	bf1c      	itt	ne
 8000796:	2000      	movne	r0, #0
 8000798:	4770      	bxne	lr
 800079a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800079e:	d104      	bne.n	80007aa <__addsf3+0x126>
 80007a0:	0040      	lsls	r0, r0, #1
 80007a2:	bf28      	it	cs
 80007a4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80007a8:	4770      	bx	lr
 80007aa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80007ae:	bf3c      	itt	cc
 80007b0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007b4:	4770      	bxcc	lr
 80007b6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007ba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007c2:	4770      	bx	lr
 80007c4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007c8:	bf16      	itet	ne
 80007ca:	4608      	movne	r0, r1
 80007cc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007d0:	4601      	movne	r1, r0
 80007d2:	0242      	lsls	r2, r0, #9
 80007d4:	bf06      	itte	eq
 80007d6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007da:	ea90 0f01 	teqeq	r0, r1
 80007de:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007e2:	4770      	bx	lr

080007e4 <__aeabi_ui2f>:
 80007e4:	f04f 0300 	mov.w	r3, #0
 80007e8:	e004      	b.n	80007f4 <__aeabi_i2f+0x8>
 80007ea:	bf00      	nop

080007ec <__aeabi_i2f>:
 80007ec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007f0:	bf48      	it	mi
 80007f2:	4240      	negmi	r0, r0
 80007f4:	ea5f 0c00 	movs.w	ip, r0
 80007f8:	bf08      	it	eq
 80007fa:	4770      	bxeq	lr
 80007fc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000800:	4601      	mov	r1, r0
 8000802:	f04f 0000 	mov.w	r0, #0
 8000806:	e01c      	b.n	8000842 <__aeabi_l2f+0x2a>

08000808 <__aeabi_ul2f>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	e00a      	b.n	800082c <__aeabi_l2f+0x14>
 8000816:	bf00      	nop

08000818 <__aeabi_l2f>:
 8000818:	ea50 0201 	orrs.w	r2, r0, r1
 800081c:	bf08      	it	eq
 800081e:	4770      	bxeq	lr
 8000820:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000824:	d502      	bpl.n	800082c <__aeabi_l2f+0x14>
 8000826:	4240      	negs	r0, r0
 8000828:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800082c:	ea5f 0c01 	movs.w	ip, r1
 8000830:	bf02      	ittt	eq
 8000832:	4684      	moveq	ip, r0
 8000834:	4601      	moveq	r1, r0
 8000836:	2000      	moveq	r0, #0
 8000838:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800083c:	bf08      	it	eq
 800083e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000842:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000846:	fabc f28c 	clz	r2, ip
 800084a:	3a08      	subs	r2, #8
 800084c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000850:	db10      	blt.n	8000874 <__aeabi_l2f+0x5c>
 8000852:	fa01 fc02 	lsl.w	ip, r1, r2
 8000856:	4463      	add	r3, ip
 8000858:	fa00 fc02 	lsl.w	ip, r0, r2
 800085c:	f1c2 0220 	rsb	r2, r2, #32
 8000860:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000864:	fa20 f202 	lsr.w	r2, r0, r2
 8000868:	eb43 0002 	adc.w	r0, r3, r2
 800086c:	bf08      	it	eq
 800086e:	f020 0001 	biceq.w	r0, r0, #1
 8000872:	4770      	bx	lr
 8000874:	f102 0220 	add.w	r2, r2, #32
 8000878:	fa01 fc02 	lsl.w	ip, r1, r2
 800087c:	f1c2 0220 	rsb	r2, r2, #32
 8000880:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000884:	fa21 f202 	lsr.w	r2, r1, r2
 8000888:	eb43 0002 	adc.w	r0, r3, r2
 800088c:	bf08      	it	eq
 800088e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000892:	4770      	bx	lr

08000894 <__aeabi_fmul>:
 8000894:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000898:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800089c:	bf1e      	ittt	ne
 800089e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008a2:	ea92 0f0c 	teqne	r2, ip
 80008a6:	ea93 0f0c 	teqne	r3, ip
 80008aa:	d06f      	beq.n	800098c <__aeabi_fmul+0xf8>
 80008ac:	441a      	add	r2, r3
 80008ae:	ea80 0c01 	eor.w	ip, r0, r1
 80008b2:	0240      	lsls	r0, r0, #9
 80008b4:	bf18      	it	ne
 80008b6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008ba:	d01e      	beq.n	80008fa <__aeabi_fmul+0x66>
 80008bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008c0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008c4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008c8:	fba0 3101 	umull	r3, r1, r0, r1
 80008cc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008d0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008d4:	bf3e      	ittt	cc
 80008d6:	0049      	lslcc	r1, r1, #1
 80008d8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008dc:	005b      	lslcc	r3, r3, #1
 80008de:	ea40 0001 	orr.w	r0, r0, r1
 80008e2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008e6:	2afd      	cmp	r2, #253	; 0xfd
 80008e8:	d81d      	bhi.n	8000926 <__aeabi_fmul+0x92>
 80008ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008f2:	bf08      	it	eq
 80008f4:	f020 0001 	biceq.w	r0, r0, #1
 80008f8:	4770      	bx	lr
 80008fa:	f090 0f00 	teq	r0, #0
 80008fe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000902:	bf08      	it	eq
 8000904:	0249      	lsleq	r1, r1, #9
 8000906:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800090a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800090e:	3a7f      	subs	r2, #127	; 0x7f
 8000910:	bfc2      	ittt	gt
 8000912:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000916:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800091a:	4770      	bxgt	lr
 800091c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000920:	f04f 0300 	mov.w	r3, #0
 8000924:	3a01      	subs	r2, #1
 8000926:	dc5d      	bgt.n	80009e4 <__aeabi_fmul+0x150>
 8000928:	f112 0f19 	cmn.w	r2, #25
 800092c:	bfdc      	itt	le
 800092e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000932:	4770      	bxle	lr
 8000934:	f1c2 0200 	rsb	r2, r2, #0
 8000938:	0041      	lsls	r1, r0, #1
 800093a:	fa21 f102 	lsr.w	r1, r1, r2
 800093e:	f1c2 0220 	rsb	r2, r2, #32
 8000942:	fa00 fc02 	lsl.w	ip, r0, r2
 8000946:	ea5f 0031 	movs.w	r0, r1, rrx
 800094a:	f140 0000 	adc.w	r0, r0, #0
 800094e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000952:	bf08      	it	eq
 8000954:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000958:	4770      	bx	lr
 800095a:	f092 0f00 	teq	r2, #0
 800095e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0040      	lsleq	r0, r0, #1
 8000966:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800096a:	3a01      	subeq	r2, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xce>
 800096e:	ea40 000c 	orr.w	r0, r0, ip
 8000972:	f093 0f00 	teq	r3, #0
 8000976:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097a:	bf02      	ittt	eq
 800097c:	0049      	lsleq	r1, r1, #1
 800097e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000982:	3b01      	subeq	r3, #1
 8000984:	d0f9      	beq.n	800097a <__aeabi_fmul+0xe6>
 8000986:	ea41 010c 	orr.w	r1, r1, ip
 800098a:	e78f      	b.n	80008ac <__aeabi_fmul+0x18>
 800098c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000990:	ea92 0f0c 	teq	r2, ip
 8000994:	bf18      	it	ne
 8000996:	ea93 0f0c 	teqne	r3, ip
 800099a:	d00a      	beq.n	80009b2 <__aeabi_fmul+0x11e>
 800099c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80009a0:	bf18      	it	ne
 80009a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80009a6:	d1d8      	bne.n	800095a <__aeabi_fmul+0xc6>
 80009a8:	ea80 0001 	eor.w	r0, r0, r1
 80009ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009b0:	4770      	bx	lr
 80009b2:	f090 0f00 	teq	r0, #0
 80009b6:	bf17      	itett	ne
 80009b8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009bc:	4608      	moveq	r0, r1
 80009be:	f091 0f00 	teqne	r1, #0
 80009c2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009c6:	d014      	beq.n	80009f2 <__aeabi_fmul+0x15e>
 80009c8:	ea92 0f0c 	teq	r2, ip
 80009cc:	d101      	bne.n	80009d2 <__aeabi_fmul+0x13e>
 80009ce:	0242      	lsls	r2, r0, #9
 80009d0:	d10f      	bne.n	80009f2 <__aeabi_fmul+0x15e>
 80009d2:	ea93 0f0c 	teq	r3, ip
 80009d6:	d103      	bne.n	80009e0 <__aeabi_fmul+0x14c>
 80009d8:	024b      	lsls	r3, r1, #9
 80009da:	bf18      	it	ne
 80009dc:	4608      	movne	r0, r1
 80009de:	d108      	bne.n	80009f2 <__aeabi_fmul+0x15e>
 80009e0:	ea80 0001 	eor.w	r0, r0, r1
 80009e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f0:	4770      	bx	lr
 80009f2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bx	lr

080009fc <__aeabi_fdiv>:
 80009fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a04:	bf1e      	ittt	ne
 8000a06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a0a:	ea92 0f0c 	teqne	r2, ip
 8000a0e:	ea93 0f0c 	teqne	r3, ip
 8000a12:	d069      	beq.n	8000ae8 <__aeabi_fdiv+0xec>
 8000a14:	eba2 0203 	sub.w	r2, r2, r3
 8000a18:	ea80 0c01 	eor.w	ip, r0, r1
 8000a1c:	0249      	lsls	r1, r1, #9
 8000a1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a22:	d037      	beq.n	8000a94 <__aeabi_fdiv+0x98>
 8000a24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a34:	428b      	cmp	r3, r1
 8000a36:	bf38      	it	cc
 8000a38:	005b      	lslcc	r3, r3, #1
 8000a3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a42:	428b      	cmp	r3, r1
 8000a44:	bf24      	itt	cs
 8000a46:	1a5b      	subcs	r3, r3, r1
 8000a48:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a50:	bf24      	itt	cs
 8000a52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a5e:	bf24      	itt	cs
 8000a60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a6c:	bf24      	itt	cs
 8000a6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a76:	011b      	lsls	r3, r3, #4
 8000a78:	bf18      	it	ne
 8000a7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a7e:	d1e0      	bne.n	8000a42 <__aeabi_fdiv+0x46>
 8000a80:	2afd      	cmp	r2, #253	; 0xfd
 8000a82:	f63f af50 	bhi.w	8000926 <__aeabi_fmul+0x92>
 8000a86:	428b      	cmp	r3, r1
 8000a88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a8c:	bf08      	it	eq
 8000a8e:	f020 0001 	biceq.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a9c:	327f      	adds	r2, #127	; 0x7f
 8000a9e:	bfc2      	ittt	gt
 8000aa0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000aa4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000aa8:	4770      	bxgt	lr
 8000aaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aae:	f04f 0300 	mov.w	r3, #0
 8000ab2:	3a01      	subs	r2, #1
 8000ab4:	e737      	b.n	8000926 <__aeabi_fmul+0x92>
 8000ab6:	f092 0f00 	teq	r2, #0
 8000aba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0040      	lsleq	r0, r0, #1
 8000ac2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ac6:	3a01      	subeq	r2, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xc2>
 8000aca:	ea40 000c 	orr.w	r0, r0, ip
 8000ace:	f093 0f00 	teq	r3, #0
 8000ad2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad6:	bf02      	ittt	eq
 8000ad8:	0049      	lsleq	r1, r1, #1
 8000ada:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ade:	3b01      	subeq	r3, #1
 8000ae0:	d0f9      	beq.n	8000ad6 <__aeabi_fdiv+0xda>
 8000ae2:	ea41 010c 	orr.w	r1, r1, ip
 8000ae6:	e795      	b.n	8000a14 <__aeabi_fdiv+0x18>
 8000ae8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000aec:	ea92 0f0c 	teq	r2, ip
 8000af0:	d108      	bne.n	8000b04 <__aeabi_fdiv+0x108>
 8000af2:	0242      	lsls	r2, r0, #9
 8000af4:	f47f af7d 	bne.w	80009f2 <__aeabi_fmul+0x15e>
 8000af8:	ea93 0f0c 	teq	r3, ip
 8000afc:	f47f af70 	bne.w	80009e0 <__aeabi_fmul+0x14c>
 8000b00:	4608      	mov	r0, r1
 8000b02:	e776      	b.n	80009f2 <__aeabi_fmul+0x15e>
 8000b04:	ea93 0f0c 	teq	r3, ip
 8000b08:	d104      	bne.n	8000b14 <__aeabi_fdiv+0x118>
 8000b0a:	024b      	lsls	r3, r1, #9
 8000b0c:	f43f af4c 	beq.w	80009a8 <__aeabi_fmul+0x114>
 8000b10:	4608      	mov	r0, r1
 8000b12:	e76e      	b.n	80009f2 <__aeabi_fmul+0x15e>
 8000b14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b18:	bf18      	it	ne
 8000b1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b1e:	d1ca      	bne.n	8000ab6 <__aeabi_fdiv+0xba>
 8000b20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b24:	f47f af5c 	bne.w	80009e0 <__aeabi_fmul+0x14c>
 8000b28:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b2c:	f47f af3c 	bne.w	80009a8 <__aeabi_fmul+0x114>
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0x15e>
 8000b32:	bf00      	nop

08000b34 <__gesf2>:
 8000b34:	f04f 3cff 	mov.w	ip, #4294967295
 8000b38:	e006      	b.n	8000b48 <__cmpsf2+0x4>
 8000b3a:	bf00      	nop

08000b3c <__lesf2>:
 8000b3c:	f04f 0c01 	mov.w	ip, #1
 8000b40:	e002      	b.n	8000b48 <__cmpsf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__cmpsf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b58:	bf18      	it	ne
 8000b5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5e:	d011      	beq.n	8000b84 <__cmpsf2+0x40>
 8000b60:	b001      	add	sp, #4
 8000b62:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b66:	bf18      	it	ne
 8000b68:	ea90 0f01 	teqne	r0, r1
 8000b6c:	bf58      	it	pl
 8000b6e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b72:	bf88      	it	hi
 8000b74:	17c8      	asrhi	r0, r1, #31
 8000b76:	bf38      	it	cc
 8000b78:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b7c:	bf18      	it	ne
 8000b7e:	f040 0001 	orrne.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	d102      	bne.n	8000b90 <__cmpsf2+0x4c>
 8000b8a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b8e:	d105      	bne.n	8000b9c <__cmpsf2+0x58>
 8000b90:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b94:	d1e4      	bne.n	8000b60 <__cmpsf2+0x1c>
 8000b96:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b9a:	d0e1      	beq.n	8000b60 <__cmpsf2+0x1c>
 8000b9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_cfrcmple>:
 8000ba4:	4684      	mov	ip, r0
 8000ba6:	4608      	mov	r0, r1
 8000ba8:	4661      	mov	r1, ip
 8000baa:	e7ff      	b.n	8000bac <__aeabi_cfcmpeq>

08000bac <__aeabi_cfcmpeq>:
 8000bac:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bae:	f7ff ffc9 	bl	8000b44 <__cmpsf2>
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	bf48      	it	mi
 8000bb6:	f110 0f00 	cmnmi.w	r0, #0
 8000bba:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bbc <__aeabi_fcmpeq>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff fff4 	bl	8000bac <__aeabi_cfcmpeq>
 8000bc4:	bf0c      	ite	eq
 8000bc6:	2001      	moveq	r0, #1
 8000bc8:	2000      	movne	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_fcmplt>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffea 	bl	8000bac <__aeabi_cfcmpeq>
 8000bd8:	bf34      	ite	cc
 8000bda:	2001      	movcc	r0, #1
 8000bdc:	2000      	movcs	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_fcmple>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffe0 	bl	8000bac <__aeabi_cfcmpeq>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fcmpge>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffd2 	bl	8000ba4 <__aeabi_cfrcmple>
 8000c00:	bf94      	ite	ls
 8000c02:	2001      	movls	r0, #1
 8000c04:	2000      	movhi	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_fcmpgt>:
 8000c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c10:	f7ff ffc8 	bl	8000ba4 <__aeabi_cfrcmple>
 8000c14:	bf34      	ite	cc
 8000c16:	2001      	movcc	r0, #1
 8000c18:	2000      	movcs	r0, #0
 8000c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1e:	bf00      	nop

08000c20 <__aeabi_fcmpun>:
 8000c20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	d102      	bne.n	8000c34 <__aeabi_fcmpun+0x14>
 8000c2e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c32:	d108      	bne.n	8000c46 <__aeabi_fcmpun+0x26>
 8000c34:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c38:	d102      	bne.n	8000c40 <__aeabi_fcmpun+0x20>
 8000c3a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c3e:	d102      	bne.n	8000c46 <__aeabi_fcmpun+0x26>
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	f04f 0001 	mov.w	r0, #1
 8000c4a:	4770      	bx	lr

08000c4c <__aeabi_f2iz>:
 8000c4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c50:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c54:	d30f      	bcc.n	8000c76 <__aeabi_f2iz+0x2a>
 8000c56:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c5a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c5e:	d90d      	bls.n	8000c7c <__aeabi_f2iz+0x30>
 8000c60:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c68:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c6c:	fa23 f002 	lsr.w	r0, r3, r2
 8000c70:	bf18      	it	ne
 8000c72:	4240      	negne	r0, r0
 8000c74:	4770      	bx	lr
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	4770      	bx	lr
 8000c7c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c80:	d101      	bne.n	8000c86 <__aeabi_f2iz+0x3a>
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	d105      	bne.n	8000c92 <__aeabi_f2iz+0x46>
 8000c86:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c8a:	bf08      	it	eq
 8000c8c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_f2uiz>:
 8000c98:	0042      	lsls	r2, r0, #1
 8000c9a:	d20e      	bcs.n	8000cba <__aeabi_f2uiz+0x22>
 8000c9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ca0:	d30b      	bcc.n	8000cba <__aeabi_f2uiz+0x22>
 8000ca2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ca6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000caa:	d409      	bmi.n	8000cc0 <__aeabi_f2uiz+0x28>
 8000cac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000cb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cb4:	fa23 f002 	lsr.w	r0, r3, r2
 8000cb8:	4770      	bx	lr
 8000cba:	f04f 0000 	mov.w	r0, #0
 8000cbe:	4770      	bx	lr
 8000cc0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000cc4:	d101      	bne.n	8000cca <__aeabi_f2uiz+0x32>
 8000cc6:	0242      	lsls	r2, r0, #9
 8000cc8:	d102      	bne.n	8000cd0 <__aeabi_f2uiz+0x38>
 8000cca:	f04f 30ff 	mov.w	r0, #4294967295
 8000cce:	4770      	bx	lr
 8000cd0:	f04f 0000 	mov.w	r0, #0
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <NVIC_PriorityGroupConfig+0x10>)
 8000cda:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000cde:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000ce2:	60d8      	str	r0, [r3, #12]
}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000cec:	78c3      	ldrb	r3, [r0, #3]
 8000cee:	b313      	cbz	r3, 8000d36 <NVIC_Init+0x4a>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000cf0:	4a17      	ldr	r2, [pc, #92]	; (8000d50 <NVIC_Init+0x64>)
{
 8000cf2:	b530      	push	{r4, r5, lr}
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000cf4:	68d1      	ldr	r1, [r2, #12]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000cf6:	f04f 0e01 	mov.w	lr, #1
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000cfa:	43c9      	mvns	r1, r1
    tmpsub = tmpsub >> tmppriority;
 8000cfc:	230f      	movs	r3, #15
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000cfe:	7882      	ldrb	r2, [r0, #2]
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000d00:	f890 c001 	ldrb.w	ip, [r0, #1]
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000d04:	7800      	ldrb	r0, [r0, #0]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000d06:	f3c1 2102 	ubfx	r1, r1, #8, #3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d0a:	f000 041f 	and.w	r4, r0, #31
 8000d0e:	fa0e f404 	lsl.w	r4, lr, r4
    tmpsub = tmpsub >> tmppriority;
 8000d12:	40cb      	lsrs	r3, r1
    tmppre = (0x4 - tmppriority);
 8000d14:	f1c1 0e04 	rsb	lr, r1, #4
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000d18:	4013      	ands	r3, r2
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000d1a:	fa0c fc0e 	lsl.w	ip, ip, lr
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000d1e:	4d0d      	ldr	r5, [pc, #52]	; (8000d54 <NVIC_Init+0x68>)
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000d20:	ea43 030c 	orr.w	r3, r3, ip
    tmppriority = tmppriority << 0x04;
 8000d24:	011b      	lsls	r3, r3, #4
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000d26:	182a      	adds	r2, r5, r0
 8000d28:	b2db      	uxtb	r3, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d2a:	0940      	lsrs	r0, r0, #5
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000d2c:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d30:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000d34:	bd30      	pop	{r4, r5, pc}
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d36:	2101      	movs	r1, #1
 8000d38:	7803      	ldrb	r3, [r0, #0]
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d3a:	4806      	ldr	r0, [pc, #24]	; (8000d54 <NVIC_Init+0x68>)
 8000d3c:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d3e:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d42:	3220      	adds	r2, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d44:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d48:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000d58:	7983      	ldrb	r3, [r0, #6]
 8000d5a:	b33b      	cbz	r3, 8000dac <EXTI_Init+0x54>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <EXTI_Init+0x7c>)
 8000d5e:	6801      	ldr	r1, [r0, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
{
 8000d62:	b410      	push	{r4}
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000d64:	ea22 0201 	bic.w	r2, r2, r1
 8000d68:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	ea22 0201 	bic.w	r2, r2, r1
 8000d70:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000d72:	7902      	ldrb	r2, [r0, #4]
 8000d74:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000d78:	f502 3282 	add.w	r2, r2, #66560	; 0x10400

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000d7c:	6814      	ldr	r4, [r2, #0]
 8000d7e:	4321      	orrs	r1, r4
 8000d80:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000d82:	6899      	ldr	r1, [r3, #8]
 8000d84:	6802      	ldr	r2, [r0, #0]
 8000d86:	ea21 0102 	bic.w	r1, r1, r2
 8000d8a:	6099      	str	r1, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000d8c:	68d9      	ldr	r1, [r3, #12]
 8000d8e:	ea21 0102 	bic.w	r1, r1, r2
 8000d92:	60d9      	str	r1, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000d94:	7941      	ldrb	r1, [r0, #5]
 8000d96:	2910      	cmp	r1, #16
 8000d98:	d013      	beq.n	8000dc2 <EXTI_Init+0x6a>
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000d9a:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8000d9e:	f503 3382 	add.w	r3, r3, #66560	; 0x10400

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000da2:	6819      	ldr	r1, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000da4:	bc10      	pop	{r4}
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000da6:	430a      	orrs	r2, r1
 8000da8:	601a      	str	r2, [r3, #0]
}
 8000daa:	4770      	bx	lr
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000dac:	7903      	ldrb	r3, [r0, #4]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000dae:	6801      	ldr	r1, [r0, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000db0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000db4:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	ea22 0201 	bic.w	r2, r2, r1
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	4770      	bx	lr
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000dc2:	6899      	ldr	r1, [r3, #8]
}
 8000dc4:	bc10      	pop	{r4}
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000dc6:	4311      	orrs	r1, r2
 8000dc8:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000dca:	68d9      	ldr	r1, [r3, #12]
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	60da      	str	r2, [r3, #12]
}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40010400 	.word	0x40010400

08000dd8 <EXTI_GetITStatus>:
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <EXTI_GetITStatus+0x18>)
{
 8000dda:	4602      	mov	r2, r0
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000ddc:	6819      	ldr	r1, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	4018      	ands	r0, r3
 8000de2:	d003      	beq.n	8000dec <EXTI_GetITStatus+0x14>
 8000de4:	4211      	tst	r1, r2
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 8000de6:	bf14      	ite	ne
 8000de8:	2001      	movne	r0, #1
 8000dea:	2000      	moveq	r0, #0
  }
  return bitstatus;
}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40010400 	.word	0x40010400

08000df4 <EXTI_ClearITPendingBit>:
 8000df4:	4b01      	ldr	r3, [pc, #4]	; (8000dfc <EXTI_ClearITPendingBit+0x8>)
 8000df6:	6158      	str	r0, [r3, #20]
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	40010400 	.word	0x40010400

08000e00 <FLASH_Unlock>:
  * @retval None
  */
void FLASH_Unlock(void)
{
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 8000e00:	4b02      	ldr	r3, [pc, #8]	; (8000e0c <FLASH_Unlock+0xc>)
 8000e02:	4903      	ldr	r1, [pc, #12]	; (8000e10 <FLASH_Unlock+0x10>)
  FLASH->KEYR = FLASH_KEY2;
 8000e04:	4a03      	ldr	r2, [pc, #12]	; (8000e14 <FLASH_Unlock+0x14>)
  FLASH->KEYR = FLASH_KEY1;
 8000e06:	6059      	str	r1, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8000e08:	605a      	str	r2, [r3, #4]
#ifdef STM32F10X_XL
  /* Authorize the FPEC of Bank2 Access */
  FLASH->KEYR2 = FLASH_KEY1;
  FLASH->KEYR2 = FLASH_KEY2;
#endif /* STM32F10X_XL */
}
 8000e0a:	4770      	bx	lr
 8000e0c:	40022000 	.word	0x40022000
 8000e10:	45670123 	.word	0x45670123
 8000e14:	cdef89ab 	.word	0xcdef89ab

08000e18 <FLASH_ErasePage>:
  */
FLASH_Status FLASH_GetBank1Status(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8000e18:	4a32      	ldr	r2, [pc, #200]	; (8000ee4 <FLASH_ErasePage+0xcc>)
 8000e1a:	68d3      	ldr	r3, [r2, #12]
 8000e1c:	07db      	lsls	r3, r3, #31
 8000e1e:	d407      	bmi.n	8000e30 <FLASH_ErasePage+0x18>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000e20:	68d3      	ldr	r3, [r2, #12]
 8000e22:	0759      	lsls	r1, r3, #29
 8000e24:	d448      	bmi.n	8000eb8 <FLASH_ErasePage+0xa0>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000e26:	68d3      	ldr	r3, [r2, #12]
 8000e28:	06db      	lsls	r3, r3, #27
 8000e2a:	d520      	bpl.n	8000e6e <FLASH_ErasePage+0x56>
      {
        flashstatus = FLASH_ERROR_WRP;
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	4770      	bx	lr
 8000e30:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8000e34:	68d1      	ldr	r1, [r2, #12]
 8000e36:	07c9      	lsls	r1, r1, #31
 8000e38:	d40c      	bmi.n	8000e54 <FLASH_ErasePage+0x3c>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000e3a:	68d1      	ldr	r1, [r2, #12]
 8000e3c:	0749      	lsls	r1, r1, #29
 8000e3e:	d40d      	bmi.n	8000e5c <FLASH_ErasePage+0x44>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000e40:	68d2      	ldr	r2, [r2, #12]
 8000e42:	06d2      	lsls	r2, r2, #27
 8000e44:	d511      	bpl.n	8000e6a <FLASH_ErasePage+0x52>
  status = FLASH_GetBank1Status();
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
  {
    status = FLASH_GetBank1Status();
    Timeout--;
 8000e46:	3b01      	subs	r3, #1
  }
  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 8000e48:	2b00      	cmp	r3, #0
        flashstatus = FLASH_ERROR_WRP;
 8000e4a:	f04f 0003 	mov.w	r0, #3
    status = FLASH_TIMEOUT;
 8000e4e:	bf08      	it	eq
 8000e50:	2005      	moveq	r0, #5
}
 8000e52:	4770      	bx	lr
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000e54:	3b01      	subs	r3, #1
 8000e56:	d1ed      	bne.n	8000e34 <FLASH_ErasePage+0x1c>
    status = FLASH_TIMEOUT;
 8000e58:	2005      	movs	r0, #5
 8000e5a:	4770      	bx	lr
    Timeout--;
 8000e5c:	3b01      	subs	r3, #1
    status = FLASH_TIMEOUT;
 8000e5e:	2b00      	cmp	r3, #0
      flashstatus = FLASH_ERROR_PG;
 8000e60:	f04f 0002 	mov.w	r0, #2
    status = FLASH_TIMEOUT;
 8000e64:	bf08      	it	eq
 8000e66:	2005      	moveq	r0, #5
}
 8000e68:	4770      	bx	lr
  if(Timeout == 0x00 )
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d0f4      	beq.n	8000e58 <FLASH_ErasePage+0x40>
    FLASH->CR|= CR_PER_Set;
 8000e6e:	4a1d      	ldr	r2, [pc, #116]	; (8000ee4 <FLASH_ErasePage+0xcc>)
 8000e70:	6913      	ldr	r3, [r2, #16]
 8000e72:	f043 0302 	orr.w	r3, r3, #2
 8000e76:	6113      	str	r3, [r2, #16]
    FLASH->AR = Page_Address; 
 8000e78:	6150      	str	r0, [r2, #20]
    FLASH->CR|= CR_STRT_Set;
 8000e7a:	6913      	ldr	r3, [r2, #16]
 8000e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e80:	6113      	str	r3, [r2, #16]
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8000e82:	68d3      	ldr	r3, [r2, #12]
 8000e84:	07d9      	lsls	r1, r3, #31
 8000e86:	d519      	bpl.n	8000ebc <FLASH_ErasePage+0xa4>
 8000e88:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
 8000e8c:	68d1      	ldr	r1, [r2, #12]
 8000e8e:	07c8      	lsls	r0, r1, #31
 8000e90:	d41e      	bmi.n	8000ed0 <FLASH_ErasePage+0xb8>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000e92:	68d1      	ldr	r1, [r2, #12]
 8000e94:	0749      	lsls	r1, r1, #29
 8000e96:	d41f      	bmi.n	8000ed8 <FLASH_ErasePage+0xc0>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000e98:	68d2      	ldr	r2, [r2, #12]
    Timeout--;
 8000e9a:	3b01      	subs	r3, #1
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000e9c:	06d2      	lsls	r2, r2, #27
        flashstatus = FLASH_ERROR_WRP;
 8000e9e:	bf4c      	ite	mi
 8000ea0:	2003      	movmi	r0, #3
        flashstatus = FLASH_COMPLETE;
 8000ea2:	2004      	movpl	r0, #4
    status = FLASH_TIMEOUT;
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	bf08      	it	eq
 8000ea8:	2005      	moveq	r0, #5
    FLASH->CR &= CR_PER_Reset;
 8000eaa:	f641 71fd 	movw	r1, #8189	; 0x1ffd
 8000eae:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <FLASH_ErasePage+0xcc>)
 8000eb0:	6913      	ldr	r3, [r2, #16]
 8000eb2:	400b      	ands	r3, r1
 8000eb4:	6113      	str	r3, [r2, #16]
 8000eb6:	4770      	bx	lr
      flashstatus = FLASH_ERROR_PG;
 8000eb8:	2002      	movs	r0, #2
 8000eba:	4770      	bx	lr
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000ebc:	68d3      	ldr	r3, [r2, #12]
 8000ebe:	075b      	lsls	r3, r3, #29
 8000ec0:	d40d      	bmi.n	8000ede <FLASH_ErasePage+0xc6>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000ec2:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 8000ec4:	f013 0f10 	tst.w	r3, #16
 8000ec8:	bf14      	ite	ne
 8000eca:	2003      	movne	r0, #3
 8000ecc:	2004      	moveq	r0, #4
 8000ece:	e7ec      	b.n	8000eaa <FLASH_ErasePage+0x92>
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	d1db      	bne.n	8000e8c <FLASH_ErasePage+0x74>
    status = FLASH_TIMEOUT;
 8000ed4:	2005      	movs	r0, #5
 8000ed6:	e7e8      	b.n	8000eaa <FLASH_ErasePage+0x92>
      flashstatus = FLASH_ERROR_PG;
 8000ed8:	2002      	movs	r0, #2
    Timeout--;
 8000eda:	3b01      	subs	r3, #1
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000edc:	e7e2      	b.n	8000ea4 <FLASH_ErasePage+0x8c>
      flashstatus = FLASH_ERROR_PG;
 8000ede:	2002      	movs	r0, #2
 8000ee0:	e7e3      	b.n	8000eaa <FLASH_ErasePage+0x92>
 8000ee2:	bf00      	nop
 8000ee4:	40022000 	.word	0x40022000

08000ee8 <FLASH_ProgramHalfWord>:
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8000ee8:	4a30      	ldr	r2, [pc, #192]	; (8000fac <FLASH_ProgramHalfWord+0xc4>)
{
 8000eea:	b410      	push	{r4}
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8000eec:	68d3      	ldr	r3, [r2, #12]
 8000eee:	07db      	lsls	r3, r3, #31
 8000ef0:	d408      	bmi.n	8000f04 <FLASH_ProgramHalfWord+0x1c>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000ef2:	68d3      	ldr	r3, [r2, #12]
 8000ef4:	075c      	lsls	r4, r3, #29
 8000ef6:	d443      	bmi.n	8000f80 <FLASH_ProgramHalfWord+0x98>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000ef8:	68d3      	ldr	r3, [r2, #12]
 8000efa:	06db      	lsls	r3, r3, #27
 8000efc:	d51e      	bpl.n	8000f3c <FLASH_ProgramHalfWord+0x54>
        flashstatus = FLASH_ERROR_WRP;
 8000efe:	2003      	movs	r0, #3
}
 8000f00:	bc10      	pop	{r4}
 8000f02:	4770      	bx	lr
 8000f04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8000f08:	68d4      	ldr	r4, [r2, #12]
 8000f0a:	07e4      	lsls	r4, r4, #31
 8000f0c:	d40c      	bmi.n	8000f28 <FLASH_ProgramHalfWord+0x40>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000f0e:	68d4      	ldr	r4, [r2, #12]
 8000f10:	0764      	lsls	r4, r4, #29
 8000f12:	d40e      	bmi.n	8000f32 <FLASH_ProgramHalfWord+0x4a>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000f14:	68d2      	ldr	r2, [r2, #12]
 8000f16:	06d2      	lsls	r2, r2, #27
 8000f18:	d50e      	bpl.n	8000f38 <FLASH_ProgramHalfWord+0x50>
        flashstatus = FLASH_ERROR_WRP;
 8000f1a:	2003      	movs	r0, #3
    Timeout--;
 8000f1c:	3b01      	subs	r3, #1
    status = FLASH_TIMEOUT;
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	bf08      	it	eq
 8000f22:	2005      	moveq	r0, #5
}
 8000f24:	bc10      	pop	{r4}
 8000f26:	4770      	bx	lr
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	d1ed      	bne.n	8000f08 <FLASH_ProgramHalfWord+0x20>
    status = FLASH_TIMEOUT;
 8000f2c:	2005      	movs	r0, #5
}
 8000f2e:	bc10      	pop	{r4}
 8000f30:	4770      	bx	lr
      flashstatus = FLASH_ERROR_PG;
 8000f32:	2002      	movs	r0, #2
    Timeout--;
 8000f34:	3b01      	subs	r3, #1
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000f36:	e7f2      	b.n	8000f1e <FLASH_ProgramHalfWord+0x36>
  if(Timeout == 0x00 )
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d0f7      	beq.n	8000f2c <FLASH_ProgramHalfWord+0x44>
    FLASH->CR |= CR_PG_Set;
 8000f3c:	4a1b      	ldr	r2, [pc, #108]	; (8000fac <FLASH_ProgramHalfWord+0xc4>)
 8000f3e:	6913      	ldr	r3, [r2, #16]
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
 8000f46:	8001      	strh	r1, [r0, #0]
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8000f48:	68d3      	ldr	r3, [r2, #12]
 8000f4a:	07db      	lsls	r3, r3, #31
 8000f4c:	d51b      	bpl.n	8000f86 <FLASH_ProgramHalfWord+0x9e>
 8000f4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f52:	68d1      	ldr	r1, [r2, #12]
 8000f54:	07c8      	lsls	r0, r1, #31
 8000f56:	d420      	bmi.n	8000f9a <FLASH_ProgramHalfWord+0xb2>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000f58:	68d1      	ldr	r1, [r2, #12]
 8000f5a:	0749      	lsls	r1, r1, #29
 8000f5c:	d421      	bmi.n	8000fa2 <FLASH_ProgramHalfWord+0xba>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000f5e:	68d2      	ldr	r2, [r2, #12]
    Timeout--;
 8000f60:	3b01      	subs	r3, #1
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000f62:	06d2      	lsls	r2, r2, #27
        flashstatus = FLASH_ERROR_WRP;
 8000f64:	bf4c      	ite	mi
 8000f66:	2003      	movmi	r0, #3
        flashstatus = FLASH_COMPLETE;
 8000f68:	2004      	movpl	r0, #4
    status = FLASH_TIMEOUT;
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	bf08      	it	eq
 8000f6e:	2005      	moveq	r0, #5
    FLASH->CR &= CR_PG_Reset;
 8000f70:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 8000f74:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <FLASH_ProgramHalfWord+0xc4>)
}
 8000f76:	bc10      	pop	{r4}
    FLASH->CR &= CR_PG_Reset;
 8000f78:	6913      	ldr	r3, [r2, #16]
 8000f7a:	400b      	ands	r3, r1
 8000f7c:	6113      	str	r3, [r2, #16]
}
 8000f7e:	4770      	bx	lr
      flashstatus = FLASH_ERROR_PG;
 8000f80:	2002      	movs	r0, #2
}
 8000f82:	bc10      	pop	{r4}
 8000f84:	4770      	bx	lr
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000f86:	68d3      	ldr	r3, [r2, #12]
 8000f88:	075c      	lsls	r4, r3, #29
 8000f8a:	d40d      	bmi.n	8000fa8 <FLASH_ProgramHalfWord+0xc0>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000f8c:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 8000f8e:	f013 0f10 	tst.w	r3, #16
 8000f92:	bf14      	ite	ne
 8000f94:	2003      	movne	r0, #3
 8000f96:	2004      	moveq	r0, #4
 8000f98:	e7ea      	b.n	8000f70 <FLASH_ProgramHalfWord+0x88>
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	d1d9      	bne.n	8000f52 <FLASH_ProgramHalfWord+0x6a>
    status = FLASH_TIMEOUT;
 8000f9e:	2005      	movs	r0, #5
 8000fa0:	e7e6      	b.n	8000f70 <FLASH_ProgramHalfWord+0x88>
      flashstatus = FLASH_ERROR_PG;
 8000fa2:	2002      	movs	r0, #2
    Timeout--;
 8000fa4:	3b01      	subs	r3, #1
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000fa6:	e7e0      	b.n	8000f6a <FLASH_ProgramHalfWord+0x82>
      flashstatus = FLASH_ERROR_PG;
 8000fa8:	2002      	movs	r0, #2
 8000faa:	e7e1      	b.n	8000f70 <FLASH_ProgramHalfWord+0x88>
 8000fac:	40022000 	.word	0x40022000

08000fb0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000fb0:	b500      	push	{lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000fb2:	f891 c003 	ldrb.w	ip, [r1, #3]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000fb6:	f01c 0f10 	tst.w	ip, #16
 8000fba:	bf18      	it	ne
 8000fbc:	788b      	ldrbne	r3, [r1, #2]
 8000fbe:	f00c 0e0f 	and.w	lr, ip, #15
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000fc2:	bf18      	it	ne
 8000fc4:	ea4e 0e03 	orrne.w	lr, lr, r3
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000fc8:	880b      	ldrh	r3, [r1, #0]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	2a00      	cmp	r2, #0
 8000fce:	d036      	beq.n	800103e <GPIO_Init+0x8e>
  {
    tmpreg = GPIOx->CRL;
 8000fd0:	f1bc 0f48 	cmp.w	ip, #72	; 0x48
 8000fd4:	6802      	ldr	r2, [r0, #0]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000fd6:	f000 80b3 	beq.w	8001140 <GPIO_Init+0x190>
 8000fda:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8000fde:	f000 813a 	beq.w	8001256 <GPIO_Init+0x2a6>
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 8000fe2:	07d9      	lsls	r1, r3, #31
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000fe4:	bf44      	itt	mi
 8000fe6:	f022 020f 	bicmi.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000fea:	ea4e 0202 	orrmi.w	r2, lr, r2
      if (currentpin == pos)
 8000fee:	0799      	lsls	r1, r3, #30
        tmpreg &= ~pinmask;
 8000ff0:	bf44      	itt	mi
 8000ff2:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 8000ff6:	ea42 120e 	orrmi.w	r2, r2, lr, lsl #4
      if (currentpin == pos)
 8000ffa:	0759      	lsls	r1, r3, #29
        tmpreg &= ~pinmask;
 8000ffc:	bf44      	itt	mi
 8000ffe:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001002:	ea42 220e 	orrmi.w	r2, r2, lr, lsl #8
      if (currentpin == pos)
 8001006:	0719      	lsls	r1, r3, #28
        tmpreg &= ~pinmask;
 8001008:	bf44      	itt	mi
 800100a:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 800100e:	ea42 320e 	orrmi.w	r2, r2, lr, lsl #12
      if (currentpin == pos)
 8001012:	06d9      	lsls	r1, r3, #27
        tmpreg &= ~pinmask;
 8001014:	bf44      	itt	mi
 8001016:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800101a:	ea42 420e 	orrmi.w	r2, r2, lr, lsl #16
      if (currentpin == pos)
 800101e:	0699      	lsls	r1, r3, #26
        tmpreg &= ~pinmask;
 8001020:	bf44      	itt	mi
 8001022:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8001026:	ea42 520e 	orrmi.w	r2, r2, lr, lsl #20
      if (currentpin == pos)
 800102a:	0659      	lsls	r1, r3, #25
        tmpreg &= ~pinmask;
 800102c:	bf44      	itt	mi
 800102e:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001032:	ea42 620e 	orrmi.w	r2, r2, lr, lsl #24
      if (currentpin == pos)
 8001036:	0619      	lsls	r1, r3, #24
 8001038:	f100 810a 	bmi.w	8001250 <GPIO_Init+0x2a0>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800103c:	6002      	str	r2, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800103e:	2bff      	cmp	r3, #255	; 0xff
 8001040:	d94a      	bls.n	80010d8 <GPIO_Init+0x128>
  {
    tmpreg = GPIOx->CRH;
 8001042:	f1bc 0f48 	cmp.w	ip, #72	; 0x48
 8001046:	6842      	ldr	r2, [r0, #4]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001048:	d148      	bne.n	80010dc <GPIO_Init+0x12c>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 800104a:	05d9      	lsls	r1, r3, #23
 800104c:	d506      	bpl.n	800105c <GPIO_Init+0xac>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800104e:	f44f 7180 	mov.w	r1, #256	; 0x100
        tmpreg &= ~pinmask;
 8001052:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 8001056:	ea4e 0202 	orr.w	r2, lr, r2
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800105a:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 800105c:	0599      	lsls	r1, r3, #22
 800105e:	d506      	bpl.n	800106e <GPIO_Init+0xbe>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001060:	f44f 7100 	mov.w	r1, #512	; 0x200
        tmpreg &= ~pinmask;
 8001064:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 8001068:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800106c:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 800106e:	0559      	lsls	r1, r3, #21
 8001070:	d506      	bpl.n	8001080 <GPIO_Init+0xd0>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001072:	f44f 6180 	mov.w	r1, #1024	; 0x400
        tmpreg &= ~pinmask;
 8001076:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 800107a:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800107e:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001080:	0519      	lsls	r1, r3, #20
 8001082:	d506      	bpl.n	8001092 <GPIO_Init+0xe2>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001084:	f44f 6100 	mov.w	r1, #2048	; 0x800
        tmpreg &= ~pinmask;
 8001088:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 800108c:	ea42 320e 	orr.w	r2, r2, lr, lsl #12
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001090:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001092:	04d9      	lsls	r1, r3, #19
 8001094:	d506      	bpl.n	80010a4 <GPIO_Init+0xf4>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001096:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        tmpreg &= ~pinmask;
 800109a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800109e:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80010a2:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80010a4:	0499      	lsls	r1, r3, #18
 80010a6:	d506      	bpl.n	80010b6 <GPIO_Init+0x106>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80010a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        tmpreg &= ~pinmask;
 80010ac:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 80010b0:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80010b4:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80010b6:	0459      	lsls	r1, r3, #17
 80010b8:	d506      	bpl.n	80010c8 <GPIO_Init+0x118>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80010ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        tmpreg &= ~pinmask;
 80010be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 80010c2:	ea42 620e 	orr.w	r2, r2, lr, lsl #24
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80010c6:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80010c8:	041b      	lsls	r3, r3, #16
 80010ca:	d504      	bpl.n	80010d6 <GPIO_Init+0x126>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80010cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        tmpreg |= (currentmode << pos);
 80010d0:	f36e 721f 	bfi	r2, lr, #28, #4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80010d4:	6103      	str	r3, [r0, #16]
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80010d6:	6042      	str	r2, [r0, #4]
  }
}
 80010d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80010dc:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 80010e0:	d06e      	beq.n	80011c0 <GPIO_Init+0x210>
      if (currentpin == pos)
 80010e2:	05d9      	lsls	r1, r3, #23
        tmpreg &= ~pinmask;
 80010e4:	bf44      	itt	mi
 80010e6:	f022 020f 	bicmi.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 80010ea:	ea4e 0202 	orrmi.w	r2, lr, r2
      if (currentpin == pos)
 80010ee:	0599      	lsls	r1, r3, #22
        tmpreg &= ~pinmask;
 80010f0:	bf44      	itt	mi
 80010f2:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80010f6:	ea42 120e 	orrmi.w	r2, r2, lr, lsl #4
      if (currentpin == pos)
 80010fa:	0559      	lsls	r1, r3, #21
        tmpreg &= ~pinmask;
 80010fc:	bf44      	itt	mi
 80010fe:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001102:	ea42 220e 	orrmi.w	r2, r2, lr, lsl #8
      if (currentpin == pos)
 8001106:	0519      	lsls	r1, r3, #20
        tmpreg &= ~pinmask;
 8001108:	bf44      	itt	mi
 800110a:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 800110e:	ea42 320e 	orrmi.w	r2, r2, lr, lsl #12
      if (currentpin == pos)
 8001112:	04d9      	lsls	r1, r3, #19
        tmpreg &= ~pinmask;
 8001114:	bf44      	itt	mi
 8001116:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800111a:	ea42 420e 	orrmi.w	r2, r2, lr, lsl #16
      if (currentpin == pos)
 800111e:	0499      	lsls	r1, r3, #18
        tmpreg &= ~pinmask;
 8001120:	bf44      	itt	mi
 8001122:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8001126:	ea42 520e 	orrmi.w	r2, r2, lr, lsl #20
      if (currentpin == pos)
 800112a:	0459      	lsls	r1, r3, #17
        tmpreg &= ~pinmask;
 800112c:	bf44      	itt	mi
 800112e:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001132:	ea42 620e 	orrmi.w	r2, r2, lr, lsl #24
      if (currentpin == pos)
 8001136:	041b      	lsls	r3, r3, #16
 8001138:	d5cd      	bpl.n	80010d6 <GPIO_Init+0x126>
        tmpreg |= (currentmode << pos);
 800113a:	f36e 721f 	bfi	r2, lr, #28, #4
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800113e:	e7ca      	b.n	80010d6 <GPIO_Init+0x126>
      if (currentpin == pos)
 8001140:	07d9      	lsls	r1, r3, #31
 8001142:	d505      	bpl.n	8001150 <GPIO_Init+0x1a0>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001144:	2101      	movs	r1, #1
        tmpreg &= ~pinmask;
 8001146:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 800114a:	ea4e 0202 	orr.w	r2, lr, r2
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800114e:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001150:	0799      	lsls	r1, r3, #30
 8001152:	d505      	bpl.n	8001160 <GPIO_Init+0x1b0>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001154:	2102      	movs	r1, #2
        tmpreg &= ~pinmask;
 8001156:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 800115a:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800115e:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001160:	0759      	lsls	r1, r3, #29
 8001162:	d505      	bpl.n	8001170 <GPIO_Init+0x1c0>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001164:	2104      	movs	r1, #4
        tmpreg &= ~pinmask;
 8001166:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 800116a:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800116e:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001170:	0719      	lsls	r1, r3, #28
 8001172:	d505      	bpl.n	8001180 <GPIO_Init+0x1d0>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001174:	2108      	movs	r1, #8
        tmpreg &= ~pinmask;
 8001176:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 800117a:	ea42 320e 	orr.w	r2, r2, lr, lsl #12
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800117e:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001180:	06d9      	lsls	r1, r3, #27
 8001182:	d505      	bpl.n	8001190 <GPIO_Init+0x1e0>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001184:	2110      	movs	r1, #16
        tmpreg &= ~pinmask;
 8001186:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800118a:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800118e:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001190:	0699      	lsls	r1, r3, #26
 8001192:	d505      	bpl.n	80011a0 <GPIO_Init+0x1f0>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001194:	2120      	movs	r1, #32
        tmpreg &= ~pinmask;
 8001196:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 800119a:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800119e:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80011a0:	0659      	lsls	r1, r3, #25
 80011a2:	d505      	bpl.n	80011b0 <GPIO_Init+0x200>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80011a4:	2140      	movs	r1, #64	; 0x40
        tmpreg &= ~pinmask;
 80011a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 80011aa:	ea42 620e 	orr.w	r2, r2, lr, lsl #24
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80011ae:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80011b0:	0619      	lsls	r1, r3, #24
 80011b2:	f57f af43 	bpl.w	800103c <GPIO_Init+0x8c>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80011b6:	2180      	movs	r1, #128	; 0x80
        tmpreg |= (currentmode << pos);
 80011b8:	f36e 721f 	bfi	r2, lr, #28, #4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80011bc:	6101      	str	r1, [r0, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80011be:	e73d      	b.n	800103c <GPIO_Init+0x8c>
      if (currentpin == pos)
 80011c0:	05d9      	lsls	r1, r3, #23
 80011c2:	d506      	bpl.n	80011d2 <GPIO_Init+0x222>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011c4:	f44f 7180 	mov.w	r1, #256	; 0x100
        tmpreg &= ~pinmask;
 80011c8:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 80011cc:	ea4e 0202 	orr.w	r2, lr, r2
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011d0:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80011d2:	0599      	lsls	r1, r3, #22
 80011d4:	d506      	bpl.n	80011e4 <GPIO_Init+0x234>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011d6:	f44f 7100 	mov.w	r1, #512	; 0x200
        tmpreg &= ~pinmask;
 80011da:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80011de:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011e2:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80011e4:	0559      	lsls	r1, r3, #21
 80011e6:	d506      	bpl.n	80011f6 <GPIO_Init+0x246>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
        tmpreg &= ~pinmask;
 80011ec:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 80011f0:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011f4:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80011f6:	0519      	lsls	r1, r3, #20
 80011f8:	d506      	bpl.n	8001208 <GPIO_Init+0x258>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
        tmpreg &= ~pinmask;
 80011fe:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 8001202:	ea42 320e 	orr.w	r2, r2, lr, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001206:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001208:	04d9      	lsls	r1, r3, #19
 800120a:	d506      	bpl.n	800121a <GPIO_Init+0x26a>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800120c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        tmpreg &= ~pinmask;
 8001210:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 8001214:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001218:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 800121a:	0499      	lsls	r1, r3, #18
 800121c:	d506      	bpl.n	800122c <GPIO_Init+0x27c>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800121e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        tmpreg &= ~pinmask;
 8001222:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8001226:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800122a:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 800122c:	0459      	lsls	r1, r3, #17
 800122e:	d506      	bpl.n	800123e <GPIO_Init+0x28e>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001230:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        tmpreg &= ~pinmask;
 8001234:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001238:	ea42 620e 	orr.w	r2, r2, lr, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800123c:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 800123e:	041b      	lsls	r3, r3, #16
 8001240:	f57f af49 	bpl.w	80010d6 <GPIO_Init+0x126>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        tmpreg |= (currentmode << pos);
 8001248:	f36e 721f 	bfi	r2, lr, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800124c:	6143      	str	r3, [r0, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800124e:	e742      	b.n	80010d6 <GPIO_Init+0x126>
        tmpreg |= (currentmode << pos);
 8001250:	f36e 721f 	bfi	r2, lr, #28, #4
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001254:	e6f2      	b.n	800103c <GPIO_Init+0x8c>
      if (currentpin == pos)
 8001256:	07d9      	lsls	r1, r3, #31
 8001258:	d505      	bpl.n	8001266 <GPIO_Init+0x2b6>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800125a:	2101      	movs	r1, #1
        tmpreg &= ~pinmask;
 800125c:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 8001260:	ea4e 0202 	orr.w	r2, lr, r2
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001264:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001266:	0799      	lsls	r1, r3, #30
 8001268:	d505      	bpl.n	8001276 <GPIO_Init+0x2c6>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800126a:	2102      	movs	r1, #2
        tmpreg &= ~pinmask;
 800126c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 8001270:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001274:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001276:	0759      	lsls	r1, r3, #29
 8001278:	d505      	bpl.n	8001286 <GPIO_Init+0x2d6>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800127a:	2104      	movs	r1, #4
        tmpreg &= ~pinmask;
 800127c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001280:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001284:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001286:	0719      	lsls	r1, r3, #28
 8001288:	d505      	bpl.n	8001296 <GPIO_Init+0x2e6>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800128a:	2108      	movs	r1, #8
        tmpreg &= ~pinmask;
 800128c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 8001290:	ea42 320e 	orr.w	r2, r2, lr, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001294:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001296:	06d9      	lsls	r1, r3, #27
 8001298:	d505      	bpl.n	80012a6 <GPIO_Init+0x2f6>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800129a:	2110      	movs	r1, #16
        tmpreg &= ~pinmask;
 800129c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 80012a0:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80012a4:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80012a6:	0699      	lsls	r1, r3, #26
 80012a8:	d505      	bpl.n	80012b6 <GPIO_Init+0x306>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80012aa:	2120      	movs	r1, #32
        tmpreg &= ~pinmask;
 80012ac:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 80012b0:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80012b4:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80012b6:	0659      	lsls	r1, r3, #25
 80012b8:	d505      	bpl.n	80012c6 <GPIO_Init+0x316>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80012ba:	2140      	movs	r1, #64	; 0x40
        tmpreg &= ~pinmask;
 80012bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 80012c0:	ea42 620e 	orr.w	r2, r2, lr, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80012c4:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80012c6:	0619      	lsls	r1, r3, #24
 80012c8:	f57f aeb8 	bpl.w	800103c <GPIO_Init+0x8c>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80012cc:	2180      	movs	r1, #128	; 0x80
        tmpreg |= (currentmode << pos);
 80012ce:	f36e 721f 	bfi	r2, lr, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80012d2:	6141      	str	r1, [r0, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80012d4:	e6b2      	b.n	800103c <GPIO_Init+0x8c>
 80012d6:	bf00      	nop

080012d8 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 80012d8:	6880      	ldr	r0, [r0, #8]
}
 80012da:	b280      	uxth	r0, r0
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop

080012e0 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 80012e0:	68c0      	ldr	r0, [r0, #12]
}
 80012e2:	b280      	uxth	r0, r0
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop

080012e8 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80012e8:	6101      	str	r1, [r0, #16]
}
 80012ea:	4770      	bx	lr

080012ec <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80012ec:	6141      	str	r1, [r0, #20]
}
 80012ee:	4770      	bx	lr

080012f0 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80012f0:	b10a      	cbz	r2, 80012f6 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f2:	6101      	str	r1, [r0, #16]
 80012f4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 80012f6:	6141      	str	r1, [r0, #20]
  }
}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop

080012fc <GPIO_PinRemapConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80012fc:	2800      	cmp	r0, #0
  {
    tmpreg = AFIO->MAPR2;
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <GPIO_PinRemapConfig+0x6c>)
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8001300:	f400 1240 	and.w	r2, r0, #3145728	; 0x300000
    tmpreg = AFIO->MAPR2;
 8001304:	bfb4      	ite	lt
 8001306:	69db      	ldrlt	r3, [r3, #28]
    tmpreg = AFIO->MAPR;
 8001308:	685b      	ldrge	r3, [r3, #4]
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 800130a:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
{
 800130e:	b410      	push	{r4}
  tmp = GPIO_Remap & LSB_MASK;
 8001310:	fa1f fc80 	uxth.w	ip, r0
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8001314:	d01f      	beq.n	8001356 <GPIO_PinRemapConfig+0x5a>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8001316:	02c2      	lsls	r2, r0, #11
 8001318:	d514      	bpl.n	8001344 <GPIO_PinRemapConfig+0x48>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 800131a:	2203      	movs	r2, #3
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 800131c:	f3c0 4403 	ubfx	r4, r0, #16, #4
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8001320:	40a2      	lsls	r2, r4
    tmpreg &= ~tmp1;
 8001322:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001326:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }

  if (NewState != DISABLE)
 800132a:	b121      	cbz	r1, 8001336 <GPIO_PinRemapConfig+0x3a>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 800132c:	0d42      	lsrs	r2, r0, #21
 800132e:	0112      	lsls	r2, r2, #4
 8001330:	fa0c f202 	lsl.w	r2, ip, r2
 8001334:	4313      	orrs	r3, r2
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
  {
    AFIO->MAPR2 = tmpreg;
 8001336:	4a0c      	ldr	r2, [pc, #48]	; (8001368 <GPIO_PinRemapConfig+0x6c>)
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001338:	2800      	cmp	r0, #0
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 800133a:	bc10      	pop	{r4}
    AFIO->MAPR2 = tmpreg;
 800133c:	bfb4      	ite	lt
 800133e:	61d3      	strlt	r3, [r2, #28]
    AFIO->MAPR = tmpreg;
 8001340:	6053      	strge	r3, [r2, #4]
}
 8001342:	4770      	bx	lr
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8001344:	0d42      	lsrs	r2, r0, #21
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	fa0c f202 	lsl.w	r2, ip, r2
 800134c:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001350:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001354:	e7e9      	b.n	800132a <GPIO_PinRemapConfig+0x2e>
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8001356:	4c04      	ldr	r4, [pc, #16]	; (8001368 <GPIO_PinRemapConfig+0x6c>)
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8001358:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 800135c:	6862      	ldr	r2, [r4, #4]
 800135e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001362:	6062      	str	r2, [r4, #4]
 8001364:	e7e1      	b.n	800132a <GPIO_PinRemapConfig+0x2e>
 8001366:	bf00      	nop
 8001368:	40010000 	.word	0x40010000

0800136c <GPIO_EXTILineConfig>:
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 800136c:	f04f 0c0f 	mov.w	ip, #15
 8001370:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8001374:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001378:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800137c:	f001 0103 	and.w	r1, r1, #3
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8001380:	689a      	ldr	r2, [r3, #8]
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8001382:	0089      	lsls	r1, r1, #2
 8001384:	fa0c fc01 	lsl.w	ip, ip, r1
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8001388:	ea22 020c 	bic.w	r2, r2, ip
 800138c:	609a      	str	r2, [r3, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	4088      	lsls	r0, r1
 8001392:	4310      	orrs	r0, r2
 8001394:	6098      	str	r0, [r3, #8]
}
 8001396:	4770      	bx	lr

08001398 <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8001398:	4b01      	ldr	r3, [pc, #4]	; (80013a0 <RCC_USBCLKConfig+0x8>)
 800139a:	f8c3 00d8 	str.w	r0, [r3, #216]	; 0xd8
}
 800139e:	4770      	bx	lr
 80013a0:	42420000 	.word	0x42420000

080013a4 <RCC_APB2PeriphClockCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <RCC_APB2PeriphClockCmd+0x14>)
 80013a6:	6993      	ldr	r3, [r2, #24]
  if (NewState != DISABLE)
 80013a8:	b111      	cbz	r1, 80013b0 <RCC_APB2PeriphClockCmd+0xc>
    RCC->APB2ENR |= RCC_APB2Periph;
 80013aa:	4318      	orrs	r0, r3
 80013ac:	6190      	str	r0, [r2, #24]
 80013ae:	4770      	bx	lr
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80013b0:	ea23 0000 	bic.w	r0, r3, r0
 80013b4:	6190      	str	r0, [r2, #24]
  }
}
 80013b6:	4770      	bx	lr
 80013b8:	40021000 	.word	0x40021000

080013bc <RCC_APB1PeriphClockCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80013bc:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <RCC_APB1PeriphClockCmd+0x14>)
 80013be:	69d3      	ldr	r3, [r2, #28]
  if (NewState != DISABLE)
 80013c0:	b111      	cbz	r1, 80013c8 <RCC_APB1PeriphClockCmd+0xc>
    RCC->APB1ENR |= RCC_APB1Periph;
 80013c2:	4318      	orrs	r0, r3
 80013c4:	61d0      	str	r0, [r2, #28]
 80013c6:	4770      	bx	lr
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80013c8:	ea23 0000 	bic.w	r0, r3, r0
 80013cc:	61d0      	str	r0, [r2, #28]
  }
}
 80013ce:	4770      	bx	lr
 80013d0:	40021000 	.word	0x40021000

080013d4 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80013d4:	4a27      	ldr	r2, [pc, #156]	; (8001474 <TIM_TimeBaseInit+0xa0>)
  tmpcr1 = TIMx->CR1;  
 80013d6:	8803      	ldrh	r3, [r0, #0]
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80013d8:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;  
 80013da:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80013dc:	d012      	beq.n	8001404 <TIM_TimeBaseInit+0x30>
 80013de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013e2:	4290      	cmp	r0, r2
 80013e4:	d00e      	beq.n	8001404 <TIM_TimeBaseInit+0x30>
 80013e6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80013ea:	d00b      	beq.n	8001404 <TIM_TimeBaseInit+0x30>
 80013ec:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80013f0:	4290      	cmp	r0, r2
 80013f2:	d007      	beq.n	8001404 <TIM_TimeBaseInit+0x30>
 80013f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013f8:	4290      	cmp	r0, r2
 80013fa:	d003      	beq.n	8001404 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80013fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001400:	4290      	cmp	r0, r2
 8001402:	d103      	bne.n	800140c <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001404:	884a      	ldrh	r2, [r1, #2]
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800140a:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800140c:	4a1a      	ldr	r2, [pc, #104]	; (8001478 <TIM_TimeBaseInit+0xa4>)
 800140e:	4290      	cmp	r0, r2
 8001410:	d017      	beq.n	8001442 <TIM_TimeBaseInit+0x6e>
 8001412:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001416:	4290      	cmp	r0, r2
 8001418:	d013      	beq.n	8001442 <TIM_TimeBaseInit+0x6e>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800141a:	88ca      	ldrh	r2, [r1, #6]
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 800141c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001420:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001422:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001424:	f8b1 c004 	ldrh.w	ip, [r1, #4]
  TIMx->CR1 = tmpcr1;
 8001428:	8003      	strh	r3, [r0, #0]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800142a:	4b12      	ldr	r3, [pc, #72]	; (8001474 <TIM_TimeBaseInit+0xa0>)
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800142c:	880a      	ldrh	r2, [r1, #0]
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800142e:	4298      	cmp	r0, r3
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001430:	f8a0 c02c 	strh.w	ip, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001434:	8502      	strh	r2, [r0, #40]	; 0x28
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001436:	d10c      	bne.n	8001452 <TIM_TimeBaseInit+0x7e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001438:	7a0b      	ldrb	r3, [r1, #8]
 800143a:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 800143c:	2301      	movs	r3, #1
 800143e:	8283      	strh	r3, [r0, #20]
}
 8001440:	4770      	bx	lr
  TIMx->CR1 = tmpcr1;
 8001442:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001444:	888b      	ldrh	r3, [r1, #4]
 8001446:	8583      	strh	r3, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001448:	880b      	ldrh	r3, [r1, #0]
 800144a:	8503      	strh	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 800144c:	2301      	movs	r3, #1
 800144e:	8283      	strh	r3, [r0, #20]
}
 8001450:	4770      	bx	lr
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <TIM_TimeBaseInit+0xa8>)
 8001454:	4298      	cmp	r0, r3
 8001456:	d0ef      	beq.n	8001438 <TIM_TimeBaseInit+0x64>
 8001458:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800145c:	4298      	cmp	r0, r3
 800145e:	d0eb      	beq.n	8001438 <TIM_TimeBaseInit+0x64>
 8001460:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001464:	4298      	cmp	r0, r3
 8001466:	d0e7      	beq.n	8001438 <TIM_TimeBaseInit+0x64>
 8001468:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800146c:	4298      	cmp	r0, r3
 800146e:	d0e3      	beq.n	8001438 <TIM_TimeBaseInit+0x64>
 8001470:	e7ec      	b.n	800144c <TIM_TimeBaseInit+0x78>
 8001472:	bf00      	nop
 8001474:	40012c00 	.word	0x40012c00
 8001478:	40001000 	.word	0x40001000
 800147c:	40013400 	.word	0x40013400

08001480 <TIM_OC1Init>:
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001480:	8c03      	ldrh	r3, [r0, #32]
{
 8001482:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001484:	f023 0301 	bic.w	r3, r3, #1
 8001488:	041b      	lsls	r3, r3, #16
 800148a:	0c1b      	lsrs	r3, r3, #16
 800148c:	8403      	strh	r3, [r0, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800148e:	8c03      	ldrh	r3, [r0, #32]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001490:	f8b1 e008 	ldrh.w	lr, [r1, #8]
  tmpcr2 =  TIMx->CR2;
 8001494:	f8b0 c004 	ldrh.w	ip, [r0, #4]
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001498:	884d      	ldrh	r5, [r1, #2]
  tmpccmrx = TIMx->CCMR1;
 800149a:	8b02      	ldrh	r2, [r0, #24]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800149c:	f023 0302 	bic.w	r3, r3, #2
 80014a0:	041b      	lsls	r3, r3, #16
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80014a2:	ea4e 0e05 	orr.w	lr, lr, r5
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 80014a6:	4c1c      	ldr	r4, [pc, #112]	; (8001518 <TIM_OC1Init+0x98>)
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 80014a8:	0c1b      	lsrs	r3, r3, #16
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 80014aa:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80014ae:	ea43 030e 	orr.w	r3, r3, lr
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 80014b2:	0412      	lsls	r2, r2, #16
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80014b4:	f8b1 e000 	ldrh.w	lr, [r1]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 80014b8:	0c12      	lsrs	r2, r2, #16
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 80014ba:	42a0      	cmp	r0, r4
  tmpcr2 =  TIMx->CR2;
 80014bc:	fa1f fc8c 	uxth.w	ip, ip
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80014c0:	b29b      	uxth	r3, r3
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80014c2:	ea42 020e 	orr.w	r2, r2, lr
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 80014c6:	d00f      	beq.n	80014e8 <TIM_OC1Init+0x68>
 80014c8:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80014cc:	42a0      	cmp	r0, r4
 80014ce:	d00b      	beq.n	80014e8 <TIM_OC1Init+0x68>
 80014d0:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 80014d4:	42a0      	cmp	r0, r4
 80014d6:	d007      	beq.n	80014e8 <TIM_OC1Init+0x68>
 80014d8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014dc:	42a0      	cmp	r0, r4
 80014de:	d003      	beq.n	80014e8 <TIM_OC1Init+0x68>
     (TIMx == TIM16)|| (TIMx == TIM17))
 80014e0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014e4:	42a0      	cmp	r0, r4
 80014e6:	d110      	bne.n	800150a <TIM_OC1Init+0x8a>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80014e8:	894c      	ldrh	r4, [r1, #10]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 80014ea:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80014ee:	4323      	orrs	r3, r4
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80014f0:	89cd      	ldrh	r5, [r1, #14]
 80014f2:	898c      	ldrh	r4, [r1, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 80014f4:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80014f8:	432c      	orrs	r4, r5
 80014fa:	ea4c 0c04 	orr.w	ip, ip, r4
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80014fe:	888c      	ldrh	r4, [r1, #4]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8001500:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001504:	fa1f fc8c 	uxth.w	ip, ip
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001508:	4323      	orrs	r3, r4
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 800150a:	88c9      	ldrh	r1, [r1, #6]
  TIMx->CR2 = tmpcr2;
 800150c:	f8a0 c004 	strh.w	ip, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001510:	8302      	strh	r2, [r0, #24]
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8001512:	8681      	strh	r1, [r0, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001514:	8403      	strh	r3, [r0, #32]
}
 8001516:	bd30      	pop	{r4, r5, pc}
 8001518:	40012c00 	.word	0x40012c00

0800151c <TIM_TimeBaseStructInit>:
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800151c:	2300      	movs	r3, #0
 800151e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001522:	6003      	str	r3, [r0, #0]
 8001524:	6042      	str	r2, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001526:	7203      	strb	r3, [r0, #8]
}
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop

0800152c <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800152c:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 800152e:	b121      	cbz	r1, 800153a <TIM_Cmd+0xe>
    TIMx->CR1 |= TIM_CR1_CEN;
 8001530:	b29b      	uxth	r3, r3
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	8003      	strh	r3, [r0, #0]
 8001538:	4770      	bx	lr
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 800153a:	f023 0301 	bic.w	r3, r3, #1
 800153e:	041b      	lsls	r3, r3, #16
 8001540:	0c1b      	lsrs	r3, r3, #16
 8001542:	8003      	strh	r3, [r0, #0]
  }
}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop

08001548 <TIM_CtrlPWMOutputs>:
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001548:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
  if (NewState != DISABLE)
 800154c:	b139      	cbz	r1, 800155e <TIM_CtrlPWMOutputs+0x16>
    TIMx->BDTR |= TIM_BDTR_MOE;
 800154e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001556:	b29b      	uxth	r3, r3
 8001558:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 800155c:	4770      	bx	lr
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 800155e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001562:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }  
}
 8001566:	4770      	bx	lr

08001568 <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001568:	8983      	ldrh	r3, [r0, #12]
 800156a:	b29b      	uxth	r3, r3
  if (NewState != DISABLE)
 800156c:	b112      	cbz	r2, 8001574 <TIM_ITConfig+0xc>
    TIMx->DIER |= TIM_IT;
 800156e:	4319      	orrs	r1, r3
 8001570:	8181      	strh	r1, [r0, #12]
 8001572:	4770      	bx	lr
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001574:	ea23 0101 	bic.w	r1, r3, r1
 8001578:	8181      	strh	r1, [r0, #12]
  }
}
 800157a:	4770      	bx	lr

0800157c <TIM_OC1PreloadConfig>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 800157c:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 800157e:	f023 0308 	bic.w	r3, r3, #8
 8001582:	041b      	lsls	r3, r3, #16
 8001584:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001586:	430b      	orrs	r3, r1
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001588:	8303      	strh	r3, [r0, #24]
}
 800158a:	4770      	bx	lr

0800158c <TIM_ClearITPendingBit>:
 800158c:	43c9      	mvns	r1, r1
 800158e:	b289      	uxth	r1, r1
 8001590:	8201      	strh	r1, [r0, #16]
 8001592:	4770      	bx	lr

08001594 <coolant_init>:

#include "grbl.h"


void coolant_init()
{
 8001594:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);

	RCC_APB2PeriphClockCmd(RCC_COOLANT_MIST_PORT, ENABLE);
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_MIST_BIT;
 8001596:	2508      	movs	r5, #8
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001598:	f241 0703 	movw	r7, #4099	; 0x1003
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_FLOOD_BIT;
 800159c:	2610      	movs	r6, #16
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 800159e:	4c12      	ldr	r4, [pc, #72]	; (80015e8 <coolant_init+0x54>)
{
 80015a0:	b083      	sub	sp, #12
	RCC_APB2PeriphClockCmd(RCC_COOLANT_FLOOD_PORT, ENABLE);
 80015a2:	2101      	movs	r1, #1
 80015a4:	2008      	movs	r0, #8
 80015a6:	f7ff fefd 	bl	80013a4 <RCC_APB2PeriphClockCmd>
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 80015aa:	4620      	mov	r0, r4
 80015ac:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80015ae:	f8ad 7006 	strh.w	r7, [sp, #6]
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_FLOOD_BIT;
 80015b2:	f8ad 6004 	strh.w	r6, [sp, #4]
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 80015b6:	f7ff fcfb 	bl	8000fb0 <GPIO_Init>
	RCC_APB2PeriphClockCmd(RCC_COOLANT_MIST_PORT, ENABLE);
 80015ba:	4628      	mov	r0, r5
 80015bc:	2101      	movs	r1, #1
 80015be:	f7ff fef1 	bl	80013a4 <RCC_APB2PeriphClockCmd>
	GPIO_Init(COOLANT_MIST_PORT, &GPIO_InitStructure);
 80015c2:	4620      	mov	r0, r4
 80015c4:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80015c6:	f8ad 7006 	strh.w	r7, [sp, #6]
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_MIST_BIT;
 80015ca:	f8ad 5004 	strh.w	r5, [sp, #4]
	GPIO_Init(COOLANT_MIST_PORT, &GPIO_InitStructure);
 80015ce:	f7ff fcef 	bl	8000fb0 <GPIO_Init>
#endif
  #else
#ifdef AVRTARGET
	COOLANT_FLOOD_PORT &= ~(1 << COOLANT_FLOOD_BIT);
#else
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 80015d2:	4631      	mov	r1, r6
 80015d4:	4620      	mov	r0, r4
 80015d6:	f7ff fe89 	bl	80012ec <GPIO_ResetBits>
#endif
    #else
#ifdef AVRTARGET
	COOLANT_MIST_PORT &= ~(1 << COOLANT_MIST_BIT);
#else
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 80015da:	4629      	mov	r1, r5
 80015dc:	4620      	mov	r0, r4
 80015de:	f7ff fe85 	bl	80012ec <GPIO_ResetBits>
}
 80015e2:	b003      	add	sp, #12
 80015e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40010c00 	.word	0x40010c00

080015ec <coolant_get_state>:
{
 80015ec:	b510      	push	{r4, lr}
    if (bit_istrue(
 80015ee:	4807      	ldr	r0, [pc, #28]	; (800160c <coolant_get_state+0x20>)
 80015f0:	f7ff fe76 	bl	80012e0 <GPIO_ReadOutputData>
 80015f4:	4604      	mov	r4, r0
      if (bit_istrue(
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <coolant_get_state+0x20>)
 80015f8:	f7ff fe72 	bl	80012e0 <GPIO_ReadOutputData>
  uint8_t cl_state = COOLANT_STATE_DISABLE;
 80015fc:	f3c4 1400 	ubfx	r4, r4, #4, #1
      if (bit_istrue(
 8001600:	0703      	lsls	r3, r0, #28
      cl_state |= COOLANT_STATE_MIST;
 8001602:	bf48      	it	mi
 8001604:	f044 0402 	orrmi.w	r4, r4, #2
}
 8001608:	4620      	mov	r0, r4
 800160a:	bd10      	pop	{r4, pc}
 800160c:	40010c00 	.word	0x40010c00

08001610 <coolant_stop>:
{
 8001610:	b510      	push	{r4, lr}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001612:	4c05      	ldr	r4, [pc, #20]	; (8001628 <coolant_stop+0x18>)
 8001614:	2110      	movs	r1, #16
 8001616:	4620      	mov	r0, r4
 8001618:	f7ff fe68 	bl	80012ec <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 800161c:	4620      	mov	r0, r4
#endif
    #endif
  #endif
#endif
}
 800161e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001622:	2108      	movs	r1, #8
 8001624:	f7ff be62 	b.w	80012ec <GPIO_ResetBits>
 8001628:	40010c00 	.word	0x40010c00

0800162c <coolant_set_state>:
// Main program only. Immediately sets flood coolant running state and also mist coolant, 
// if enabled. Also sets a flag to report an update to a coolant state.
// Called by coolant toggle override, parking restore, parking retract, sleep mode, g-code
// parser program end, and g-code parser coolant_sync().
void coolant_set_state(uint8_t mode)
{
 800162c:	b538      	push	{r3, r4, r5, lr}
  if (sys.abort) { return; } // Block during abort.  
 800162e:	4d10      	ldr	r5, [pc, #64]	; (8001670 <coolant_set_state+0x44>)
 8001630:	786b      	ldrb	r3, [r5, #1]
 8001632:	b93b      	cbnz	r3, 8001644 <coolant_set_state+0x18>
  
  if (mode == COOLANT_DISABLE) {
 8001634:	4604      	mov	r4, r0
 8001636:	b130      	cbz	r0, 8001646 <coolant_set_state+0x1a>
    coolant_stop(); 
  
  } else {
  
#if defined(AVRTARGET) || defined(STM32F103C8)
	  if (mode & COOLANT_FLOOD_ENABLE) {
 8001638:	0642      	lsls	r2, r0, #25
 800163a:	d40d      	bmi.n	8001658 <coolant_set_state+0x2c>
#endif
      #endif
    }
  
    #ifdef ENABLE_M7
      if (mode & COOLANT_MIST_ENABLE) {
 800163c:	0623      	lsls	r3, r4, #24
 800163e:	d411      	bmi.n	8001664 <coolant_set_state+0x38>
        #endif
      }
    #endif
#endif  
  }
  sys.report_ovr_counter = 0; // Set to report change immediately
 8001640:	2300      	movs	r3, #0
 8001642:	732b      	strb	r3, [r5, #12]
}
 8001644:	bd38      	pop	{r3, r4, r5, pc}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001646:	2110      	movs	r1, #16
 8001648:	480a      	ldr	r0, [pc, #40]	; (8001674 <coolant_set_state+0x48>)
 800164a:	f7ff fe4f 	bl	80012ec <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 800164e:	2108      	movs	r1, #8
 8001650:	4808      	ldr	r0, [pc, #32]	; (8001674 <coolant_set_state+0x48>)
 8001652:	f7ff fe4b 	bl	80012ec <GPIO_ResetBits>
}
 8001656:	e7f3      	b.n	8001640 <coolant_set_state+0x14>
		GPIO_SetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001658:	2110      	movs	r1, #16
 800165a:	4806      	ldr	r0, [pc, #24]	; (8001674 <coolant_set_state+0x48>)
 800165c:	f7ff fe44 	bl	80012e8 <GPIO_SetBits>
      if (mode & COOLANT_MIST_ENABLE) {
 8001660:	0623      	lsls	r3, r4, #24
 8001662:	d5ed      	bpl.n	8001640 <coolant_set_state+0x14>
		  GPIO_SetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001664:	2108      	movs	r1, #8
 8001666:	4803      	ldr	r0, [pc, #12]	; (8001674 <coolant_set_state+0x48>)
 8001668:	f7ff fe3e 	bl	80012e8 <GPIO_SetBits>
 800166c:	e7e8      	b.n	8001640 <coolant_set_state+0x14>
 800166e:	bf00      	nop
 8001670:	200009d0 	.word	0x200009d0
 8001674:	40010c00 	.word	0x40010c00

08001678 <coolant_sync>:


// G-code parser entry-point for setting coolant state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
void coolant_sync(uint8_t mode)
{
 8001678:	b538      	push	{r3, r4, r5, lr}
  if (sys.state == STATE_CHECK_MODE) { return; }
 800167a:	4d12      	ldr	r5, [pc, #72]	; (80016c4 <coolant_sync+0x4c>)
 800167c:	782b      	ldrb	r3, [r5, #0]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d00b      	beq.n	800169a <coolant_sync+0x22>
  protocol_buffer_synchronize(); // Ensure coolant turns on when specified in program.
 8001682:	4604      	mov	r4, r0
 8001684:	f003 fff6 	bl	8005674 <protocol_buffer_synchronize>
  if (sys.abort) { return; } // Block during abort.  
 8001688:	786b      	ldrb	r3, [r5, #1]
 800168a:	b933      	cbnz	r3, 800169a <coolant_sync+0x22>
  if (mode == COOLANT_DISABLE) {
 800168c:	b15c      	cbz	r4, 80016a6 <coolant_sync+0x2e>
	  if (mode & COOLANT_FLOOD_ENABLE) {
 800168e:	0662      	lsls	r2, r4, #25
 8001690:	d404      	bmi.n	800169c <coolant_sync+0x24>
      if (mode & COOLANT_MIST_ENABLE) {
 8001692:	0623      	lsls	r3, r4, #24
 8001694:	d410      	bmi.n	80016b8 <coolant_sync+0x40>
  sys.report_ovr_counter = 0; // Set to report change immediately
 8001696:	2300      	movs	r3, #0
 8001698:	732b      	strb	r3, [r5, #12]
  coolant_set_state(mode);
}
 800169a:	bd38      	pop	{r3, r4, r5, pc}
		GPIO_SetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 800169c:	2110      	movs	r1, #16
 800169e:	480a      	ldr	r0, [pc, #40]	; (80016c8 <coolant_sync+0x50>)
 80016a0:	f7ff fe22 	bl	80012e8 <GPIO_SetBits>
 80016a4:	e7f5      	b.n	8001692 <coolant_sync+0x1a>
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 80016a6:	2110      	movs	r1, #16
 80016a8:	4807      	ldr	r0, [pc, #28]	; (80016c8 <coolant_sync+0x50>)
 80016aa:	f7ff fe1f 	bl	80012ec <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 80016ae:	2108      	movs	r1, #8
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <coolant_sync+0x50>)
 80016b2:	f7ff fe1b 	bl	80012ec <GPIO_ResetBits>
}
 80016b6:	e7ee      	b.n	8001696 <coolant_sync+0x1e>
		  GPIO_SetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 80016b8:	2108      	movs	r1, #8
 80016ba:	4803      	ldr	r0, [pc, #12]	; (80016c8 <coolant_sync+0x50>)
 80016bc:	f7ff fe14 	bl	80012e8 <GPIO_SetBits>
 80016c0:	e7e9      	b.n	8001696 <coolant_sync+0x1e>
 80016c2:	bf00      	nop
 80016c4:	200009d0 	.word	0x200009d0
 80016c8:	40010c00 	.word	0x40010c00

080016cc <eeprom_init>:
		nSize -= 4;
		nAddress += 4;
	}
}
void eeprom_init()
{
 80016cc:	b410      	push	{r4}
	uint16_t VarIdx = 0;
	uint8_t *pTmp = EE_Buffer;
 80016ce:	4c0d      	ldr	r4, [pc, #52]	; (8001704 <eeprom_init+0x38>)
 80016d0:	4623      	mov	r3, r4
 80016d2:	f1c4 6100 	rsb	r1, r4, #134217728	; 0x8000000
 80016d6:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 80016da:	f501 31fe 	add.w	r1, r1, #130048	; 0x1fc00

	for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
	{
		*pTmp++ = (*(__IO uint8_t*)(EEPROM_START_ADDRESS + VarIdx));
 80016de:	185a      	adds	r2, r3, r1
 80016e0:	7812      	ldrb	r2, [r2, #0]
 80016e2:	f803 2b01 	strb.w	r2, [r3], #1
	for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 80016e6:	4283      	cmp	r3, r0
 80016e8:	d1f9      	bne.n	80016de <eeprom_init+0x12>
	}

	if (EE_Buffer[0] != SETTINGS_VERSION)
 80016ea:	7823      	ldrb	r3, [r4, #0]
 80016ec:	2b0a      	cmp	r3, #10
 80016ee:	d006      	beq.n	80016fe <eeprom_init+0x32>
	{
		pTmp = EE_Buffer;

		for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
		{
			*pTmp++ = 0xFF;
 80016f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016f4:	21ff      	movs	r1, #255	; 0xff
 80016f6:	4803      	ldr	r0, [pc, #12]	; (8001704 <eeprom_init+0x38>)
		}
	}
}
 80016f8:	bc10      	pop	{r4}
			*pTmp++ = 0xFF;
 80016fa:	f008 ba0f 	b.w	8009b1c <memset>
}
 80016fe:	bc10      	pop	{r4}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000538 	.word	0x20000538

08001708 <eeprom_get_char>:
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
	return EEDR; // Return the byte read from EEPROM.
#endif
#if defined(WIN32) || defined(STM32F103C8)
	return EE_Buffer[addr];
 8001708:	4b01      	ldr	r3, [pc, #4]	; (8001710 <eeprom_get_char+0x8>)
#endif
}
 800170a:	5c18      	ldrb	r0, [r3, r0]
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000538 	.word	0x20000538

08001714 <eeprom_put_char>:
	}
	
	sei(); // Restore interrupt flag state.
#endif
#if defined(WIN32) || defined(STM32F103C8)
	EE_Buffer[addr] = new_value;
 8001714:	4b01      	ldr	r3, [pc, #4]	; (800171c <eeprom_put_char+0x8>)
 8001716:	5419      	strb	r1, [r3, r0]
#endif
}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000538 	.word	0x20000538

08001720 <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
 8001720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001724:	4607      	mov	r7, r0
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
 8001726:	2a00      	cmp	r2, #0
 8001728:	d03c      	beq.n	80017a4 <memcpy_to_eeprom_with_checksum+0x84>
  unsigned char checksum = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80017ac <memcpy_to_eeprom_with_checksum+0x8c>
 8001730:	1e44      	subs	r4, r0, #1
 8001732:	4444      	add	r4, r8
 8001734:	188e      	adds	r6, r1, r2
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
 8001736:	f811 5b01 	ldrb.w	r5, [r1], #1
    checksum = (checksum << 1) || (checksum >> 7);
 800173a:	bb63      	cbnz	r3, 8001796 <memcpy_to_eeprom_with_checksum+0x76>
    checksum += *source;
 800173c:	eb05 13d3 	add.w	r3, r5, r3, lsr #7
  for(; size > 0; size--) { 
 8001740:	42b1      	cmp	r1, r6
	EE_Buffer[addr] = new_value;
 8001742:	f804 5f01 	strb.w	r5, [r4, #1]!
    checksum += *source;
 8001746:	b2db      	uxtb	r3, r3
  for(; size > 0; size--) { 
 8001748:	d1f5      	bne.n	8001736 <memcpy_to_eeprom_with_checksum+0x16>
    eeprom_put_char(destination++, *(source++)); 
 800174a:	4417      	add	r7, r2
	FlashStatus = FLASH_ErasePage(EEPROM_START_ADDRESS);
 800174c:	4818      	ldr	r0, [pc, #96]	; (80017b0 <memcpy_to_eeprom_with_checksum+0x90>)
	EE_Buffer[addr] = new_value;
 800174e:	f808 3007 	strb.w	r3, [r8, r7]
	FlashStatus = FLASH_ErasePage(EEPROM_START_ADDRESS);
 8001752:	f7ff fb61 	bl	8000e18 <FLASH_ErasePage>
	if (FlashStatus != FLASH_COMPLETE)
 8001756:	2804      	cmp	r0, #4
 8001758:	d11b      	bne.n	8001792 <memcpy_to_eeprom_with_checksum+0x72>
		if (*pBuffer != 0xffff)
 800175a:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800175e:	4c15      	ldr	r4, [pc, #84]	; (80017b4 <memcpy_to_eeprom_with_checksum+0x94>)
 8001760:	4e15      	ldr	r6, [pc, #84]	; (80017b8 <memcpy_to_eeprom_with_checksum+0x98>)
 8001762:	1ea5      	subs	r5, r4, #2
 8001764:	eba6 0608 	sub.w	r6, r6, r8
 8001768:	f504 6880 	add.w	r8, r4, #1024	; 0x400
 800176c:	f834 1c04 	ldrh.w	r1, [r4, #-4]
 8001770:	1970      	adds	r0, r6, r5
 8001772:	42b9      	cmp	r1, r7
 8001774:	d001      	beq.n	800177a <memcpy_to_eeprom_with_checksum+0x5a>
			FLASH_ProgramHalfWord(nAddress, *pBuffer++);
 8001776:	f7ff fbb7 	bl	8000ee8 <FLASH_ProgramHalfWord>
		if (*pBuffer != 0xffff)
 800177a:	8829      	ldrh	r1, [r5, #0]
			FLASH_ProgramHalfWord(nAddress + 2, *pBuffer++);
 800177c:	1930      	adds	r0, r6, r4
		if (*pBuffer != 0xffff)
 800177e:	42b9      	cmp	r1, r7
	while (nSize > 0)
 8001780:	f105 0504 	add.w	r5, r5, #4
 8001784:	f104 0404 	add.w	r4, r4, #4
		if (*pBuffer != 0xffff)
 8001788:	d001      	beq.n	800178e <memcpy_to_eeprom_with_checksum+0x6e>
			FLASH_ProgramHalfWord(nAddress + 2, *pBuffer++);
 800178a:	f7ff fbad 	bl	8000ee8 <FLASH_ProgramHalfWord>
	while (nSize > 0)
 800178e:	45a0      	cmp	r8, r4
 8001790:	d1ec      	bne.n	800176c <memcpy_to_eeprom_with_checksum+0x4c>
#if defined(WIN32) || defined(STM32F103C8)
#ifndef NOEEPROMSUPPORT
  eeprom_flush();
#endif
#endif
}
 8001792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    checksum += *source;
 8001796:	1c6b      	adds	r3, r5, #1
  for(; size > 0; size--) { 
 8001798:	42b1      	cmp	r1, r6
	EE_Buffer[addr] = new_value;
 800179a:	f804 5f01 	strb.w	r5, [r4, #1]!
    checksum += *source;
 800179e:	b2db      	uxtb	r3, r3
  for(; size > 0; size--) { 
 80017a0:	d1c9      	bne.n	8001736 <memcpy_to_eeprom_with_checksum+0x16>
 80017a2:	e7d2      	b.n	800174a <memcpy_to_eeprom_with_checksum+0x2a>
  unsigned char checksum = 0;
 80017a4:	4613      	mov	r3, r2
 80017a6:	f8df 8004 	ldr.w	r8, [pc, #4]	; 80017ac <memcpy_to_eeprom_with_checksum+0x8c>
 80017aa:	e7cf      	b.n	800174c <memcpy_to_eeprom_with_checksum+0x2c>
 80017ac:	20000538 	.word	0x20000538
 80017b0:	0801fc00 	.word	0x0801fc00
 80017b4:	2000053c 	.word	0x2000053c
 80017b8:	0801fbfe 	.word	0x0801fbfe

080017bc <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
 80017bc:	b530      	push	{r4, r5, lr}
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
 80017be:	b1f2      	cbz	r2, 80017fe <memcpy_from_eeprom_with_checksum+0x42>
  unsigned char data, checksum = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	4d10      	ldr	r5, [pc, #64]	; (8001804 <memcpy_from_eeprom_with_checksum+0x48>)
 80017c4:	f101 3eff 	add.w	lr, r1, #4294967295
 80017c8:	44ae      	add	lr, r5
 80017ca:	1884      	adds	r4, r0, r2
	return EE_Buffer[addr];
 80017cc:	f81e cf01 	ldrb.w	ip, [lr, #1]!
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
 80017d0:	b96b      	cbnz	r3, 80017ee <memcpy_from_eeprom_with_checksum+0x32>
    checksum += data;    
    *(destination++) = data; 
 80017d2:	f800 cb01 	strb.w	ip, [r0], #1
    checksum += data;    
 80017d6:	eb0c 13d3 	add.w	r3, ip, r3, lsr #7
  for(; size > 0; size--) { 
 80017da:	42a0      	cmp	r0, r4
    checksum += data;    
 80017dc:	b2db      	uxtb	r3, r3
  for(; size > 0; size--) { 
 80017de:	d1f5      	bne.n	80017cc <memcpy_from_eeprom_with_checksum+0x10>
    data = eeprom_get_char(source++);
 80017e0:	4411      	add	r1, r2
  }
  return(checksum == eeprom_get_char(source));
 80017e2:	5c68      	ldrb	r0, [r5, r1]
}
 80017e4:	1ac0      	subs	r0, r0, r3
 80017e6:	fab0 f080 	clz	r0, r0
 80017ea:	0940      	lsrs	r0, r0, #5
 80017ec:	bd30      	pop	{r4, r5, pc}
    *(destination++) = data; 
 80017ee:	f800 cb01 	strb.w	ip, [r0], #1
    checksum += data;    
 80017f2:	f10c 0301 	add.w	r3, ip, #1
  for(; size > 0; size--) { 
 80017f6:	4284      	cmp	r4, r0
    checksum += data;    
 80017f8:	b2db      	uxtb	r3, r3
  for(; size > 0; size--) { 
 80017fa:	d1e7      	bne.n	80017cc <memcpy_from_eeprom_with_checksum+0x10>
 80017fc:	e7f0      	b.n	80017e0 <memcpy_from_eeprom_with_checksum+0x24>
  unsigned char data, checksum = 0;
 80017fe:	4613      	mov	r3, r2
 8001800:	4d00      	ldr	r5, [pc, #0]	; (8001804 <memcpy_from_eeprom_with_checksum+0x48>)
 8001802:	e7ee      	b.n	80017e2 <memcpy_from_eeprom_with_checksum+0x26>
 8001804:	20000538 	.word	0x20000538

08001808 <gc_init>:
#define FAIL(status) return(status);


void gc_init()
{
  memset(&gc_state, 0, sizeof(parser_state_t));
 8001808:	2100      	movs	r1, #0
{
 800180a:	b508      	push	{r3, lr}
  memset(&gc_state, 0, sizeof(parser_state_t));
 800180c:	2250      	movs	r2, #80	; 0x50
 800180e:	4807      	ldr	r0, [pc, #28]	; (800182c <gc_init+0x24>)
 8001810:	f008 f984 	bl	8009b1c <memset>

  // Load default G54 coordinate system.
  if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) {
 8001814:	2000      	movs	r0, #0
 8001816:	4906      	ldr	r1, [pc, #24]	; (8001830 <gc_init+0x28>)
 8001818:	f004 fff4 	bl	8006804 <settings_read_coord_data>
 800181c:	b100      	cbz	r0, 8001820 <gc_init+0x18>
    report_status_message(STATUS_SETTING_READ_FAIL);
  }
}
 800181e:	bd08      	pop	{r3, pc}
    report_status_message(STATUS_SETTING_READ_FAIL);
 8001820:	2007      	movs	r0, #7
}
 8001822:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    report_status_message(STATUS_SETTING_READ_FAIL);
 8001826:	f003 bf41 	b.w	80056ac <report_status_message>
 800182a:	bf00      	nop
 800182c:	20000980 	.word	0x20000980
 8001830:	200009ac 	.word	0x200009ac

08001834 <gc_sync_position>:

// Sets g-code parser position in mm. Input in steps. Called by the system abort and hard
// limit pull-off routines.
void gc_sync_position()
{
  system_convert_array_steps_to_mpos(gc_state.position,sys_position);
 8001834:	4901      	ldr	r1, [pc, #4]	; (800183c <gc_sync_position+0x8>)
 8001836:	4802      	ldr	r0, [pc, #8]	; (8001840 <gc_sync_position+0xc>)
 8001838:	f006 be42 	b.w	80084c0 <system_convert_array_steps_to_mpos>
 800183c:	200009e4 	.word	0x200009e4
 8001840:	2000099c 	.word	0x2000099c

08001844 <gc_execute_line>:
// characters and signed floating point values (no whitespace). Comments and block delete
// characters have been removed. In this function, all units and positions are converted and
// exported to grbl's internal functions in terms of (mm, mm/min) and absolute machine
// coordinates, respectively.
uint8_t gc_execute_line(char *line)
{
 8001844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001848:	4606      	mov	r6, r0
     updates these modes and commands as the block line is parser and will only be used and
     executed after successful error-checking. The parser block struct also contains a block
     values struct, word tracking variables, and a non-modal commands tracker for the new
     block. This struct contains all of the necessary information to execute the block. */

  memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 800184a:	f8df 8338 	ldr.w	r8, [pc, #824]	; 8001b84 <gc_execute_line+0x340>
 800184e:	2100      	movs	r1, #0
 8001850:	2248      	movs	r2, #72	; 0x48
 8001852:	4640      	mov	r0, r8
{
 8001854:	b09d      	sub	sp, #116	; 0x74
  memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 8001856:	f008 f961 	bl	8009b1c <memset>
  memcpy(&gc_block.modal,&gc_state.modal,sizeof(gc_modal_t)); // Copy current modes
 800185a:	4bcb      	ldr	r3, [pc, #812]	; (8001b88 <gc_execute_line+0x344>)
 800185c:	cb03      	ldmia	r3!, {r0, r1}
 800185e:	881a      	ldrh	r2, [r3, #0]
 8001860:	789b      	ldrb	r3, [r3, #2]
 8001862:	f8c8 0001 	str.w	r0, [r8, #1]
 8001866:	f8c8 1005 	str.w	r1, [r8, #5]
 800186a:	f8a8 2009 	strh.w	r2, [r8, #9]
 800186e:	f888 300b 	strb.w	r3, [r8, #11]
  uint16_t command_words = 0; // Tracks G and M command words. Also used for modal group violations.
  uint16_t value_words = 0; // Tracks value words.
  uint8_t gc_parser_flags = GC_PARSER_NONE;

  // Determine if the line is a jogging motion or a normal g-code block.
  if (line[0] == '$') { // NOTE: `$J=` already parsed when passed to this function.
 8001872:	f896 a000 	ldrb.w	sl, [r6]
 8001876:	f1ba 0f24 	cmp.w	sl, #36	; 0x24
 800187a:	f000 8177 	beq.w	8001b6c <gc_execute_line+0x328>
 800187e:	2200      	movs	r2, #0
 8001880:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
  uint8_t int_value = 0;
  uint16_t mantissa = 0;
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
  else { char_counter = 0; }

  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001884:	f1ba 0f00 	cmp.w	sl, #0
 8001888:	f000 8530 	beq.w	80022ec <gc_execute_line+0xaa8>
  uint8_t gc_parser_flags = GC_PARSER_NONE;
 800188c:	920b      	str	r2, [sp, #44]	; 0x2c
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
 800188e:	2500      	movs	r5, #0
 8001890:	46ab      	mov	fp, r5
 8001892:	e9cd 5508 	strd	r5, r5, [sp, #32]
    // accurate enough for value words that require integers to within 0.0001. This should be
    // a good enough comprimise and catch most all non-integer errors. To make it compliant,
    // we would simply need to change the mantissa to int16, but this add compiled flash space.
    // Maybe update this later.
    int_value = truncf(value);
	mantissa = (uint16_t)lroundf(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 8001896:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 8001b8c <gc_execute_line+0x348>
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
 800189a:	950a      	str	r5, [sp, #40]	; 0x28
 800189c:	9507      	str	r5, [sp, #28]
    if((letter < 'A') || (letter > 'Z')) { FAIL(STATUS_EXPECTED_COMMAND_LETTER); } // [Expected word letter]
 800189e:	f1aa 0741 	sub.w	r7, sl, #65	; 0x41
 80018a2:	b2fb      	uxtb	r3, r7
 80018a4:	2b19      	cmp	r3, #25
 80018a6:	f200 83b3 	bhi.w	8002010 <gc_execute_line+0x7cc>
    char_counter++;
 80018aa:	3201      	adds	r2, #1
 80018ac:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 80018b0:	4630      	mov	r0, r6
 80018b2:	aa14      	add	r2, sp, #80	; 0x50
 80018b4:	f10d 014f 	add.w	r1, sp, #79	; 0x4f
 80018b8:	f002 f8ea 	bl	8003a90 <read_float>
 80018bc:	2800      	cmp	r0, #0
 80018be:	f000 83a9 	beq.w	8002014 <gc_execute_line+0x7d0>
    int_value = truncf(value);
 80018c2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80018c4:	4628      	mov	r0, r5
 80018c6:	f7ff f9e7 	bl	8000c98 <__aeabi_f2uiz>
 80018ca:	b2c4      	uxtb	r4, r0
	mantissa = (uint16_t)lroundf(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 80018cc:	4620      	mov	r0, r4
 80018ce:	f7fe ff8d 	bl	80007ec <__aeabi_i2f>
 80018d2:	4601      	mov	r1, r0
 80018d4:	4628      	mov	r0, r5
 80018d6:	f7fe fed3 	bl	8000680 <__aeabi_fsub>
 80018da:	4649      	mov	r1, r9
 80018dc:	f7fe ffda 	bl	8000894 <__aeabi_fmul>
 80018e0:	f008 fa46 	bl	8009d70 <lroundf>
    // NOTE: Rounding must be used to catch small floating point errors.

    // Check if the g-code word is supported or errors due to modal group violations or has
    // been repeated in the g-code block. If ok, update the command or record its value.
    switch(letter) {
 80018e4:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
	mantissa = (uint16_t)lroundf(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 80018e8:	b282      	uxth	r2, r0
    switch(letter) {
 80018ea:	d07b      	beq.n	80019e4 <gc_execute_line+0x1a0>
 80018ec:	f1ba 0f4d 	cmp.w	sl, #77	; 0x4d
 80018f0:	d031      	beq.n	8001956 <gc_execute_line+0x112>
      default:

        /* Non-Command Words: This initial parsing phase only checks for repeats of the remaining
           legal g-code words and stores their value. Error-checking is performed later since some
           words (I,J,K,L,P,R) have multiple connotations and/or depend on the issued commands. */
        switch(letter){
 80018f2:	2f19      	cmp	r7, #25
 80018f4:	d82a      	bhi.n	800194c <gc_execute_line+0x108>
 80018f6:	e8df f017 	tbh	[pc, r7, lsl #1]
 80018fa:	0213      	.short	0x0213
 80018fc:	00290029 	.word	0x00290029
 8001900:	00290029 	.word	0x00290029
 8001904:	0029021e 	.word	0x0029021e
 8001908:	02220029 	.word	0x02220029
 800190c:	0234022b 	.word	0x0234022b
 8001910:	0029023d 	.word	0x0029023d
 8001914:	00290242 	.word	0x00290242
 8001918:	002901eb 	.word	0x002901eb
 800191c:	020401ff 	.word	0x020401ff
 8001920:	00290208 	.word	0x00290208
 8001924:	00290029 	.word	0x00290029
 8001928:	01e001d5 	.word	0x01e001d5
 800192c:	01c0      	.short	0x01c0
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 800192e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001930:	2b00      	cmp	r3, #0
 8001932:	f040 872b 	bne.w	800278c <gc_execute_line+0xf48>
            if (int_value == 38){
 8001936:	2c26      	cmp	r4, #38	; 0x26
            gc_block.modal.motion = int_value;
 8001938:	f888 4001 	strb.w	r4, [r8, #1]
            if (int_value == 38){
 800193c:	f040 83c9 	bne.w	80020d2 <gc_execute_line+0x88e>
              if (!((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))) {
 8001940:	f1a2 0314 	sub.w	r3, r2, #20
 8001944:	b29b      	uxth	r3, r3
 8001946:	2b1e      	cmp	r3, #30
 8001948:	f240 838c 	bls.w	8002064 <gc_execute_line+0x820>
      coord_select = truncf(gc_block.values.p); // Convert p value to int.
      if (coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
      if (gc_block.values.l != 20) {
        if (gc_block.values.l == 2) {
          if (bit_istrue(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G10 L2 R not supported]
        } else { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [Unsupported L]
 800194c:	2414      	movs	r4, #20
  }

  // TODO: % to denote start of program.

  return(STATUS_OK);
}
 800194e:	4620      	mov	r0, r4
 8001950:	b01d      	add	sp, #116	; 0x74
 8001952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [No Mxx.x commands]
 8001956:	2a00      	cmp	r2, #0
 8001958:	f040 837a 	bne.w	8002050 <gc_execute_line+0x80c>
        switch(int_value) {
 800195c:	2c1e      	cmp	r4, #30
 800195e:	d8f5      	bhi.n	800194c <gc_execute_line+0x108>
 8001960:	a301      	add	r3, pc, #4	; (adr r3, 8001968 <gc_execute_line+0x124>)
 8001962:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8001966:	bf00      	nop
 8001968:	08001b91 	.word	0x08001b91
 800196c:	08001b91 	.word	0x08001b91
 8001970:	08001b91 	.word	0x08001b91
 8001974:	08001c07 	.word	0x08001c07
 8001978:	08001c07 	.word	0x08001c07
 800197c:	08001c07 	.word	0x08001c07
 8001980:	0800194d 	.word	0x0800194d
 8001984:	08001bed 	.word	0x08001bed
 8001988:	08001bed 	.word	0x08001bed
 800198c:	08001bed 	.word	0x08001bed
 8001990:	0800194d 	.word	0x0800194d
 8001994:	0800194d 	.word	0x0800194d
 8001998:	0800194d 	.word	0x0800194d
 800199c:	0800194d 	.word	0x0800194d
 80019a0:	0800194d 	.word	0x0800194d
 80019a4:	0800194d 	.word	0x0800194d
 80019a8:	0800194d 	.word	0x0800194d
 80019ac:	0800194d 	.word	0x0800194d
 80019b0:	0800194d 	.word	0x0800194d
 80019b4:	0800194d 	.word	0x0800194d
 80019b8:	0800194d 	.word	0x0800194d
 80019bc:	0800194d 	.word	0x0800194d
 80019c0:	0800194d 	.word	0x0800194d
 80019c4:	0800194d 	.word	0x0800194d
 80019c8:	0800194d 	.word	0x0800194d
 80019cc:	0800194d 	.word	0x0800194d
 80019d0:	0800194d 	.word	0x0800194d
 80019d4:	0800194d 	.word	0x0800194d
 80019d8:	0800194d 	.word	0x0800194d
 80019dc:	0800194d 	.word	0x0800194d
 80019e0:	08001b91 	.word	0x08001b91
        switch(int_value) {
 80019e4:	2c5e      	cmp	r4, #94	; 0x5e
 80019e6:	d8b1      	bhi.n	800194c <gc_execute_line+0x108>
 80019e8:	a301      	add	r3, pc, #4	; (adr r3, 80019f0 <gc_execute_line+0x1ac>)
 80019ea:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 80019ee:	bf00      	nop
 80019f0:	0800192f 	.word	0x0800192f
 80019f4:	0800192f 	.word	0x0800192f
 80019f8:	0800192f 	.word	0x0800192f
 80019fc:	0800192f 	.word	0x0800192f
 8001a00:	08001d97 	.word	0x08001d97
 8001a04:	0800194d 	.word	0x0800194d
 8001a08:	0800194d 	.word	0x0800194d
 8001a0c:	0800194d 	.word	0x0800194d
 8001a10:	0800194d 	.word	0x0800194d
 8001a14:	0800194d 	.word	0x0800194d
 8001a18:	08001c4f 	.word	0x08001c4f
 8001a1c:	0800194d 	.word	0x0800194d
 8001a20:	0800194d 	.word	0x0800194d
 8001a24:	0800194d 	.word	0x0800194d
 8001a28:	0800194d 	.word	0x0800194d
 8001a2c:	0800194d 	.word	0x0800194d
 8001a30:	0800194d 	.word	0x0800194d
 8001a34:	08001d8d 	.word	0x08001d8d
 8001a38:	08001d8d 	.word	0x08001d8d
 8001a3c:	08001d8d 	.word	0x08001d8d
 8001a40:	08001de7 	.word	0x08001de7
 8001a44:	08001de7 	.word	0x08001de7
 8001a48:	0800194d 	.word	0x0800194d
 8001a4c:	0800194d 	.word	0x0800194d
 8001a50:	0800194d 	.word	0x0800194d
 8001a54:	0800194d 	.word	0x0800194d
 8001a58:	0800194d 	.word	0x0800194d
 8001a5c:	0800194d 	.word	0x0800194d
 8001a60:	08001c4f 	.word	0x08001c4f
 8001a64:	0800194d 	.word	0x0800194d
 8001a68:	08001c4f 	.word	0x08001c4f
 8001a6c:	0800194d 	.word	0x0800194d
 8001a70:	0800194d 	.word	0x0800194d
 8001a74:	0800194d 	.word	0x0800194d
 8001a78:	0800194d 	.word	0x0800194d
 8001a7c:	0800194d 	.word	0x0800194d
 8001a80:	0800194d 	.word	0x0800194d
 8001a84:	0800194d 	.word	0x0800194d
 8001a88:	0800192f 	.word	0x0800192f
 8001a8c:	0800194d 	.word	0x0800194d
 8001a90:	080020ab 	.word	0x080020ab
 8001a94:	0800194d 	.word	0x0800194d
 8001a98:	0800194d 	.word	0x0800194d
 8001a9c:	08001dab 	.word	0x08001dab
 8001aa0:	0800194d 	.word	0x0800194d
 8001aa4:	0800194d 	.word	0x0800194d
 8001aa8:	0800194d 	.word	0x0800194d
 8001aac:	0800194d 	.word	0x0800194d
 8001ab0:	0800194d 	.word	0x0800194d
 8001ab4:	08001dab 	.word	0x08001dab
 8001ab8:	0800194d 	.word	0x0800194d
 8001abc:	0800194d 	.word	0x0800194d
 8001ac0:	0800194d 	.word	0x0800194d
 8001ac4:	08001d97 	.word	0x08001d97
 8001ac8:	08001c29 	.word	0x08001c29
 8001acc:	08001c29 	.word	0x08001c29
 8001ad0:	08001c29 	.word	0x08001c29
 8001ad4:	08001c29 	.word	0x08001c29
 8001ad8:	08001c29 	.word	0x08001c29
 8001adc:	08001c29 	.word	0x08001c29
 8001ae0:	0800194d 	.word	0x0800194d
 8001ae4:	08001fef 	.word	0x08001fef
 8001ae8:	0800194d 	.word	0x0800194d
 8001aec:	0800194d 	.word	0x0800194d
 8001af0:	0800194d 	.word	0x0800194d
 8001af4:	0800194d 	.word	0x0800194d
 8001af8:	0800194d 	.word	0x0800194d
 8001afc:	0800194d 	.word	0x0800194d
 8001b00:	0800194d 	.word	0x0800194d
 8001b04:	0800194d 	.word	0x0800194d
 8001b08:	0800194d 	.word	0x0800194d
 8001b0c:	0800194d 	.word	0x0800194d
 8001b10:	0800194d 	.word	0x0800194d
 8001b14:	0800194d 	.word	0x0800194d
 8001b18:	0800194d 	.word	0x0800194d
 8001b1c:	0800194d 	.word	0x0800194d
 8001b20:	0800194d 	.word	0x0800194d
 8001b24:	0800194d 	.word	0x0800194d
 8001b28:	0800194d 	.word	0x0800194d
 8001b2c:	0800194d 	.word	0x0800194d
 8001b30:	08001fe5 	.word	0x08001fe5
 8001b34:	0800194d 	.word	0x0800194d
 8001b38:	0800194d 	.word	0x0800194d
 8001b3c:	0800194d 	.word	0x0800194d
 8001b40:	0800194d 	.word	0x0800194d
 8001b44:	0800194d 	.word	0x0800194d
 8001b48:	0800194d 	.word	0x0800194d
 8001b4c:	0800194d 	.word	0x0800194d
 8001b50:	0800194d 	.word	0x0800194d
 8001b54:	0800194d 	.word	0x0800194d
 8001b58:	08001dcb 	.word	0x08001dcb
 8001b5c:	08001dcb 	.word	0x08001dcb
 8001b60:	08001c4f 	.word	0x08001c4f
 8001b64:	08001ddb 	.word	0x08001ddb
 8001b68:	08001ddb 	.word	0x08001ddb
	gc_block.modal.motion = MOTION_MODE_LINEAR;
 8001b6c:	2101      	movs	r1, #1
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001b6e:	f896 a003 	ldrb.w	sl, [r6, #3]
 8001b72:	2203      	movs	r2, #3
	gc_block.modal.motion = MOTION_MODE_LINEAR;
 8001b74:	f8a8 1001 	strh.w	r1, [r8, #1]
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001b78:	f1ba 0f00 	cmp.w	sl, #0
 8001b7c:	f000 82a5 	beq.w	80020ca <gc_execute_line+0x886>
    gc_parser_flags |= GC_PARSER_JOG_MOTION;
 8001b80:	910b      	str	r1, [sp, #44]	; 0x2c
 8001b82:	e684      	b.n	800188e <gc_execute_line+0x4a>
 8001b84:	20000938 	.word	0x20000938
 8001b88:	20000980 	.word	0x20000980
 8001b8c:	42c80000 	.word	0x42c80000
            switch(int_value) {
 8001b90:	2c00      	cmp	r4, #0
 8001b92:	f000 8236 	beq.w	8002002 <gc_execute_line+0x7be>
 8001b96:	2c01      	cmp	r4, #1
 8001b98:	d042      	beq.n	8001c20 <gc_execute_line+0x3dc>
              default: gc_block.modal.program_flow = int_value; // Program end and reset
 8001b9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b9e:	230b      	movs	r3, #11
 8001ba0:	f888 4008 	strb.w	r4, [r8, #8]
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 8001ba4:	fa4b f303 	asr.w	r3, fp, r3
 8001ba8:	07dc      	lsls	r4, r3, #31
 8001baa:	f100 8290 	bmi.w	80020ce <gc_execute_line+0x88a>
        command_words |= bit(word_bit);
 8001bae:	ea42 0b0b 	orr.w	fp, r2, fp
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001bb2:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 8001bb6:	f816 a002 	ldrb.w	sl, [r6, r2]
 8001bba:	f1ba 0f00 	cmp.w	sl, #0
 8001bbe:	f47f ae6e 	bne.w	800189e <gc_execute_line+0x5a>
  if (axis_words) {
 8001bc2:	9b08      	ldr	r3, [sp, #32]
 8001bc4:	9d07      	ldr	r5, [sp, #28]
 8001bc6:	f8cd b01c 	str.w	fp, [sp, #28]
 8001bca:	b123      	cbz	r3, 8001bd6 <gc_execute_line+0x392>
    if (!axis_command) { axis_command = AXIS_COMMAND_MOTION_MODE; } // Assign implicit motion-mode
 8001bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	bf08      	it	eq
 8001bd2:	2302      	moveq	r3, #2
 8001bd4:	9309      	str	r3, [sp, #36]	; 0x24
  if (bit_istrue(value_words,bit(WORD_N))) {
 8001bd6:	06a8      	lsls	r0, r5, #26
 8001bd8:	f140 8110 	bpl.w	8001dfc <gc_execute_line+0x5b8>
    if (gc_block.values.n > MAX_LINE_NUMBER) { FAIL(STATUS_GCODE_INVALID_LINE_NUMBER); } // [Exceeds max line number]
 8001bdc:	4b85      	ldr	r3, [pc, #532]	; (8001df4 <gc_execute_line+0x5b0>)
 8001bde:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8001be2:	429a      	cmp	r2, r3
 8001be4:	f340 810a 	ble.w	8001dfc <gc_execute_line+0x5b8>
 8001be8:	241b      	movs	r4, #27
 8001bea:	e6b0      	b.n	800194e <gc_execute_line+0x10a>
            switch(int_value) {
 8001bec:	2c08      	cmp	r4, #8
 8001bee:	f000 8228 	beq.w	8002042 <gc_execute_line+0x7fe>
 8001bf2:	2c09      	cmp	r4, #9
 8001bf4:	f040 821e 	bne.w	8002034 <gc_execute_line+0x7f0>
              case 9: gc_block.modal.coolant = COOLANT_DISABLE; break;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bfe:	f888 3009 	strb.w	r3, [r8, #9]
 8001c02:	230d      	movs	r3, #13
 8001c04:	e7ce      	b.n	8001ba4 <gc_execute_line+0x360>
            switch(int_value) {
 8001c06:	2c04      	cmp	r4, #4
 8001c08:	f000 820d 	beq.w	8002026 <gc_execute_line+0x7e2>
 8001c0c:	2c05      	cmp	r4, #5
 8001c0e:	f040 8203 	bne.w	8002018 <gc_execute_line+0x7d4>
              case 5: gc_block.modal.spindle = SPINDLE_DISABLE; break;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c18:	f888 300a 	strb.w	r3, [r8, #10]
 8001c1c:	230c      	movs	r3, #12
 8001c1e:	e7c1      	b.n	8001ba4 <gc_execute_line+0x360>
 8001c20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c24:	230b      	movs	r3, #11
 8001c26:	e7bd      	b.n	8001ba4 <gc_execute_line+0x360>
            break;
 8001c28:	2109      	movs	r1, #9
            gc_block.modal.coord_select = int_value - 54; // Shift to array indexing.
 8001c2a:	3c36      	subs	r4, #54	; 0x36
 8001c2c:	f888 4007 	strb.w	r4, [r8, #7]
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 8001c30:	2a00      	cmp	r2, #0
 8001c32:	f040 820d 	bne.w	8002050 <gc_execute_line+0x80c>
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 8001c36:	fa4b f301 	asr.w	r3, fp, r1
 8001c3a:	07dd      	lsls	r5, r3, #31
 8001c3c:	f100 8247 	bmi.w	80020ce <gc_execute_line+0x88a>
        command_words |= bit(word_bit);
 8001c40:	2301      	movs	r3, #1
 8001c42:	408b      	lsls	r3, r1
 8001c44:	ea43 0b0b 	orr.w	fp, r3, fp
 8001c48:	fa1f fb8b 	uxth.w	fp, fp
        break;
 8001c4c:	e7b1      	b.n	8001bb2 <gc_execute_line+0x36e>
            if (mantissa == 0) { // Ignore G28.1, G30.1, and G92.1
 8001c4e:	2a00      	cmp	r2, #0
 8001c50:	f040 81b7 	bne.w	8001fc2 <gc_execute_line+0x77e>
              if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 8001c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f040 8598 	bne.w	800278c <gc_execute_line+0xf48>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8001c5c:	2c1c      	cmp	r4, #28
            gc_block.non_modal_command = int_value;
 8001c5e:	f888 4000 	strb.w	r4, [r8]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8001c62:	f000 8224 	beq.w	80020ae <gc_execute_line+0x86a>
 8001c66:	2c1e      	cmp	r4, #30
 8001c68:	f000 8221 	beq.w	80020ae <gc_execute_line+0x86a>
 8001c6c:	2c5c      	cmp	r4, #92	; 0x5c
 8001c6e:	f000 821e 	beq.w	80020ae <gc_execute_line+0x86a>
 8001c72:	4619      	mov	r1, r3
              axis_command = AXIS_COMMAND_NON_MODAL;
 8001c74:	2301      	movs	r3, #1
 8001c76:	9309      	str	r3, [sp, #36]	; 0x24
 8001c78:	e7dd      	b.n	8001c36 <gc_execute_line+0x3f2>
          case 'Z': word_bit = WORD_Z; gc_block.values.xyz[Z_AXIS] = value; axis_words |= (1<<Z_AXIS); break;
 8001c7a:	9b08      	ldr	r3, [sp, #32]
 8001c7c:	220c      	movs	r2, #12
 8001c7e:	f043 0304 	orr.w	r3, r3, #4
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	9308      	str	r3, [sp, #32]
 8001c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8a:	f8c8 5040 	str.w	r5, [r8, #64]	; 0x40
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8001c8e:	9907      	ldr	r1, [sp, #28]
 8001c90:	fa41 f202 	asr.w	r2, r1, r2
 8001c94:	07d1      	lsls	r1, r2, #31
 8001c96:	f100 81af 	bmi.w	8001ff8 <gc_execute_line+0x7b4>
        value_words |= bit(word_bit); // Flag to indicate parameter assigned.
 8001c9a:	9d07      	ldr	r5, [sp, #28]
 8001c9c:	431d      	orrs	r5, r3
 8001c9e:	b2ab      	uxth	r3, r5
 8001ca0:	9307      	str	r3, [sp, #28]
 8001ca2:	e786      	b.n	8001bb2 <gc_execute_line+0x36e>
		  case 'X': word_bit = WORD_X; gc_block.values.xyz[X_AXIS] = value; axis_words |= (1<<X_AXIS); break;
 8001ca4:	9b08      	ldr	r3, [sp, #32]
 8001ca6:	220a      	movs	r2, #10
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	9308      	str	r3, [sp, #32]
 8001cb0:	f8c8 5038 	str.w	r5, [r8, #56]	; 0x38
 8001cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cb8:	e7e9      	b.n	8001c8e <gc_execute_line+0x44a>
          case 'Y': word_bit = WORD_Y; gc_block.values.xyz[Y_AXIS] = value; axis_words |= (1<<Y_AXIS); break;
 8001cba:	9b08      	ldr	r3, [sp, #32]
 8001cbc:	220b      	movs	r2, #11
 8001cbe:	f043 0302 	orr.w	r3, r3, #2
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	9308      	str	r3, [sp, #32]
 8001cc6:	f8c8 503c 	str.w	r5, [r8, #60]	; 0x3c
 8001cca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cce:	e7de      	b.n	8001c8e <gc_execute_line+0x44a>
          case 'P': word_bit = WORD_P; gc_block.values.p = value; break;
 8001cd0:	2406      	movs	r4, #6
 8001cd2:	f8c8 5028 	str.w	r5, [r8, #40]	; 0x28
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8001cd6:	9b07      	ldr	r3, [sp, #28]
 8001cd8:	fa43 f204 	asr.w	r2, r3, r4
 8001cdc:	07d0      	lsls	r0, r2, #31
 8001cde:	f100 818b 	bmi.w	8001ff8 <gc_execute_line+0x7b4>
          if (value < 0.0) { FAIL(STATUS_NEGATIVE_VALUE); } // [Word value cannot be negative]
 8001ce2:	4628      	mov	r0, r5
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	f7fe ff73 	bl	8000bd0 <__aeabi_fcmplt>
 8001cea:	2800      	cmp	r0, #0
 8001cec:	f040 82fb 	bne.w	80022e6 <gc_execute_line+0xaa2>
        value_words |= bit(word_bit); // Flag to indicate parameter assigned.
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	40a3      	lsls	r3, r4
 8001cf4:	b21b      	sxth	r3, r3
 8001cf6:	e7d0      	b.n	8001c9a <gc_execute_line+0x456>
          case 'R': word_bit = WORD_R; gc_block.values.r = value; break;
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	2207      	movs	r2, #7
 8001cfc:	f8c8 502c 	str.w	r5, [r8, #44]	; 0x2c
 8001d00:	e7c5      	b.n	8001c8e <gc_execute_line+0x44a>
          	  	  break;
 8001d02:	2408      	movs	r4, #8
          	  	  gc_block.values.s = value;
 8001d04:	f8c8 5030 	str.w	r5, [r8, #48]	; 0x30
          	  	  break;
 8001d08:	e7e5      	b.n	8001cd6 <gc_execute_line+0x492>
				if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 8001d0a:	4628      	mov	r0, r5
 8001d0c:	493a      	ldr	r1, [pc, #232]	; (8001df8 <gc_execute_line+0x5b4>)
 8001d0e:	f7fe ff7d 	bl	8000c0c <__aeabi_fcmpgt>
 8001d12:	2800      	cmp	r0, #0
 8001d14:	f040 8677 	bne.w	8002a06 <gc_execute_line+0x11c2>
					gc_block.values.t = int_value;
 8001d18:	f888 4034 	strb.w	r4, [r8, #52]	; 0x34
				break;
 8001d1c:	2409      	movs	r4, #9
 8001d1e:	e7da      	b.n	8001cd6 <gc_execute_line+0x492>
		  case 'A': word_bit = WORD_A; gc_block.values.xyz[A_AXIS] = value; axis_words |= (1<<A_AXIS); break;
 8001d20:	9b08      	ldr	r3, [sp, #32]
 8001d22:	220d      	movs	r2, #13
 8001d24:	f043 0308 	orr.w	r3, r3, #8
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	9308      	str	r3, [sp, #32]
 8001d2c:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8001d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d34:	e7ab      	b.n	8001c8e <gc_execute_line+0x44a>
          case 'F': word_bit = WORD_F; gc_block.values.f = value; break;
 8001d36:	2400      	movs	r4, #0
 8001d38:	f8c8 500c 	str.w	r5, [r8, #12]
 8001d3c:	e7cb      	b.n	8001cd6 <gc_execute_line+0x492>
          case 'I': word_bit = WORD_I; gc_block.values.ijk[X_AXIS] = value; ijk_words |= (1<<X_AXIS); break;
 8001d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d40:	2201      	movs	r2, #1
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	930a      	str	r3, [sp, #40]	; 0x28
 8001d48:	f8c8 5010 	str.w	r5, [r8, #16]
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e79e      	b.n	8001c8e <gc_execute_line+0x44a>
          case 'J': word_bit = WORD_J; gc_block.values.ijk[Y_AXIS] = value; ijk_words |= (1<<Y_AXIS); break;
 8001d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d52:	2202      	movs	r2, #2
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	930a      	str	r3, [sp, #40]	; 0x28
 8001d5a:	f8c8 5014 	str.w	r5, [r8, #20]
 8001d5e:	2304      	movs	r3, #4
 8001d60:	e795      	b.n	8001c8e <gc_execute_line+0x44a>
          case 'K': word_bit = WORD_K; gc_block.values.ijk[Z_AXIS] = value; ijk_words |= (1<<Z_AXIS); break;
 8001d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d64:	2203      	movs	r2, #3
 8001d66:	f043 0304 	orr.w	r3, r3, #4
 8001d6a:	930a      	str	r3, [sp, #40]	; 0x28
 8001d6c:	f8c8 5018 	str.w	r5, [r8, #24]
 8001d70:	2308      	movs	r3, #8
 8001d72:	e78c      	b.n	8001c8e <gc_execute_line+0x44a>
          case 'L': word_bit = WORD_L; gc_block.values.l = int_value; break;
 8001d74:	2310      	movs	r3, #16
 8001d76:	2204      	movs	r2, #4
 8001d78:	f888 4020 	strb.w	r4, [r8, #32]
 8001d7c:	e787      	b.n	8001c8e <gc_execute_line+0x44a>
          case 'N': word_bit = WORD_N; gc_block.values.n = truncf(value); break;
 8001d7e:	4628      	mov	r0, r5
 8001d80:	f7fe ff64 	bl	8000c4c <__aeabi_f2iz>
 8001d84:	2405      	movs	r4, #5
 8001d86:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
 8001d8a:	e7a4      	b.n	8001cd6 <gc_execute_line+0x492>
            gc_block.modal.plane_select = int_value - 17;
 8001d8c:	3c11      	subs	r4, #17
            break;
 8001d8e:	2102      	movs	r1, #2
            gc_block.modal.plane_select = int_value - 17;
 8001d90:	f888 4005 	strb.w	r4, [r8, #5]
            break;
 8001d94:	e74c      	b.n	8001c30 <gc_execute_line+0x3ec>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8001d96:	2c1c      	cmp	r4, #28
            gc_block.non_modal_command = int_value;
 8001d98:	f888 4000 	strb.w	r4, [r8]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8001d9c:	f000 8119 	beq.w	8001fd2 <gc_execute_line+0x78e>
 8001da0:	2c1e      	cmp	r4, #30
 8001da2:	f000 8116 	beq.w	8001fd2 <gc_execute_line+0x78e>
 8001da6:	2100      	movs	r1, #0
 8001da8:	e742      	b.n	8001c30 <gc_execute_line+0x3ec>
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict] }
 8001daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f040 84ed 	bne.w	800278c <gc_execute_line+0xf48>
            if (int_value == 49) { // G49
 8001db2:	2c31      	cmp	r4, #49	; 0x31
 8001db4:	d003      	beq.n	8001dbe <gc_execute_line+0x57a>
            } else if (mantissa == 10) { // G43.1
 8001db6:	2a0a      	cmp	r2, #10
 8001db8:	f47f adc8 	bne.w	800194c <gc_execute_line+0x108>
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	f888 3006 	strb.w	r3, [r8, #6]
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 8001dc2:	2303      	movs	r3, #3
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 8001dc4:	2108      	movs	r1, #8
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 8001dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8001dc8:	e735      	b.n	8001c36 <gc_execute_line+0x3f2>
            if (mantissa == 0) {
 8001dca:	2a00      	cmp	r2, #0
 8001dcc:	f040 8142 	bne.w	8002054 <gc_execute_line+0x810>
              gc_block.modal.distance = int_value - 90;
 8001dd0:	3c5a      	subs	r4, #90	; 0x5a
 8001dd2:	2103      	movs	r1, #3
 8001dd4:	f888 4004 	strb.w	r4, [r8, #4]
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 8001dd8:	e72d      	b.n	8001c36 <gc_execute_line+0x3f2>
            gc_block.modal.feed_rate = 94 - int_value;
 8001dda:	f1c4 045e 	rsb	r4, r4, #94	; 0x5e
            break;
 8001dde:	2105      	movs	r1, #5
            gc_block.modal.feed_rate = 94 - int_value;
 8001de0:	f888 4002 	strb.w	r4, [r8, #2]
            break;
 8001de4:	e724      	b.n	8001c30 <gc_execute_line+0x3ec>
            gc_block.modal.units = 21 - int_value;
 8001de6:	f1c4 0415 	rsb	r4, r4, #21
            break;
 8001dea:	2106      	movs	r1, #6
            gc_block.modal.units = 21 - int_value;
 8001dec:	f888 4003 	strb.w	r4, [r8, #3]
            break;
 8001df0:	e71e      	b.n	8001c30 <gc_execute_line+0x3ec>
 8001df2:	bf00      	nop
 8001df4:	00989680 	.word	0x00989680
 8001df8:	437f0000 	.word	0x437f0000
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 8001dfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 8141 	beq.w	8002086 <gc_execute_line+0x842>
    if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); }
 8001e04:	07e9      	lsls	r1, r5, #31
 8001e06:	f140 8160 	bpl.w	80020ca <gc_execute_line+0x886>
    if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.f *= MM_PER_INCH; }
 8001e0a:	f898 3003 	ldrb.w	r3, [r8, #3]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d106      	bne.n	8001e20 <gc_execute_line+0x5dc>
 8001e12:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8001e16:	49b1      	ldr	r1, [pc, #708]	; (80020dc <gc_execute_line+0x898>)
 8001e18:	f7fe fd3c 	bl	8000894 <__aeabi_fmul>
 8001e1c:	f8c8 000c 	str.w	r0, [r8, #12]
  if (bit_isfalse(value_words,bit(WORD_S))) { gc_block.values.s = gc_state.spindle_speed; }
 8001e20:	05ef      	lsls	r7, r5, #23
 8001e22:	d403      	bmi.n	8001e2c <gc_execute_line+0x5e8>
 8001e24:	4bae      	ldr	r3, [pc, #696]	; (80020e0 <gc_execute_line+0x89c>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  if (gc_block.non_modal_command == NON_MODAL_DWELL) {
 8001e2c:	f898 4000 	ldrb.w	r4, [r8]
 8001e30:	2c04      	cmp	r4, #4
 8001e32:	f000 816c 	beq.w	800210e <gc_execute_line+0x8ca>
  switch (gc_block.modal.plane_select) {
 8001e36:	f898 9005 	ldrb.w	r9, [r8, #5]
 8001e3a:	f1b9 0f00 	cmp.w	r9, #0
 8001e3e:	f000 81a2 	beq.w	8002186 <gc_execute_line+0x942>
 8001e42:	f1b9 0f01 	cmp.w	r9, #1
 8001e46:	f040 8159 	bne.w	80020fc <gc_execute_line+0x8b8>
 8001e4a:	f04f 0a02 	mov.w	sl, #2
 8001e4e:	2600      	movs	r6, #0
 8001e50:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8001e54:	2705      	movs	r7, #5
 8001e56:	46d1      	mov	r9, sl
 8001e58:	960c      	str	r6, [sp, #48]	; 0x30
  if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8001e5a:	f898 3003 	ldrb.w	r3, [r8, #3]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	f000 8167 	beq.w	8002132 <gc_execute_line+0x8ee>
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates called in block.
 8001e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	f000 8158 	beq.w	800211c <gc_execute_line+0x8d8>
  memcpy(block_coord_system,gc_state.coord_system,sizeof(gc_state.coord_system));
 8001e6c:	4b9d      	ldr	r3, [pc, #628]	; (80020e4 <gc_execute_line+0x8a0>)
 8001e6e:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
 8001e72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e74:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
  if ( bit_istrue(command_words,bit(MODAL_GROUP_G12)) ) { // Check if called in block
 8001e78:	9b07      	ldr	r3, [sp, #28]
 8001e7a:	0598      	lsls	r0, r3, #22
 8001e7c:	d510      	bpl.n	8001ea0 <gc_execute_line+0x65c>
    if (gc_block.modal.coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 8001e7e:	f898 0007 	ldrb.w	r0, [r8, #7]
 8001e82:	2806      	cmp	r0, #6
 8001e84:	f200 824d 	bhi.w	8002322 <gc_execute_line+0xade>
    if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 8001e88:	4b95      	ldr	r3, [pc, #596]	; (80020e0 <gc_execute_line+0x89c>)
 8001e8a:	799b      	ldrb	r3, [r3, #6]
 8001e8c:	4283      	cmp	r3, r0
 8001e8e:	d007      	beq.n	8001ea0 <gc_execute_line+0x65c>
      if (!(settings_read_coord_data(gc_block.modal.coord_select,block_coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 8001e90:	4659      	mov	r1, fp
 8001e92:	f004 fcb7 	bl	8006804 <settings_read_coord_data>
 8001e96:	2800      	cmp	r0, #0
 8001e98:	f000 845a 	beq.w	8002750 <gc_execute_line+0xf0c>
  switch (gc_block.non_modal_command) {
 8001e9c:	f898 4000 	ldrb.w	r4, [r8]
 8001ea0:	2c0a      	cmp	r4, #10
 8001ea2:	f000 8177 	beq.w	8002194 <gc_execute_line+0x950>
 8001ea6:	2c5c      	cmp	r4, #92	; 0x5c
 8001ea8:	f000 81cc 	beq.w	8002244 <gc_execute_line+0xa00>
      if (axis_command != AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // TLO block any axis command.
 8001eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d03c      	beq.n	8001f2c <gc_execute_line+0x6e8>
        if (axis_words) {
 8001eb2:	9a08      	ldr	r2, [sp, #32]
 8001eb4:	2a00      	cmp	r2, #0
 8001eb6:	d039      	beq.n	8001f2c <gc_execute_line+0x6e8>
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 8001eb8:	4989      	ldr	r1, [pc, #548]	; (80020e0 <gc_execute_line+0x89c>)
 8001eba:	f898 3004 	ldrb.w	r3, [r8, #4]
 8001ebe:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8001ec0:	900e      	str	r0, [sp, #56]	; 0x38
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 84d4 	beq.w	8002870 <gc_execute_line+0x102c>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8001ec8:	07d0      	lsls	r0, r2, #31
 8001eca:	f140 857f 	bpl.w	80029cc <gc_execute_line+0x1188>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 8001ece:	2c35      	cmp	r4, #53	; 0x35
 8001ed0:	f000 8441 	beq.w	8002756 <gc_execute_line+0xf12>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8001ed4:	4b82      	ldr	r3, [pc, #520]	; (80020e0 <gc_execute_line+0x89c>)
 8001ed6:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 8001eda:	69d9      	ldr	r1, [r3, #28]
 8001edc:	f7fe fbd2 	bl	8000684 <__addsf3>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8001ee0:	9b08      	ldr	r3, [sp, #32]
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8001ee2:	f8c8 0038 	str.w	r0, [r8, #56]	; 0x38
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8001ee6:	079a      	lsls	r2, r3, #30
 8001ee8:	f140 8439 	bpl.w	800275e <gc_execute_line+0xf1a>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8001eec:	4b7c      	ldr	r3, [pc, #496]	; (80020e0 <gc_execute_line+0x89c>)
 8001eee:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 8001ef2:	6a19      	ldr	r1, [r3, #32]
 8001ef4:	f7fe fbc6 	bl	8000684 <__addsf3>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8001ef8:	9b08      	ldr	r3, [sp, #32]
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8001efa:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8001efe:	0758      	lsls	r0, r3, #29
 8001f00:	f140 8571 	bpl.w	80029e6 <gc_execute_line+0x11a2>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8001f04:	4b76      	ldr	r3, [pc, #472]	; (80020e0 <gc_execute_line+0x89c>)
 8001f06:	f8d8 1040 	ldr.w	r1, [r8, #64]	; 0x40
 8001f0a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001f0c:	f7fe fbba 	bl	8000684 <__addsf3>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8001f10:	9b08      	ldr	r3, [sp, #32]
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8001f12:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8001f16:	071b      	lsls	r3, r3, #28
 8001f18:	f140 854c 	bpl.w	80029b4 <gc_execute_line+0x1170>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8001f1c:	4b70      	ldr	r3, [pc, #448]	; (80020e0 <gc_execute_line+0x89c>)
 8001f1e:	f8d8 1044 	ldr.w	r1, [r8, #68]	; 0x44
 8001f22:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001f24:	f7fe fbae 	bl	8000684 <__addsf3>
 8001f28:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
      switch (gc_block.non_modal_command) {
 8001f2c:	2c1e      	cmp	r4, #30
 8001f2e:	f000 8463 	beq.w	80027f8 <gc_execute_line+0xfb4>
 8001f32:	2c35      	cmp	r4, #53	; 0x35
 8001f34:	f000 8422 	beq.w	800277c <gc_execute_line+0xf38>
 8001f38:	2c1c      	cmp	r4, #28
 8001f3a:	f000 8403 	beq.w	8002744 <gc_execute_line+0xf00>
          if (!(gc_block.modal.motion == MOTION_MODE_SEEK || gc_block.modal.motion == MOTION_MODE_LINEAR)) {
 8001f3e:	f898 4001 	ldrb.w	r4, [r8, #1]
  if (gc_block.modal.motion == MOTION_MODE_NONE) {
 8001f42:	2c50      	cmp	r4, #80	; 0x50
 8001f44:	f040 841f 	bne.w	8002786 <gc_execute_line+0xf42>
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]
 8001f48:	9b08      	ldr	r3, [sp, #32]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f040 8538 	bne.w	80029c0 <gc_execute_line+0x117c>
 8001f50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001f52:	930e      	str	r3, [sp, #56]	; 0x38
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 8001f54:	2a00      	cmp	r2, #0
 8001f56:	f000 81c0 	beq.w	80022da <gc_execute_line+0xa96>
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F)));
 8001f5a:	f025 0521 	bic.w	r5, r5, #33	; 0x21
 8001f5e:	b2ad      	uxth	r5, r5
  if (axis_command) { bit_false(value_words,(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z)|bit(WORD_A))); } // Remove axis words.
 8001f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f62:	b113      	cbz	r3, 8001f6a <gc_execute_line+0x726>
 8001f64:	f425 5570 	bic.w	r5, r5, #15360	; 0x3c00
 8001f68:	b2ad      	uxth	r5, r5
  if (value_words) { FAIL(STATUS_GCODE_UNUSED_WORDS); } // [Unused words]
 8001f6a:	2d00      	cmp	r5, #0
 8001f6c:	f040 81cb 	bne.w	8002306 <gc_execute_line+0xac2>
  memset(pl_data,0,sizeof(plan_line_data_t)); // Zero pl_data struct
 8001f70:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8001f74:	9517      	str	r5, [sp, #92]	; 0x5c
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 8001f76:	2a00      	cmp	r2, #0
 8001f78:	f000 81de 	beq.w	8002338 <gc_execute_line+0xaf4>
      if (command_words & ~(bit(MODAL_GROUP_G3) | bit(MODAL_GROUP_G6 | bit(MODAL_GROUP_G0)))) { FAIL(STATUS_INVALID_JOG_COMMAND) };
 8001f7c:	9b07      	ldr	r3, [sp, #28]
 8001f7e:	f023 0349 	bic.w	r3, r3, #73	; 0x49
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f040 8435 	bne.w	80027f2 <gc_execute_line+0xfae>
      if (!(gc_block.non_modal_command == NON_MODAL_ABSOLUTE_OVERRIDE || gc_block.non_modal_command == NON_MODAL_NO_ACTION)) { FAIL(STATUS_INVALID_JOG_COMMAND); }
 8001f88:	f898 3000 	ldrb.w	r3, [r8]
 8001f8c:	2b35      	cmp	r3, #53	; 0x35
 8001f8e:	d002      	beq.n	8001f96 <gc_execute_line+0x752>
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f040 842e 	bne.w	80027f2 <gc_execute_line+0xfae>
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8001f96:	4a52      	ldr	r2, [pc, #328]	; (80020e0 <gc_execute_line+0x89c>)
      uint8_t status = jog_execute(&plan_data, &gc_block);
 8001f98:	a815      	add	r0, sp, #84	; 0x54
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8001f9a:	7a11      	ldrb	r1, [r2, #8]
 8001f9c:	7a53      	ldrb	r3, [r2, #9]
      pl_data->spindle_speed = gc_state.spindle_speed;
 8001f9e:	68d2      	ldr	r2, [r2, #12]
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8001fa0:	430b      	orrs	r3, r1
      uint8_t status = jog_execute(&plan_data, &gc_block);
 8001fa2:	4951      	ldr	r1, [pc, #324]	; (80020e8 <gc_execute_line+0x8a4>)
      pl_data->spindle_speed = gc_state.spindle_speed;
 8001fa4:	9216      	str	r2, [sp, #88]	; 0x58
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8001fa6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
      uint8_t status = jog_execute(&plan_data, &gc_block);
 8001faa:	f000 fe8f 	bl	8002ccc <jog_execute>
      if (status == STATUS_OK) { memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); }
 8001fae:	4604      	mov	r4, r0
 8001fb0:	2800      	cmp	r0, #0
 8001fb2:	f47f accc 	bne.w	800194e <gc_execute_line+0x10a>
 8001fb6:	4d4d      	ldr	r5, [pc, #308]	; (80020ec <gc_execute_line+0x8a8>)
 8001fb8:	4b4d      	ldr	r3, [pc, #308]	; (80020f0 <gc_execute_line+0x8ac>)
 8001fba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fbc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001fc0:	e4c5      	b.n	800194e <gc_execute_line+0x10a>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8001fc2:	2c1c      	cmp	r4, #28
            gc_block.non_modal_command = int_value;
 8001fc4:	f888 4000 	strb.w	r4, [r8]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8001fc8:	d009      	beq.n	8001fde <gc_execute_line+0x79a>
 8001fca:	2c1e      	cmp	r4, #30
 8001fcc:	d007      	beq.n	8001fde <gc_execute_line+0x79a>
 8001fce:	2c5c      	cmp	r4, #92	; 0x5c
 8001fd0:	d13e      	bne.n	8002050 <gc_execute_line+0x80c>
              if (!((mantissa == 0) || (mantissa == 10))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); }
 8001fd2:	b922      	cbnz	r2, 8001fde <gc_execute_line+0x79a>
              gc_block.non_modal_command += mantissa;
 8001fd4:	4420      	add	r0, r4
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	f888 0000 	strb.w	r0, [r8]
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 8001fdc:	e62b      	b.n	8001c36 <gc_execute_line+0x3f2>
              if (!((mantissa == 0) || (mantissa == 10))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); }
 8001fde:	2a0a      	cmp	r2, #10
 8001fe0:	d0f8      	beq.n	8001fd4 <gc_execute_line+0x790>
 8001fe2:	e4b3      	b.n	800194c <gc_execute_line+0x108>
            gc_block.modal.motion = int_value;
 8001fe4:	2350      	movs	r3, #80	; 0x50
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	f888 3001 	strb.w	r3, [r8, #1]
            if (int_value == 38){
 8001fec:	e620      	b.n	8001c30 <gc_execute_line+0x3ec>
            if (mantissa != 0) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G61.1 not supported]
 8001fee:	2a00      	cmp	r2, #0
 8001ff0:	f47f acac 	bne.w	800194c <gc_execute_line+0x108>
 8001ff4:	210a      	movs	r1, #10
 8001ff6:	e61e      	b.n	8001c36 <gc_execute_line+0x3f2>
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8001ff8:	2419      	movs	r4, #25
}
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	b01d      	add	sp, #116	; 0x74
 8001ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              case 0: gc_block.modal.program_flow = PROGRAM_FLOW_PAUSED; break; // Program pause
 8002002:	2303      	movs	r3, #3
 8002004:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002008:	f888 3008 	strb.w	r3, [r8, #8]
 800200c:	230b      	movs	r3, #11
 800200e:	e5c9      	b.n	8001ba4 <gc_execute_line+0x360>
    if((letter < 'A') || (letter > 'Z')) { FAIL(STATUS_EXPECTED_COMMAND_LETTER); } // [Expected word letter]
 8002010:	2401      	movs	r4, #1
 8002012:	e49c      	b.n	800194e <gc_execute_line+0x10a>
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 8002014:	2402      	movs	r4, #2
 8002016:	e49a      	b.n	800194e <gc_execute_line+0x10a>
              case 3: gc_block.modal.spindle = SPINDLE_ENABLE_CW; break;
 8002018:	2310      	movs	r3, #16
 800201a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800201e:	f888 300a 	strb.w	r3, [r8, #10]
 8002022:	230c      	movs	r3, #12
 8002024:	e5be      	b.n	8001ba4 <gc_execute_line+0x360>
              case 4: gc_block.modal.spindle = SPINDLE_ENABLE_CCW; break;
 8002026:	2320      	movs	r3, #32
 8002028:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800202c:	f888 300a 	strb.w	r3, [r8, #10]
 8002030:	230c      	movs	r3, #12
 8002032:	e5b7      	b.n	8001ba4 <gc_execute_line+0x360>
                case 7: gc_block.modal.coolant = COOLANT_MIST_ENABLE; break;
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800203a:	f888 3009 	strb.w	r3, [r8, #9]
 800203e:	230d      	movs	r3, #13
 8002040:	e5b0      	b.n	8001ba4 <gc_execute_line+0x360>
              case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
 8002042:	2340      	movs	r3, #64	; 0x40
 8002044:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002048:	f888 3009 	strb.w	r3, [r8, #9]
 800204c:	230d      	movs	r3, #13
 800204e:	e5a9      	b.n	8001ba4 <gc_execute_line+0x360>
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 8002050:	2417      	movs	r4, #23
 8002052:	e47c      	b.n	800194e <gc_execute_line+0x10a>
              if ((mantissa != 10) || (int_value == 90)) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G90.1 not supported]
 8002054:	2a0a      	cmp	r2, #10
 8002056:	f47f ac79 	bne.w	800194c <gc_execute_line+0x108>
 800205a:	2c5a      	cmp	r4, #90	; 0x5a
 800205c:	f43f ac76 	beq.w	800194c <gc_execute_line+0x108>
 8002060:	2104      	movs	r1, #4
 8002062:	e5e8      	b.n	8001c36 <gc_execute_line+0x3f2>
              if (!((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))) {
 8002064:	4923      	ldr	r1, [pc, #140]	; (80020f4 <gc_execute_line+0x8b0>)
 8002066:	fa21 f303 	lsr.w	r3, r1, r3
 800206a:	07df      	lsls	r7, r3, #31
 800206c:	f57f ac6e 	bpl.w	800194c <gc_execute_line+0x108>
              gc_block.modal.motion += (mantissa/10)+100;
 8002070:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <gc_execute_line+0x8b4>)
 8002072:	2101      	movs	r1, #1
 8002074:	fba3 2302 	umull	r2, r3, r3, r2
 8002078:	08db      	lsrs	r3, r3, #3
 800207a:	3b76      	subs	r3, #118	; 0x76
 800207c:	f888 3001 	strb.w	r3, [r8, #1]
            axis_command = AXIS_COMMAND_MOTION_MODE;
 8002080:	2302      	movs	r3, #2
 8002082:	9309      	str	r3, [sp, #36]	; 0x24
 8002084:	e5d7      	b.n	8001c36 <gc_execute_line+0x3f2>
    if (gc_block.modal.feed_rate == FEED_RATE_MODE_INVERSE_TIME) { // = G93
 8002086:	f898 3002 	ldrb.w	r3, [r8, #2]
 800208a:	2b01      	cmp	r3, #1
 800208c:	f000 813e 	beq.w	800230c <gc_execute_line+0xac8>
      if (gc_state.modal.feed_rate == FEED_RATE_MODE_UNITS_PER_MIN) { // Last state is also G94
 8002090:	4a13      	ldr	r2, [pc, #76]	; (80020e0 <gc_execute_line+0x89c>)
 8002092:	7853      	ldrb	r3, [r2, #1]
 8002094:	930b      	str	r3, [sp, #44]	; 0x2c
 8002096:	2b00      	cmp	r3, #0
 8002098:	f040 8122 	bne.w	80022e0 <gc_execute_line+0xa9c>
        if (bit_istrue(value_words,bit(WORD_F))) {
 800209c:	07eb      	lsls	r3, r5, #31
 800209e:	f53f aeb4 	bmi.w	8001e0a <gc_execute_line+0x5c6>
          gc_block.values.f = gc_state.feed_rate; // Push last state feed rate
 80020a2:	6913      	ldr	r3, [r2, #16]
 80020a4:	f8c8 300c 	str.w	r3, [r8, #12]
 80020a8:	e6ba      	b.n	8001e20 <gc_execute_line+0x5dc>
 80020aa:	2107      	movs	r1, #7
 80020ac:	e5c0      	b.n	8001c30 <gc_execute_line+0x3ec>
              axis_command = AXIS_COMMAND_NON_MODAL;
 80020ae:	2301      	movs	r3, #1
 80020b0:	9309      	str	r3, [sp, #36]	; 0x24
 80020b2:	e78f      	b.n	8001fd4 <gc_execute_line+0x790>
		if ((gc_block.modal.motion != MOTION_MODE_NONE) && (gc_block.modal.motion != MOTION_MODE_SEEK)) {
 80020b4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80020b8:	2b50      	cmp	r3, #80	; 0x50
 80020ba:	f43f aeb1 	beq.w	8001e20 <gc_execute_line+0x5dc>
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f43f aeae 	beq.w	8001e20 <gc_execute_line+0x5dc>
          if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [F word missing]
 80020c4:	07ea      	lsls	r2, r5, #31
 80020c6:	f53f aeab 	bmi.w	8001e20 <gc_execute_line+0x5dc>
      if (gc_block.values.f == 0.0f) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [Feed rate undefined]
 80020ca:	2416      	movs	r4, #22
 80020cc:	e43f      	b.n	800194e <gc_execute_line+0x10a>
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 80020ce:	2415      	movs	r4, #21
 80020d0:	e43d      	b.n	800194e <gc_execute_line+0x10a>
            axis_command = AXIS_COMMAND_MOTION_MODE;
 80020d2:	2302      	movs	r3, #2
 80020d4:	2101      	movs	r1, #1
 80020d6:	9309      	str	r3, [sp, #36]	; 0x24
 80020d8:	e5aa      	b.n	8001c30 <gc_execute_line+0x3ec>
 80020da:	bf00      	nop
 80020dc:	41cb3333 	.word	0x41cb3333
 80020e0:	20000980 	.word	0x20000980
 80020e4:	200009ac 	.word	0x200009ac
 80020e8:	20000938 	.word	0x20000938
 80020ec:	2000099c 	.word	0x2000099c
 80020f0:	20000970 	.word	0x20000970
 80020f4:	40100401 	.word	0x40100401
 80020f8:	cccccccd 	.word	0xcccccccd
  switch (gc_block.modal.plane_select) {
 80020fc:	2602      	movs	r6, #2
 80020fe:	f04f 0a01 	mov.w	sl, #1
      axis_linear = X_AXIS;
 8002102:	2300      	movs	r3, #0
  switch (gc_block.modal.plane_select) {
 8002104:	2706      	movs	r7, #6
      axis_0 = Y_AXIS;
 8002106:	46d1      	mov	r9, sl
      axis_1 = Z_AXIS;
 8002108:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
 800210c:	e6a5      	b.n	8001e5a <gc_execute_line+0x616>
    if (bit_isfalse(value_words,bit(WORD_P))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P word missing]
 800210e:	066e      	lsls	r6, r5, #25
 8002110:	f140 8229 	bpl.w	8002566 <gc_execute_line+0xd22>
    bit_false(value_words,bit(WORD_P));
 8002114:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8002118:	b2ad      	uxth	r5, r5
 800211a:	e68c      	b.n	8001e36 <gc_execute_line+0x5f2>
    if (gc_block.modal.tool_length == TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC) {
 800211c:	f898 3006 	ldrb.w	r3, [r8, #6]
 8002120:	2b01      	cmp	r3, #1
 8002122:	f47f aea3 	bne.w	8001e6c <gc_execute_line+0x628>
      if (axis_words ^ (1<<TOOL_LENGTH_OFFSET_AXIS)) { FAIL(STATUS_GCODE_G43_DYNAMIC_AXIS_ERROR); }
 8002126:	9b08      	ldr	r3, [sp, #32]
 8002128:	2b04      	cmp	r3, #4
 800212a:	f43f ae9f 	beq.w	8001e6c <gc_execute_line+0x628>
 800212e:	2425      	movs	r4, #37	; 0x25
 8002130:	e40d      	b.n	800194e <gc_execute_line+0x10a>
      if (bit_istrue(axis_words,bit(idx)) ) {
 8002132:	9b08      	ldr	r3, [sp, #32]
 8002134:	07d8      	lsls	r0, r3, #31
 8002136:	d506      	bpl.n	8002146 <gc_execute_line+0x902>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 8002138:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 800213c:	497a      	ldr	r1, [pc, #488]	; (8002328 <gc_execute_line+0xae4>)
 800213e:	f7fe fba9 	bl	8000894 <__aeabi_fmul>
 8002142:	f8c8 0038 	str.w	r0, [r8, #56]	; 0x38
      if (bit_istrue(axis_words,bit(idx)) ) {
 8002146:	9b08      	ldr	r3, [sp, #32]
 8002148:	0799      	lsls	r1, r3, #30
 800214a:	d506      	bpl.n	800215a <gc_execute_line+0x916>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 800214c:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 8002150:	4975      	ldr	r1, [pc, #468]	; (8002328 <gc_execute_line+0xae4>)
 8002152:	f7fe fb9f 	bl	8000894 <__aeabi_fmul>
 8002156:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
      if (bit_istrue(axis_words,bit(idx)) ) {
 800215a:	9b08      	ldr	r3, [sp, #32]
 800215c:	075a      	lsls	r2, r3, #29
 800215e:	d506      	bpl.n	800216e <gc_execute_line+0x92a>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 8002160:	f8d8 0040 	ldr.w	r0, [r8, #64]	; 0x40
 8002164:	4970      	ldr	r1, [pc, #448]	; (8002328 <gc_execute_line+0xae4>)
 8002166:	f7fe fb95 	bl	8000894 <__aeabi_fmul>
 800216a:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
      if (bit_istrue(axis_words,bit(idx)) ) {
 800216e:	9b08      	ldr	r3, [sp, #32]
 8002170:	071b      	lsls	r3, r3, #28
 8002172:	f57f ae77 	bpl.w	8001e64 <gc_execute_line+0x620>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 8002176:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
 800217a:	496b      	ldr	r1, [pc, #428]	; (8002328 <gc_execute_line+0xae4>)
 800217c:	f7fe fb8a 	bl	8000894 <__aeabi_fmul>
 8002180:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
    for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 8002184:	e66e      	b.n	8001e64 <gc_execute_line+0x620>
  switch (gc_block.modal.plane_select) {
 8002186:	2601      	movs	r6, #1
      axis_linear = Z_AXIS;
 8002188:	2302      	movs	r3, #2
  switch (gc_block.modal.plane_select) {
 800218a:	2703      	movs	r7, #3
 800218c:	46ca      	mov	sl, r9
      axis_1 = Y_AXIS;
 800218e:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
 8002192:	e662      	b.n	8001e5a <gc_execute_line+0x616>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS) }; // [No axis words]
 8002194:	9b08      	ldr	r3, [sp, #32]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 81e2 	beq.w	8002560 <gc_execute_line+0xd1c>
      if (bit_isfalse(value_words,((1<<WORD_P)|(1<<WORD_L)))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P/L word missing]
 800219c:	f015 0f50 	tst.w	r5, #80	; 0x50
 80021a0:	f000 81e1 	beq.w	8002566 <gc_execute_line+0xd22>
      coord_select = truncf(gc_block.values.p); // Convert p value to int.
 80021a4:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 80021a8:	f7fe fd76 	bl	8000c98 <__aeabi_f2uiz>
 80021ac:	b2c3      	uxtb	r3, r0
      if (coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 80021ae:	2b06      	cmp	r3, #6
 80021b0:	f200 80b7 	bhi.w	8002322 <gc_execute_line+0xade>
      if (gc_block.values.l != 20) {
 80021b4:	f898 2020 	ldrb.w	r2, [r8, #32]
 80021b8:	2a14      	cmp	r2, #20
 80021ba:	d005      	beq.n	80021c8 <gc_execute_line+0x984>
        if (gc_block.values.l == 2) {
 80021bc:	2a02      	cmp	r2, #2
 80021be:	f47f abc5 	bne.w	800194c <gc_execute_line+0x108>
          if (bit_istrue(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G10 L2 R not supported]
 80021c2:	0629      	lsls	r1, r5, #24
 80021c4:	f53f abc2 	bmi.w	800194c <gc_execute_line+0x108>
      bit_false(value_words,(bit(WORD_L)|bit(WORD_P)));
 80021c8:	f025 0550 	bic.w	r5, r5, #80	; 0x50
 80021cc:	b2ad      	uxth	r5, r5
      if (coord_select > 0) { coord_select--; } // Adjust P1-P6 index to EEPROM coordinate data indexing.
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 83af 	beq.w	8002932 <gc_execute_line+0x10ee>
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	4618      	mov	r0, r3
 80021da:	930e      	str	r3, [sp, #56]	; 0x38
      if (!settings_read_coord_data(coord_select,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); } // [EEPROM read fail]
 80021dc:	4953      	ldr	r1, [pc, #332]	; (800232c <gc_execute_line+0xae8>)
 80021de:	f004 fb11 	bl	8006804 <settings_read_coord_data>
 80021e2:	2800      	cmp	r0, #0
 80021e4:	f000 82b4 	beq.w	8002750 <gc_execute_line+0xf0c>
 80021e8:	f898 3020 	ldrb.w	r3, [r8, #32]
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 80021ec:	4a50      	ldr	r2, [pc, #320]	; (8002330 <gc_execute_line+0xaec>)
 80021ee:	2b14      	cmp	r3, #20
 80021f0:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
        if (bit_istrue(axis_words,bit(idx)) ) {
 80021f2:	9b08      	ldr	r3, [sp, #32]
 80021f4:	f000 840e 	beq.w	8002a14 <gc_execute_line+0x11d0>
 80021f8:	07da      	lsls	r2, r3, #31
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 80021fa:	bf44      	itt	mi
 80021fc:	f8d8 3038 	ldrmi.w	r3, [r8, #56]	; 0x38
 8002200:	f8c8 3010 	strmi.w	r3, [r8, #16]
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002204:	9b08      	ldr	r3, [sp, #32]
 8002206:	079b      	lsls	r3, r3, #30
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 8002208:	bf44      	itt	mi
 800220a:	f8d8 303c 	ldrmi.w	r3, [r8, #60]	; 0x3c
 800220e:	f8c8 3014 	strmi.w	r3, [r8, #20]
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002212:	9b08      	ldr	r3, [sp, #32]
 8002214:	075c      	lsls	r4, r3, #29
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 8002216:	bf44      	itt	mi
 8002218:	f8d8 3040 	ldrmi.w	r3, [r8, #64]	; 0x40
 800221c:	f8c8 3018 	strmi.w	r3, [r8, #24]
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002220:	9b08      	ldr	r3, [sp, #32]
 8002222:	0718      	lsls	r0, r3, #28
 8002224:	d503      	bpl.n	800222e <gc_execute_line+0x9ea>
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 8002226:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800222a:	f8c8 301c 	str.w	r3, [r8, #28]
  if (gc_block.modal.motion == MOTION_MODE_NONE) {
 800222e:	f898 4001 	ldrb.w	r4, [r8, #1]
 8002232:	2c50      	cmp	r4, #80	; 0x50
 8002234:	f000 83c4 	beq.w	80029c0 <gc_execute_line+0x117c>
  } else if ( axis_command == AXIS_COMMAND_MOTION_MODE ) {
 8002238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800223a:	2b02      	cmp	r3, #2
 800223c:	f000 81a4 	beq.w	8002588 <gc_execute_line+0xd44>
      switch (gc_block.modal.motion) {
 8002240:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002242:	e687      	b.n	8001f54 <gc_execute_line+0x710>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8002244:	9b08      	ldr	r3, [sp, #32]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 818a 	beq.w	8002560 <gc_execute_line+0xd1c>
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 800224c:	4a38      	ldr	r2, [pc, #224]	; (8002330 <gc_execute_line+0xaec>)
        if (bit_istrue(axis_words,bit(idx)) ) {
 800224e:	07d9      	lsls	r1, r3, #31
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 8002250:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002252:	f140 8257 	bpl.w	8002704 <gc_execute_line+0xec0>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 8002256:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 800225a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800225c:	f7fe fa12 	bl	8000684 <__addsf3>
 8002260:	4b33      	ldr	r3, [pc, #204]	; (8002330 <gc_execute_line+0xaec>)
 8002262:	4601      	mov	r1, r0
 8002264:	69d8      	ldr	r0, [r3, #28]
 8002266:	f7fe fa0b 	bl	8000680 <__aeabi_fsub>
 800226a:	f8c8 0038 	str.w	r0, [r8, #56]	; 0x38
        if (bit_istrue(axis_words,bit(idx)) ) {
 800226e:	9b08      	ldr	r3, [sp, #32]
 8002270:	079a      	lsls	r2, r3, #30
 8002272:	f140 828e 	bpl.w	8002792 <gc_execute_line+0xf4e>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 8002276:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 800227a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800227c:	f7fe fa02 	bl	8000684 <__addsf3>
 8002280:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <gc_execute_line+0xaec>)
 8002282:	4601      	mov	r1, r0
 8002284:	6a18      	ldr	r0, [r3, #32]
 8002286:	f7fe f9fb 	bl	8000680 <__aeabi_fsub>
 800228a:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
        if (bit_istrue(axis_words,bit(idx)) ) {
 800228e:	9b08      	ldr	r3, [sp, #32]
 8002290:	075b      	lsls	r3, r3, #29
 8002292:	f140 8232 	bpl.w	80026fa <gc_execute_line+0xeb6>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 8002296:	f8d8 0040 	ldr.w	r0, [r8, #64]	; 0x40
 800229a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800229c:	f7fe f9f2 	bl	8000684 <__addsf3>
 80022a0:	4b23      	ldr	r3, [pc, #140]	; (8002330 <gc_execute_line+0xaec>)
 80022a2:	4601      	mov	r1, r0
 80022a4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80022a6:	f7fe f9eb 	bl	8000680 <__aeabi_fsub>
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 80022aa:	4621      	mov	r1, r4
 80022ac:	f7fe f9e8 	bl	8000680 <__aeabi_fsub>
 80022b0:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
        if (bit_istrue(axis_words,bit(idx)) ) {
 80022b4:	9b08      	ldr	r3, [sp, #32]
 80022b6:	071c      	lsls	r4, r3, #28
 80022b8:	f140 82b6 	bpl.w	8002828 <gc_execute_line+0xfe4>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 80022bc:	f8d8 1044 	ldr.w	r1, [r8, #68]	; 0x44
 80022c0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80022c2:	f7fe f9df 	bl	8000684 <__addsf3>
 80022c6:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <gc_execute_line+0xaec>)
 80022c8:	4601      	mov	r1, r0
 80022ca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80022cc:	f7fe f9d8 	bl	8000680 <__aeabi_fsub>
 80022d0:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 80022d4:	2300      	movs	r3, #0
 80022d6:	930e      	str	r3, [sp, #56]	; 0x38
 80022d8:	e7a9      	b.n	800222e <gc_execute_line+0x9ea>
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F) | bit(WORD_S) | bit(WORD_T))); // Remove single-meaning value words.
 80022da:	4b16      	ldr	r3, [pc, #88]	; (8002334 <gc_execute_line+0xaf0>)
 80022dc:	401d      	ands	r5, r3
 80022de:	e63f      	b.n	8001f60 <gc_execute_line+0x71c>
 80022e0:	2300      	movs	r3, #0
 80022e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80022e4:	e59c      	b.n	8001e20 <gc_execute_line+0x5dc>
          if (value < 0.0) { FAIL(STATUS_NEGATIVE_VALUE); } // [Word value cannot be negative]
 80022e6:	2404      	movs	r4, #4
 80022e8:	f7ff bb31 	b.w	800194e <gc_execute_line+0x10a>
    if (gc_block.modal.feed_rate == FEED_RATE_MODE_INVERSE_TIME) { // = G93
 80022ec:	f898 2002 	ldrb.w	r2, [r8, #2]
 80022f0:	2a01      	cmp	r2, #1
 80022f2:	f000 8278 	beq.w	80027e6 <gc_execute_line+0xfa2>
 80022f6:	4655      	mov	r5, sl
 80022f8:	e9cd aa09 	strd	sl, sl, [sp, #36]	; 0x24
 80022fc:	f8cd a020 	str.w	sl, [sp, #32]
 8002300:	f8cd a01c 	str.w	sl, [sp, #28]
 8002304:	e6c4      	b.n	8002090 <gc_execute_line+0x84c>
  if (value_words) { FAIL(STATUS_GCODE_UNUSED_WORDS); } // [Unused words]
 8002306:	2424      	movs	r4, #36	; 0x24
 8002308:	f7ff bb21 	b.w	800194e <gc_execute_line+0x10a>
      if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 800230c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800230e:	2b02      	cmp	r3, #2
 8002310:	f43f aed0 	beq.w	80020b4 <gc_execute_line+0x870>
 8002314:	f8dd a020 	ldr.w	sl, [sp, #32]
 8002318:	2300      	movs	r3, #0
 800231a:	f8cd a020 	str.w	sl, [sp, #32]
 800231e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002320:	e57e      	b.n	8001e20 <gc_execute_line+0x5dc>
    if (gc_block.modal.coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 8002322:	241d      	movs	r4, #29
 8002324:	f7ff bb13 	b.w	800194e <gc_execute_line+0x10a>
 8002328:	41cb3333 	.word	0x41cb3333
 800232c:	20000948 	.word	0x20000948
 8002330:	20000980 	.word	0x20000980
 8002334:	fffffcde 	.word	0xfffffcde
  if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8002338:	4b8c      	ldr	r3, [pc, #560]	; (800256c <gc_execute_line+0xd28>)
 800233a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800233e:	0798      	lsls	r0, r3, #30
 8002340:	f100 8239 	bmi.w	80027b6 <gc_execute_line+0xf72>
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8002344:	4b8a      	ldr	r3, [pc, #552]	; (8002570 <gc_execute_line+0xd2c>)
 8002346:	7a5c      	ldrb	r4, [r3, #9]
 8002348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800234a:	f003 0540 	and.w	r5, r3, #64	; 0x40
  gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 800234e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8002352:	4a87      	ldr	r2, [pc, #540]	; (8002570 <gc_execute_line+0xd2c>)
  if (gc_state.modal.feed_rate) { pl_data->condition |= PL_COND_FLAG_INVERSE_TIME; } // Set condition flag for planner use.
 8002354:	2b00      	cmp	r3, #0
  gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 8002356:	7053      	strb	r3, [r2, #1]
  if (gc_state.modal.feed_rate) { pl_data->condition |= PL_COND_FLAG_INVERSE_TIME; } // Set condition flag for planner use.
 8002358:	bf18      	it	ne
 800235a:	2308      	movne	r3, #8
 800235c:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
  gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 8002360:	f8d8 300c 	ldr.w	r3, [r8, #12]
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC)) {
 8002364:	68d6      	ldr	r6, [r2, #12]
 8002366:	f8d8 7030 	ldr.w	r7, [r8, #48]	; 0x30
  gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 800236a:	6113      	str	r3, [r2, #16]
  pl_data->feed_rate = gc_state.feed_rate; // Record data for planner use.
 800236c:	9315      	str	r3, [sp, #84]	; 0x54
  gc_state.line_number = gc_block.values.n;
 800236e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC)) {
 8002372:	4639      	mov	r1, r7
 8002374:	4630      	mov	r0, r6
  gc_state.line_number = gc_block.values.n;
 8002376:	6193      	str	r3, [r2, #24]
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC)) {
 8002378:	f7fe fc20 	bl	8000bbc <__aeabi_fcmpeq>
 800237c:	2800      	cmp	r0, #0
 800237e:	f000 81cd 	beq.w	800271c <gc_execute_line+0xed8>
 8002382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002384:	069b      	lsls	r3, r3, #26
 8002386:	f100 81c9 	bmi.w	800271c <gc_execute_line+0xed8>
 800238a:	4637      	mov	r7, r6
 800238c:	b2ee      	uxtb	r6, r5
  if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 800238e:	2e00      	cmp	r6, #0
 8002390:	f000 820f 	beq.w	80027b2 <gc_execute_line+0xf6e>
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 8002394:	f898 000a 	ldrb.w	r0, [r8, #10]
  gc_state.tool = gc_block.values.t;
 8002398:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 800239c:	4d74      	ldr	r5, [pc, #464]	; (8002570 <gc_execute_line+0xd2c>)
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 800239e:	42a0      	cmp	r0, r4
  gc_state.tool = gc_block.values.t;
 80023a0:	752b      	strb	r3, [r5, #20]
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 80023a2:	d005      	beq.n	80023b0 <gc_execute_line+0xb6c>
    spindle_sync(gc_block.modal.spindle, pl_data->spindle_speed);
 80023a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80023a6:	f004 fd4b 	bl	8006e40 <spindle_sync>
    gc_state.modal.spindle = gc_block.modal.spindle;
 80023aa:	f898 400a 	ldrb.w	r4, [r8, #10]
 80023ae:	726c      	strb	r4, [r5, #9]
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 80023b0:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 80023b4:	f898 0009 	ldrb.w	r0, [r8, #9]
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 80023b8:	431c      	orrs	r4, r3
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 80023ba:	4b6d      	ldr	r3, [pc, #436]	; (8002570 <gc_execute_line+0xd2c>)
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 80023bc:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 80023c0:	7a1b      	ldrb	r3, [r3, #8]
 80023c2:	4283      	cmp	r3, r0
 80023c4:	f000 81a8 	beq.w	8002718 <gc_execute_line+0xed4>
    coolant_sync(gc_block.modal.coolant);
 80023c8:	f7ff f956 	bl	8001678 <coolant_sync>
    if (gc_block.modal.coolant == COOLANT_DISABLE) { gc_state.modal.coolant = COOLANT_DISABLE; }
 80023cc:	f898 3009 	ldrb.w	r3, [r8, #9]
 80023d0:	4a67      	ldr	r2, [pc, #412]	; (8002570 <gc_execute_line+0xd2c>)
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f040 819b 	bne.w	800270e <gc_execute_line+0xeca>
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 80023d8:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
    if (gc_block.modal.coolant == COOLANT_DISABLE) { gc_state.modal.coolant = COOLANT_DISABLE; }
 80023dc:	7213      	strb	r3, [r2, #8]
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 80023de:	f898 3000 	ldrb.w	r3, [r8]
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 80023e2:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	f000 8308 	beq.w	80029fc <gc_execute_line+0x11b8>
  gc_state.modal.plane_select = gc_block.modal.plane_select;
 80023ec:	f898 3005 	ldrb.w	r3, [r8, #5]
 80023f0:	4a5f      	ldr	r2, [pc, #380]	; (8002570 <gc_execute_line+0xd2c>)
 80023f2:	7113      	strb	r3, [r2, #4]
  gc_state.modal.units = gc_block.modal.units;
 80023f4:	f898 3003 	ldrb.w	r3, [r8, #3]
 80023f8:	7093      	strb	r3, [r2, #2]
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates a change.
 80023fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	f000 8218 	beq.w	8002832 <gc_execute_line+0xfee>
  if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 8002402:	495b      	ldr	r1, [pc, #364]	; (8002570 <gc_execute_line+0xd2c>)
 8002404:	f898 3007 	ldrb.w	r3, [r8, #7]
 8002408:	798a      	ldrb	r2, [r1, #6]
 800240a:	429a      	cmp	r2, r3
 800240c:	d007      	beq.n	800241e <gc_execute_line+0xbda>
    memcpy(gc_state.coord_system,block_coord_system,N_AXIS*sizeof(float));
 800240e:	4c59      	ldr	r4, [pc, #356]	; (8002574 <gc_execute_line+0xd30>)
    gc_state.modal.coord_select = gc_block.modal.coord_select;
 8002410:	718b      	strb	r3, [r1, #6]
    memcpy(gc_state.coord_system,block_coord_system,N_AXIS*sizeof(float));
 8002412:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8002416:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    system_flag_wco_change();
 800241a:	f006 f847 	bl	80084ac <system_flag_wco_change>
  gc_state.modal.distance = gc_block.modal.distance;
 800241e:	f898 3004 	ldrb.w	r3, [r8, #4]
 8002422:	4a53      	ldr	r2, [pc, #332]	; (8002570 <gc_execute_line+0xd2c>)
 8002424:	70d3      	strb	r3, [r2, #3]
  switch(gc_block.non_modal_command) {
 8002426:	f898 3000 	ldrb.w	r3, [r8]
 800242a:	2b28      	cmp	r3, #40	; 0x28
 800242c:	d816      	bhi.n	800245c <gc_execute_line+0xc18>
 800242e:	2b09      	cmp	r3, #9
 8002430:	d923      	bls.n	800247a <gc_execute_line+0xc36>
 8002432:	3b0a      	subs	r3, #10
 8002434:	2b1e      	cmp	r3, #30
 8002436:	d820      	bhi.n	800247a <gc_execute_line+0xc36>
 8002438:	e8df f003 	tbb	[pc, r3]
 800243c:	1f1f1f76 	.word	0x1f1f1f76
 8002440:	1f1f1f1f 	.word	0x1f1f1f1f
 8002444:	1f1f1f1f 	.word	0x1f1f1f1f
 8002448:	1f1f1f1f 	.word	0x1f1f1f1f
 800244c:	1f611f1f 	.word	0x1f611f1f
 8002450:	1f1f1f61 	.word	0x1f1f1f61
 8002454:	1f1f1f1f 	.word	0x1f1f1f1f
 8002458:	1f8d      	.short	0x1f8d
 800245a:	88          	.byte	0x88
 800245b:	00          	.byte	0x00
 800245c:	2b5c      	cmp	r3, #92	; 0x5c
 800245e:	f000 831d 	beq.w	8002a9c <gc_execute_line+0x1258>
 8002462:	2b66      	cmp	r3, #102	; 0x66
 8002464:	d109      	bne.n	800247a <gc_execute_line+0xc36>
      clear_vector(gc_state.coord_offset); // Disable G92 offsets by zeroing offset vector.
 8002466:	2300      	movs	r3, #0
 8002468:	4a43      	ldr	r2, [pc, #268]	; (8002578 <gc_execute_line+0xd34>)
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	e9c2 3301 	strd	r3, r3, [r2, #4]
 8002470:	60d3      	str	r3, [r2, #12]
 8002472:	f1a2 013c 	sub.w	r1, r2, #60	; 0x3c
      system_flag_wco_change();
 8002476:	f006 f819 	bl	80084ac <system_flag_wco_change>
  gc_state.modal.motion = gc_block.modal.motion;
 800247a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800247e:	4a3c      	ldr	r2, [pc, #240]	; (8002570 <gc_execute_line+0xd2c>)
  if (gc_state.modal.motion != MOTION_MODE_NONE) {
 8002480:	2b50      	cmp	r3, #80	; 0x50
  gc_state.modal.motion = gc_block.modal.motion;
 8002482:	7013      	strb	r3, [r2, #0]
  if (gc_state.modal.motion != MOTION_MODE_NONE) {
 8002484:	d003      	beq.n	800248e <gc_execute_line+0xc4a>
    if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 8002486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002488:	2a02      	cmp	r2, #2
 800248a:	f000 8257 	beq.w	800293c <gc_execute_line+0x10f8>
  gc_state.modal.program_flow = gc_block.modal.program_flow;
 800248e:	f898 4008 	ldrb.w	r4, [r8, #8]
 8002492:	4b37      	ldr	r3, [pc, #220]	; (8002570 <gc_execute_line+0xd2c>)
 8002494:	71dc      	strb	r4, [r3, #7]
  if (gc_state.modal.program_flow) {
 8002496:	2c00      	cmp	r4, #0
 8002498:	f43f aa59 	beq.w	800194e <gc_execute_line+0x10a>
    protocol_buffer_synchronize(); // Sync and finish all remaining buffered motions before moving on.
 800249c:	f003 f8ea 	bl	8005674 <protocol_buffer_synchronize>
    if (gc_state.modal.program_flow == PROGRAM_FLOW_PAUSED) {
 80024a0:	4b33      	ldr	r3, [pc, #204]	; (8002570 <gc_execute_line+0xd2c>)
 80024a2:	79db      	ldrb	r3, [r3, #7]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	f000 834e 	beq.w	8002b46 <gc_execute_line+0x1302>
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 80024aa:	f246 4064 	movw	r0, #25700	; 0x6464
        sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE;
 80024ae:	2264      	movs	r2, #100	; 0x64
      gc_state.modal.distance = DISTANCE_MODE_ABSOLUTE;
 80024b0:	2400      	movs	r4, #0
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 80024b2:	2101      	movs	r1, #1
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 80024b4:	4b31      	ldr	r3, [pc, #196]	; (800257c <gc_execute_line+0xd38>)
 80024b6:	8118      	strh	r0, [r3, #8]
        sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE;
 80024b8:	729a      	strb	r2, [r3, #10]
      if (sys.state != STATE_CHECK_MODE) {
 80024ba:	781b      	ldrb	r3, [r3, #0]
      gc_state.modal.distance = DISTANCE_MODE_ABSOLUTE;
 80024bc:	482c      	ldr	r0, [pc, #176]	; (8002570 <gc_execute_line+0xd2c>)
      if (sys.state != STATE_CHECK_MODE) {
 80024be:	2b02      	cmp	r3, #2
      gc_state.modal.distance = DISTANCE_MODE_ABSOLUTE;
 80024c0:	f8a0 4003 	strh.w	r4, [r0, #3]
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 80024c4:	8001      	strh	r1, [r0, #0]
      gc_state.modal.coord_select = 0; // G54
 80024c6:	7184      	strb	r4, [r0, #6]
      gc_state.modal.coolant = COOLANT_DISABLE;
 80024c8:	8104      	strh	r4, [r0, #8]
      if (sys.state != STATE_CHECK_MODE) {
 80024ca:	d00f      	beq.n	80024ec <gc_execute_line+0xca8>
        if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 80024cc:	4620      	mov	r0, r4
 80024ce:	4929      	ldr	r1, [pc, #164]	; (8002574 <gc_execute_line+0xd30>)
 80024d0:	f004 f998 	bl	8006804 <settings_read_coord_data>
 80024d4:	2800      	cmp	r0, #0
 80024d6:	f000 813b 	beq.w	8002750 <gc_execute_line+0xf0c>
        system_flag_wco_change(); // Set to refresh immediately just in case something altered.
 80024da:	f005 ffe7 	bl	80084ac <system_flag_wco_change>
        spindle_set_state(SPINDLE_DISABLE,0.0f);
 80024de:	4620      	mov	r0, r4
 80024e0:	2100      	movs	r1, #0
 80024e2:	f004 fc21 	bl	8006d28 <spindle_set_state>
        coolant_set_state(COOLANT_DISABLE);
 80024e6:	4620      	mov	r0, r4
 80024e8:	f7ff f8a0 	bl	800162c <coolant_set_state>
      report_feedback_message(MESSAGE_PROGRAM_END);
 80024ec:	2008      	movs	r0, #8
 80024ee:	f003 f90b 	bl	8005708 <report_feedback_message>
    gc_state.modal.program_flow = PROGRAM_FLOW_RUNNING; // Reset program flow.
 80024f2:	2300      	movs	r3, #0
 80024f4:	4a1e      	ldr	r2, [pc, #120]	; (8002570 <gc_execute_line+0xd2c>)
  return(STATUS_OK);
 80024f6:	461c      	mov	r4, r3
    gc_state.modal.program_flow = PROGRAM_FLOW_RUNNING; // Reset program flow.
 80024f8:	71d3      	strb	r3, [r2, #7]
 80024fa:	f7ff ba28 	b.w	800194e <gc_execute_line+0x10a>
      pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 80024fe:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
      if (axis_command) { mc_line(gc_block.values.xyz, pl_data); }
 800250a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800250c:	2b00      	cmp	r3, #0
 800250e:	f040 8325 	bne.w	8002b5c <gc_execute_line+0x1318>
      mc_line(gc_block.values.ijk, pl_data);
 8002512:	4d1b      	ldr	r5, [pc, #108]	; (8002580 <gc_execute_line+0xd3c>)
      memcpy(gc_state.position, gc_block.values.ijk, N_AXIS*sizeof(float));
 8002514:	4c1b      	ldr	r4, [pc, #108]	; (8002584 <gc_execute_line+0xd40>)
      mc_line(gc_block.values.ijk, pl_data);
 8002516:	4628      	mov	r0, r5
 8002518:	a915      	add	r1, sp, #84	; 0x54
 800251a:	f000 ffff 	bl	800351c <mc_line>
      memcpy(gc_state.position, gc_block.values.ijk, N_AXIS*sizeof(float));
 800251e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002522:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      break;
 8002526:	e7a8      	b.n	800247a <gc_execute_line+0xc36>
      settings_write_coord_data(coord_select,gc_block.values.ijk);
 8002528:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800252a:	4c15      	ldr	r4, [pc, #84]	; (8002580 <gc_execute_line+0xd3c>)
 800252c:	4628      	mov	r0, r5
 800252e:	4621      	mov	r1, r4
 8002530:	f004 f88e 	bl	8006650 <settings_write_coord_data>
      if (gc_state.modal.coord_select == coord_select) {
 8002534:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <gc_execute_line+0xd2c>)
 8002536:	799b      	ldrb	r3, [r3, #6]
 8002538:	42ab      	cmp	r3, r5
 800253a:	d19e      	bne.n	800247a <gc_execute_line+0xc36>
        memcpy(gc_state.coord_system,gc_block.values.ijk,N_AXIS*sizeof(float));
 800253c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002540:	4c0c      	ldr	r4, [pc, #48]	; (8002574 <gc_execute_line+0xd30>)
 8002542:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        system_flag_wco_change();
 8002546:	f005 ffb1 	bl	80084ac <system_flag_wco_change>
 800254a:	e796      	b.n	800247a <gc_execute_line+0xc36>
      settings_write_coord_data(SETTING_INDEX_G30,gc_state.position);
 800254c:	2007      	movs	r0, #7
 800254e:	490d      	ldr	r1, [pc, #52]	; (8002584 <gc_execute_line+0xd40>)
 8002550:	f004 f87e 	bl	8006650 <settings_write_coord_data>
      break;
 8002554:	e791      	b.n	800247a <gc_execute_line+0xc36>
      settings_write_coord_data(SETTING_INDEX_G28,gc_state.position);
 8002556:	2006      	movs	r0, #6
 8002558:	490a      	ldr	r1, [pc, #40]	; (8002584 <gc_execute_line+0xd40>)
 800255a:	f004 f879 	bl	8006650 <settings_write_coord_data>
      break;
 800255e:	e78c      	b.n	800247a <gc_execute_line+0xc36>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS) }; // [No axis words]
 8002560:	241a      	movs	r4, #26
 8002562:	f7ff b9f4 	b.w	800194e <gc_execute_line+0x10a>
    if (bit_isfalse(value_words,bit(WORD_P))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P word missing]
 8002566:	241c      	movs	r4, #28
 8002568:	f7ff b9f1 	b.w	800194e <gc_execute_line+0x10a>
 800256c:	200013ec 	.word	0x200013ec
 8002570:	20000980 	.word	0x20000980
 8002574:	200009ac 	.word	0x200009ac
 8002578:	200009bc 	.word	0x200009bc
 800257c:	200009d0 	.word	0x200009d0
 8002580:	20000948 	.word	0x20000948
 8002584:	2000099c 	.word	0x2000099c
    if (gc_block.modal.motion == MOTION_MODE_SEEK) {
 8002588:	2c00      	cmp	r4, #0
 800258a:	f000 8144 	beq.w	8002816 <gc_execute_line+0xfd2>
      if (gc_block.values.f == 0.0f) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [Feed rate undefined]
 800258e:	2100      	movs	r1, #0
 8002590:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8002594:	f7fe fb12 	bl	8000bbc <__aeabi_fcmpeq>
 8002598:	2800      	cmp	r0, #0
 800259a:	f47f ad96 	bne.w	80020ca <gc_execute_line+0x886>
      switch (gc_block.modal.motion) {
 800259e:	2c03      	cmp	r4, #3
 80025a0:	d00b      	beq.n	80025ba <gc_execute_line+0xd76>
 80025a2:	f200 8199 	bhi.w	80028d8 <gc_execute_line+0x1094>
 80025a6:	2c01      	cmp	r4, #1
 80025a8:	f000 8135 	beq.w	8002816 <gc_execute_line+0xfd2>
 80025ac:	2c02      	cmp	r4, #2
 80025ae:	f47f ae47 	bne.w	8002240 <gc_execute_line+0x9fc>
          gc_parser_flags |= GC_PARSER_ARC_IS_CLOCKWISE; // No break intentional.
 80025b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80025b4:	f043 0304 	orr.w	r3, r3, #4
 80025b8:	930b      	str	r3, [sp, #44]	; 0x2c
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 80025ba:	9b08      	ldr	r3, [sp, #32]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0cf      	beq.n	8002560 <gc_execute_line+0xd1c>
          if (!(axis_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE); } // [No axis words in plane]
 80025c0:	423b      	tst	r3, r7
 80025c2:	f000 8350 	beq.w	8002c66 <gc_execute_line+0x1422>
          x = gc_block.values.xyz[axis_0]-gc_state.position[axis_0]; // Delta x between current position and target
 80025c6:	4ca5      	ldr	r4, [pc, #660]	; (800285c <gc_execute_line+0x1018>)
 80025c8:	eb08 038a 	add.w	r3, r8, sl, lsl #2
 80025cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80025ce:	eb04 038a 	add.w	r3, r4, sl, lsl #2
 80025d2:	69d9      	ldr	r1, [r3, #28]
 80025d4:	f7fe f854 	bl	8000680 <__aeabi_fsub>
 80025d8:	4603      	mov	r3, r0
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 80025da:	eb08 0286 	add.w	r2, r8, r6, lsl #2
 80025de:	6b90      	ldr	r0, [r2, #56]	; 0x38
 80025e0:	eb04 0286 	add.w	r2, r4, r6, lsl #2
 80025e4:	69d1      	ldr	r1, [r2, #28]
          x = gc_block.values.xyz[axis_0]-gc_state.position[axis_0]; // Delta x between current position and target
 80025e6:	930f      	str	r3, [sp, #60]	; 0x3c
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 80025e8:	f7fe f84a 	bl	8000680 <__aeabi_fsub>
          if (value_words & bit(WORD_R)) { // Arc Radius Mode
 80025ec:	f015 0380 	ands.w	r3, r5, #128	; 0x80
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 80025f0:	4604      	mov	r4, r0
          if (value_words & bit(WORD_R)) { // Arc Radius Mode
 80025f2:	f000 82ef 	beq.w	8002bd4 <gc_execute_line+0x1390>
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 80025f6:	2210      	movs	r2, #16
 80025f8:	4999      	ldr	r1, [pc, #612]	; (8002860 <gc_execute_line+0x101c>)
 80025fa:	489a      	ldr	r0, [pc, #616]	; (8002864 <gc_execute_line+0x1020>)
 80025fc:	f007 fa7e 	bl	8009afc <memcmp>
 8002600:	2800      	cmp	r0, #0
 8002602:	f000 832a 	beq.w	8002c5a <gc_execute_line+0x1416>
            if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.r *= MM_PER_INCH; }
 8002606:	f898 3003 	ldrb.w	r3, [r8, #3]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d106      	bne.n	800261c <gc_execute_line+0xdd8>
 800260e:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 8002612:	4995      	ldr	r1, [pc, #596]	; (8002868 <gc_execute_line+0x1024>)
 8002614:	f7fe f93e 	bl	8000894 <__aeabi_fmul>
 8002618:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
            float h_x2_div_d = 4.0f * gc_block.values.r*gc_block.values.r - x*x - y*y;
 800261c:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 8002620:	4608      	mov	r0, r1
 8002622:	f7fe f937 	bl	8000894 <__aeabi_fmul>
 8002626:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800262a:	f7fe f933 	bl	8000894 <__aeabi_fmul>
 800262e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002630:	4607      	mov	r7, r0
 8002632:	4608      	mov	r0, r1
 8002634:	f7fe f92e 	bl	8000894 <__aeabi_fmul>
 8002638:	4603      	mov	r3, r0
 800263a:	4621      	mov	r1, r4
 800263c:	4620      	mov	r0, r4
 800263e:	930a      	str	r3, [sp, #40]	; 0x28
 8002640:	f7fe f928 	bl	8000894 <__aeabi_fmul>
 8002644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002646:	4601      	mov	r1, r0
 8002648:	4618      	mov	r0, r3
 800264a:	f7fe f81b 	bl	8000684 <__addsf3>
 800264e:	4601      	mov	r1, r0
 8002650:	4638      	mov	r0, r7
 8002652:	f7fe f815 	bl	8000680 <__aeabi_fsub>
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8002656:	2100      	movs	r1, #0
            float h_x2_div_d = 4.0f * gc_block.values.r*gc_block.values.r - x*x - y*y;
 8002658:	4607      	mov	r7, r0
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 800265a:	f7fe fab9 	bl	8000bd0 <__aeabi_fcmplt>
 800265e:	2800      	cmp	r0, #0
 8002660:	f040 82fe 	bne.w	8002c60 <gc_execute_line+0x141c>
            h_x2_div_d = -sqrtf(h_x2_div_d)/hypot_f(x,y); // == -(h * 2 / d)
 8002664:	4638      	mov	r0, r7
 8002666:	f007 fbeb 	bl	8009e40 <sqrtf>
 800266a:	4621      	mov	r1, r4
 800266c:	4607      	mov	r7, r0
 800266e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002670:	f001 faea 	bl	8003c48 <hypot_f>
 8002674:	4601      	mov	r1, r0
 8002676:	f107 4000 	add.w	r0, r7, #2147483648	; 0x80000000
 800267a:	f7fe f9bf 	bl	80009fc <__aeabi_fdiv>
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 800267e:	f898 3001 	ldrb.w	r3, [r8, #1]
            h_x2_div_d = -sqrtf(h_x2_div_d)/hypot_f(x,y); // == -(h * 2 / d)
 8002682:	4607      	mov	r7, r0
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 8002684:	2b03      	cmp	r3, #3
            if (gc_block.values.r < 0) {
 8002686:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 800268a:	bf08      	it	eq
 800268c:	f100 4700 	addeq.w	r7, r0, #2147483648	; 0x80000000
            if (gc_block.values.r < 0) {
 8002690:	2100      	movs	r1, #0
 8002692:	4618      	mov	r0, r3
 8002694:	930a      	str	r3, [sp, #40]	; 0x28
 8002696:	f7fe fa9b 	bl	8000bd0 <__aeabi_fcmplt>
 800269a:	b130      	cbz	r0, 80026aa <gc_execute_line+0xe66>
                gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 800269c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                h_x2_div_d = -h_x2_div_d;
 800269e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
                gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 80026a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80026a6:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
            gc_block.values.ijk[axis_0] = 0.5f*(x-(y*h_x2_div_d));
 80026aa:	f10a 0302 	add.w	r3, sl, #2
 80026ae:	4621      	mov	r1, r4
 80026b0:	4638      	mov	r0, r7
 80026b2:	eb08 0a83 	add.w	sl, r8, r3, lsl #2
 80026b6:	f7fe f8ed 	bl	8000894 <__aeabi_fmul>
 80026ba:	4601      	mov	r1, r0
 80026bc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80026be:	f7fd ffdf 	bl	8000680 <__aeabi_fsub>
 80026c2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80026c6:	f7fe f8e5 	bl	8000894 <__aeabi_fmul>
            gc_block.values.ijk[axis_1] = 0.5f*(y+(x*h_x2_div_d));
 80026ca:	990f      	ldr	r1, [sp, #60]	; 0x3c
            gc_block.values.ijk[axis_0] = 0.5f*(x-(y*h_x2_div_d));
 80026cc:	f8ca 0008 	str.w	r0, [sl, #8]
            gc_block.values.ijk[axis_1] = 0.5f*(y+(x*h_x2_div_d));
 80026d0:	4638      	mov	r0, r7
 80026d2:	f7fe f8df 	bl	8000894 <__aeabi_fmul>
 80026d6:	4621      	mov	r1, r4
 80026d8:	f7fd ffd4 	bl	8000684 <__addsf3>
 80026dc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80026e0:	f7fe f8d8 	bl	8000894 <__aeabi_fmul>
 80026e4:	3602      	adds	r6, #2
 80026e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            bit_false(value_words,bit(WORD_R));
 80026e8:	f025 0580 	bic.w	r5, r5, #128	; 0x80
            gc_block.values.ijk[axis_1] = 0.5f*(y+(x*h_x2_div_d));
 80026ec:	eb08 0686 	add.w	r6, r8, r6, lsl #2
            bit_false(value_words,bit(WORD_R));
 80026f0:	b2ad      	uxth	r5, r5
            gc_block.values.ijk[axis_1] = 0.5f*(y+(x*h_x2_div_d));
 80026f2:	60b0      	str	r0, [r6, #8]
 80026f4:	f003 0201 	and.w	r2, r3, #1
 80026f8:	e42c      	b.n	8001f54 <gc_execute_line+0x710>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 80026fa:	4b58      	ldr	r3, [pc, #352]	; (800285c <gc_execute_line+0x1018>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
      for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 8002702:	e5d7      	b.n	80022b4 <gc_execute_line+0xa70>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 8002704:	4b55      	ldr	r3, [pc, #340]	; (800285c <gc_execute_line+0x1018>)
 8002706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002708:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
 800270c:	e5af      	b.n	800226e <gc_execute_line+0xa2a>
    else { gc_state.modal.coolant |= gc_block.modal.coolant; }
 800270e:	7a14      	ldrb	r4, [r2, #8]
 8002710:	431c      	orrs	r4, r3
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 8002712:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    else { gc_state.modal.coolant |= gc_block.modal.coolant; }
 8002716:	7214      	strb	r4, [r2, #8]
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 8002718:	431c      	orrs	r4, r3
 800271a:	e660      	b.n	80023de <gc_execute_line+0xb9a>
      if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 800271c:	2c00      	cmp	r4, #0
 800271e:	d03d      	beq.n	800279c <gc_execute_line+0xf58>
        if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_ISMOTION)) {
 8002720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002722:	061e      	lsls	r6, r3, #24
 8002724:	d43a      	bmi.n	800279c <gc_execute_line+0xf58>
          if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002726:	f005 06ff 	and.w	r6, r5, #255	; 0xff
 800272a:	2d00      	cmp	r5, #0
 800272c:	d038      	beq.n	80027a0 <gc_execute_line+0xf5c>
            spindle_sync(gc_state.modal.spindle, 0.0);
 800272e:	4620      	mov	r0, r4
 8002730:	2100      	movs	r1, #0
 8002732:	f004 fb85 	bl	8006e40 <spindle_sync>
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 8002736:	4b49      	ldr	r3, [pc, #292]	; (800285c <gc_execute_line+0x1018>)
      gc_state.spindle_speed = gc_block.values.s; // Update spindle speed state.
 8002738:	f8d8 7030 	ldr.w	r7, [r8, #48]	; 0x30
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 800273c:	7a5c      	ldrb	r4, [r3, #9]
      gc_state.spindle_speed = gc_block.values.s; // Update spindle speed state.
 800273e:	4b47      	ldr	r3, [pc, #284]	; (800285c <gc_execute_line+0x1018>)
 8002740:	60df      	str	r7, [r3, #12]
 8002742:	e624      	b.n	800238e <gc_execute_line+0xb4a>
            if (!settings_read_coord_data(SETTING_INDEX_G28,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 8002744:	2006      	movs	r0, #6
 8002746:	4949      	ldr	r1, [pc, #292]	; (800286c <gc_execute_line+0x1028>)
 8002748:	f004 f85c 	bl	8006804 <settings_read_coord_data>
 800274c:	2800      	cmp	r0, #0
 800274e:	d159      	bne.n	8002804 <gc_execute_line+0xfc0>
        if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 8002750:	2407      	movs	r4, #7
 8002752:	f7ff b8fc 	b.w	800194e <gc_execute_line+0x10a>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002756:	9b08      	ldr	r3, [sp, #32]
 8002758:	079a      	lsls	r2, r3, #30
 800275a:	f100 8140 	bmi.w	80029de <gc_execute_line+0x119a>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 800275e:	4b3f      	ldr	r3, [pc, #252]	; (800285c <gc_execute_line+0x1018>)
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002766:	9b08      	ldr	r3, [sp, #32]
 8002768:	075b      	lsls	r3, r3, #29
 800276a:	f140 813c 	bpl.w	80029e6 <gc_execute_line+0x11a2>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 800276e:	2c35      	cmp	r4, #53	; 0x35
 8002770:	f47f abc8 	bne.w	8001f04 <gc_execute_line+0x6c0>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002774:	9b08      	ldr	r3, [sp, #32]
 8002776:	071b      	lsls	r3, r3, #28
 8002778:	f140 811c 	bpl.w	80029b4 <gc_execute_line+0x1170>
          if (!(gc_block.modal.motion == MOTION_MODE_SEEK || gc_block.modal.motion == MOTION_MODE_LINEAR)) {
 800277c:	f898 4001 	ldrb.w	r4, [r8, #1]
 8002780:	2c01      	cmp	r4, #1
 8002782:	f200 8120 	bhi.w	80029c6 <gc_execute_line+0x1182>
  switch (gc_block.modal.plane_select) {
 8002786:	2300      	movs	r3, #0
 8002788:	930e      	str	r3, [sp, #56]	; 0x38
 800278a:	e555      	b.n	8002238 <gc_execute_line+0x9f4>
              if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 800278c:	2418      	movs	r4, #24
 800278e:	f7ff b8de 	b.w	800194e <gc_execute_line+0x10a>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 8002792:	4b32      	ldr	r3, [pc, #200]	; (800285c <gc_execute_line+0x1018>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
 800279a:	e578      	b.n	800228e <gc_execute_line+0xa4a>
 800279c:	b2ee      	uxtb	r6, r5
 800279e:	e7ce      	b.n	800273e <gc_execute_line+0xefa>
        	  spindle_sync(gc_state.modal.spindle, gc_block.values.s); }
 80027a0:	4639      	mov	r1, r7
 80027a2:	4620      	mov	r0, r4
 80027a4:	f004 fb4c 	bl	8006e40 <spindle_sync>
      gc_state.spindle_speed = gc_block.values.s; // Update spindle speed state.
 80027a8:	4b2c      	ldr	r3, [pc, #176]	; (800285c <gc_execute_line+0x1018>)
 80027aa:	f8d8 7030 	ldr.w	r7, [r8, #48]	; 0x30
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 80027ae:	7a5c      	ldrb	r4, [r3, #9]
      gc_state.spindle_speed = gc_block.values.s; // Update spindle speed state.
 80027b0:	60df      	str	r7, [r3, #12]
      pl_data->spindle_speed = gc_state.spindle_speed; // Record data for planner use. 
 80027b2:	9716      	str	r7, [sp, #88]	; 0x58
 80027b4:	e5ee      	b.n	8002394 <gc_execute_line+0xb50>
      if (!((gc_block.modal.motion == MOTION_MODE_LINEAR) || (gc_block.modal.motion == MOTION_MODE_CW_ARC)
 80027b6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d903      	bls.n	80027c8 <gc_execute_line+0xf84>
          gc_parser_flags |= GC_PARSER_LASER_DISABLE;
 80027c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80027c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027c6:	930b      	str	r3, [sp, #44]	; 0x2c
      if (axis_words && (axis_command == AXIS_COMMAND_MOTION_MODE)) {
 80027c8:	9b08      	ldr	r3, [sp, #32]
 80027ca:	b11b      	cbz	r3, 80027d4 <gc_execute_line+0xf90>
 80027cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	f000 81b0 	beq.w	8002b34 <gc_execute_line+0x12f0>
        if (gc_state.modal.spindle == SPINDLE_ENABLE_CW) {
 80027d4:	4b21      	ldr	r3, [pc, #132]	; (800285c <gc_execute_line+0x1018>)
 80027d6:	7a5c      	ldrb	r4, [r3, #9]
 80027d8:	2c10      	cmp	r4, #16
 80027da:	f000 8167 	beq.w	8002aac <gc_execute_line+0x1268>
 80027de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80027e0:	f003 0540 	and.w	r5, r3, #64	; 0x40
 80027e4:	e5b3      	b.n	800234e <gc_execute_line+0xb0a>
    if (gc_block.modal.feed_rate == FEED_RATE_MODE_INVERSE_TIME) { // = G93
 80027e6:	4655      	mov	r5, sl
 80027e8:	e9cd aa09 	strd	sl, sl, [sp, #36]	; 0x24
 80027ec:	f8cd a01c 	str.w	sl, [sp, #28]
 80027f0:	e592      	b.n	8002318 <gc_execute_line+0xad4>
      if (command_words & ~(bit(MODAL_GROUP_G3) | bit(MODAL_GROUP_G6 | bit(MODAL_GROUP_G0)))) { FAIL(STATUS_INVALID_JOG_COMMAND) };
 80027f2:	2410      	movs	r4, #16
 80027f4:	f7ff b8ab 	b.w	800194e <gc_execute_line+0x10a>
            if (!settings_read_coord_data(SETTING_INDEX_G30,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 80027f8:	2007      	movs	r0, #7
 80027fa:	491c      	ldr	r1, [pc, #112]	; (800286c <gc_execute_line+0x1028>)
 80027fc:	f004 f802 	bl	8006804 <settings_read_coord_data>
 8002800:	2800      	cmp	r0, #0
 8002802:	d0a5      	beq.n	8002750 <gc_execute_line+0xf0c>
          if (axis_words) {
 8002804:	9b08      	ldr	r3, [sp, #32]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f040 80b7 	bne.w	800297a <gc_execute_line+0x1136>
 800280c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 800280e:	930e      	str	r3, [sp, #56]	; 0x38
            axis_command = AXIS_COMMAND_NONE; // Set to none if no intermediate motion.
 8002810:	9309      	str	r3, [sp, #36]	; 0x24
 8002812:	f7ff bb9f 	b.w	8001f54 <gc_execute_line+0x710>
          if (!axis_words) { axis_command = AXIS_COMMAND_NONE; }
 8002816:	9b08      	ldr	r3, [sp, #32]
 8002818:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800281a:	2b00      	cmp	r3, #0
 800281c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800281e:	bf08      	it	eq
 8002820:	2300      	moveq	r3, #0
 8002822:	9309      	str	r3, [sp, #36]	; 0x24
 8002824:	f7ff bb96 	b.w	8001f54 <gc_execute_line+0x710>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <gc_execute_line+0x1018>)
 800282a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800282c:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
      for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 8002830:	e550      	b.n	80022d4 <gc_execute_line+0xa90>
    gc_state.modal.tool_length = gc_block.modal.tool_length;
 8002832:	f898 3006 	ldrb.w	r3, [r8, #6]
 8002836:	7153      	strb	r3, [r2, #5]
    if (gc_state.modal.tool_length == TOOL_LENGTH_OFFSET_CANCEL) { // G49
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 80e7 	beq.w	8002a0c <gc_execute_line+0x11c8>
    if ( gc_state.tool_length_offset != gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] ) {
 800283e:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
 8002842:	4b06      	ldr	r3, [pc, #24]	; (800285c <gc_execute_line+0x1018>)
 8002844:	4621      	mov	r1, r4
 8002846:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002848:	f7fe f9b8 	bl	8000bbc <__aeabi_fcmpeq>
 800284c:	2800      	cmp	r0, #0
 800284e:	f47f add8 	bne.w	8002402 <gc_execute_line+0xbbe>
      gc_state.tool_length_offset = gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS];
 8002852:	4b02      	ldr	r3, [pc, #8]	; (800285c <gc_execute_line+0x1018>)
 8002854:	64dc      	str	r4, [r3, #76]	; 0x4c
      system_flag_wco_change();
 8002856:	f005 fe29 	bl	80084ac <system_flag_wco_change>
 800285a:	e5d2      	b.n	8002402 <gc_execute_line+0xbbe>
 800285c:	20000980 	.word	0x20000980
 8002860:	20000970 	.word	0x20000970
 8002864:	2000099c 	.word	0x2000099c
 8002868:	41cb3333 	.word	0x41cb3333
 800286c:	20000948 	.word	0x20000948
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002870:	07d0      	lsls	r0, r2, #31
 8002872:	f100 8138 	bmi.w	8002ae6 <gc_execute_line+0x12a2>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002876:	4bab      	ldr	r3, [pc, #684]	; (8002b24 <gc_execute_line+0x12e0>)
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800287e:	9b08      	ldr	r3, [sp, #32]
 8002880:	0799      	lsls	r1, r3, #30
 8002882:	f100 813f 	bmi.w	8002b04 <gc_execute_line+0x12c0>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002886:	4ba7      	ldr	r3, [pc, #668]	; (8002b24 <gc_execute_line+0x12e0>)
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800288e:	9b08      	ldr	r3, [sp, #32]
 8002890:	075a      	lsls	r2, r3, #29
 8002892:	f140 811c 	bpl.w	8002ace <gc_execute_line+0x128a>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 8002896:	2c35      	cmp	r4, #53	; 0x35
 8002898:	f43f af6c 	beq.w	8002774 <gc_execute_line+0xf30>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 800289c:	f8d8 1040 	ldr.w	r1, [r8, #64]	; 0x40
 80028a0:	981a      	ldr	r0, [sp, #104]	; 0x68
 80028a2:	f7fd feef 	bl	8000684 <__addsf3>
 80028a6:	4b9f      	ldr	r3, [pc, #636]	; (8002b24 <gc_execute_line+0x12e0>)
 80028a8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80028aa:	f7fd feeb 	bl	8000684 <__addsf3>
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 80028ae:	990e      	ldr	r1, [sp, #56]	; 0x38
 80028b0:	f7fd fee8 	bl	8000684 <__addsf3>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80028b4:	9b08      	ldr	r3, [sp, #32]
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 80028b6:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80028ba:	071b      	lsls	r3, r3, #28
 80028bc:	d57a      	bpl.n	80029b4 <gc_execute_line+0x1170>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 80028be:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80028c0:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
 80028c4:	f7fd fede 	bl	8000684 <__addsf3>
 80028c8:	4b96      	ldr	r3, [pc, #600]	; (8002b24 <gc_execute_line+0x12e0>)
 80028ca:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80028cc:	f7fd feda 	bl	8000684 <__addsf3>
 80028d0:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 80028d4:	f7ff bb2a 	b.w	8001f2c <gc_execute_line+0x6e8>
      switch (gc_block.modal.motion) {
 80028d8:	f104 0374 	add.w	r3, r4, #116	; 0x74
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b03      	cmp	r3, #3
 80028e0:	f63f acae 	bhi.w	8002240 <gc_execute_line+0x9fc>
 80028e4:	f1a4 038c 	sub.w	r3, r4, #140	; 0x8c
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	f63f aca9 	bhi.w	8002240 <gc_execute_line+0x9fc>
 80028ee:	e8df f003 	tbb	[pc, r3]
 80028f2:	0206      	.short	0x0206
 80028f4:	0206      	.short	0x0206
            gc_parser_flags |= GC_PARSER_PROBE_IS_NO_ERROR; // No break intentional.
 80028f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80028f8:	f043 0310 	orr.w	r3, r3, #16
 80028fc:	930b      	str	r3, [sp, #44]	; 0x2c
            if ((gc_block.modal.motion == MOTION_MODE_PROBE_AWAY) ||
 80028fe:	f104 0372 	add.w	r3, r4, #114	; 0x72
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b01      	cmp	r3, #1
 8002906:	d803      	bhi.n	8002910 <gc_execute_line+0x10cc>
                (gc_block.modal.motion == MOTION_MODE_PROBE_AWAY_NO_ERROR)) { gc_parser_flags |= GC_PARSER_PROBE_IS_AWAY; }
 8002908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800290a:	f043 0308 	orr.w	r3, r3, #8
 800290e:	930b      	str	r3, [sp, #44]	; 0x2c
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8002910:	9b08      	ldr	r3, [sp, #32]
 8002912:	2b00      	cmp	r3, #0
 8002914:	f43f ae24 	beq.w	8002560 <gc_execute_line+0xd1c>
          if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002918:	2210      	movs	r2, #16
 800291a:	4983      	ldr	r1, [pc, #524]	; (8002b28 <gc_execute_line+0x12e4>)
 800291c:	4883      	ldr	r0, [pc, #524]	; (8002b2c <gc_execute_line+0x12e8>)
 800291e:	f007 f8ed 	bl	8009afc <memcmp>
 8002922:	2800      	cmp	r0, #0
 8002924:	f000 8199 	beq.w	8002c5a <gc_execute_line+0x1416>
 8002928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800292a:	f003 0201 	and.w	r2, r3, #1
 800292e:	f7ff bb11 	b.w	8001f54 <gc_execute_line+0x710>
      else { coord_select = gc_block.modal.coord_select; } // Index P0 as the active coordinate system
 8002932:	f898 3007 	ldrb.w	r3, [r8, #7]
 8002936:	4618      	mov	r0, r3
 8002938:	930e      	str	r3, [sp, #56]	; 0x38
 800293a:	e44f      	b.n	80021dc <gc_execute_line+0x998>
      if (gc_state.modal.motion == MOTION_MODE_LINEAR) {
 800293c:	2b01      	cmp	r3, #1
 800293e:	f000 8142 	beq.w	8002bc6 <gc_execute_line+0x1382>
      } else if (gc_state.modal.motion == MOTION_MODE_SEEK) {
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 8132 	beq.w	8002bac <gc_execute_line+0x1368>
      } else if ((gc_state.modal.motion == MOTION_MODE_CW_ARC) || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 8002948:	3b02      	subs	r3, #2
 800294a:	2b01      	cmp	r3, #1
 800294c:	f240 8117 	bls.w	8002b7e <gc_execute_line+0x133a>
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002950:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002954:	4d74      	ldr	r5, [pc, #464]	; (8002b28 <gc_execute_line+0x12e4>)
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002956:	f043 0304 	orr.w	r3, r3, #4
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 800295a:	4628      	mov	r0, r5
 800295c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800295e:	a915      	add	r1, sp, #84	; 0x54
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002960:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002964:	f000 fffc 	bl	8003960 <mc_probe_cycle>
      if (gc_update_pos == GC_UPDATE_POS_TARGET) {
 8002968:	2800      	cmp	r0, #0
 800296a:	f040 8100 	bne.w	8002b6e <gc_execute_line+0x132a>
 800296e:	4c6f      	ldr	r4, [pc, #444]	; (8002b2c <gc_execute_line+0x12e8>)
        memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); // gc_state.position[] = gc_block.values.xyz[]
 8002970:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002974:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002978:	e589      	b.n	800248e <gc_execute_line+0xc4a>
              if (!(axis_words & (1<<idx))) { gc_block.values.ijk[idx] = gc_state.position[idx]; }
 800297a:	07d9      	lsls	r1, r3, #31
 800297c:	d403      	bmi.n	8002986 <gc_execute_line+0x1142>
 800297e:	4b69      	ldr	r3, [pc, #420]	; (8002b24 <gc_execute_line+0x12e0>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f8c8 3010 	str.w	r3, [r8, #16]
 8002986:	9b08      	ldr	r3, [sp, #32]
 8002988:	079a      	lsls	r2, r3, #30
 800298a:	d403      	bmi.n	8002994 <gc_execute_line+0x1150>
 800298c:	4b65      	ldr	r3, [pc, #404]	; (8002b24 <gc_execute_line+0x12e0>)
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	f8c8 3014 	str.w	r3, [r8, #20]
 8002994:	9b08      	ldr	r3, [sp, #32]
 8002996:	075b      	lsls	r3, r3, #29
 8002998:	d403      	bmi.n	80029a2 <gc_execute_line+0x115e>
 800299a:	4b62      	ldr	r3, [pc, #392]	; (8002b24 <gc_execute_line+0x12e0>)
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	f8c8 3018 	str.w	r3, [r8, #24]
 80029a2:	9b08      	ldr	r3, [sp, #32]
 80029a4:	071c      	lsls	r4, r3, #28
 80029a6:	f53f ac95 	bmi.w	80022d4 <gc_execute_line+0xa90>
 80029aa:	4b5e      	ldr	r3, [pc, #376]	; (8002b24 <gc_execute_line+0x12e0>)
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	f8c8 301c 	str.w	r3, [r8, #28]
 80029b2:	e48f      	b.n	80022d4 <gc_execute_line+0xa90>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80029b4:	4b5b      	ldr	r3, [pc, #364]	; (8002b24 <gc_execute_line+0x12e0>)
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 80029bc:	f7ff bab6 	b.w	8001f2c <gc_execute_line+0x6e8>
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]
 80029c0:	241f      	movs	r4, #31
 80029c2:	f7fe bfc4 	b.w	800194e <gc_execute_line+0x10a>
            FAIL(STATUS_GCODE_G53_INVALID_MOTION_MODE); // [G53 G0/1 not active]
 80029c6:	241e      	movs	r4, #30
 80029c8:	f7fe bfc1 	b.w	800194e <gc_execute_line+0x10a>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80029cc:	69cb      	ldr	r3, [r1, #28]
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80029ce:	0791      	lsls	r1, r2, #30
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80029d0:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80029d4:	f57f aec3 	bpl.w	800275e <gc_execute_line+0xf1a>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 80029d8:	2c35      	cmp	r4, #53	; 0x35
 80029da:	f47f aa87 	bne.w	8001eec <gc_execute_line+0x6a8>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80029de:	9b08      	ldr	r3, [sp, #32]
 80029e0:	0759      	lsls	r1, r3, #29
 80029e2:	f53f aec7 	bmi.w	8002774 <gc_execute_line+0xf30>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80029e6:	4b4f      	ldr	r3, [pc, #316]	; (8002b24 <gc_execute_line+0x12e0>)
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80029ee:	9b08      	ldr	r3, [sp, #32]
 80029f0:	071a      	lsls	r2, r3, #28
 80029f2:	d5df      	bpl.n	80029b4 <gc_execute_line+0x1170>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 80029f4:	2c35      	cmp	r4, #53	; 0x35
 80029f6:	f47f aa91 	bne.w	8001f1c <gc_execute_line+0x6d8>
 80029fa:	e6bf      	b.n	800277c <gc_execute_line+0xf38>
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 80029fc:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 8002a00:	f000 ff76 	bl	80038f0 <mc_dwell>
 8002a04:	e4f2      	b.n	80023ec <gc_execute_line+0xba8>
				if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 8002a06:	2426      	movs	r4, #38	; 0x26
 8002a08:	f7fe bfa1 	b.w	800194e <gc_execute_line+0x10a>
      gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] = 0.0f;
 8002a0c:	2400      	movs	r4, #0
 8002a0e:	f8c8 4040 	str.w	r4, [r8, #64]	; 0x40
 8002a12:	e716      	b.n	8002842 <gc_execute_line+0xffe>
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002a14:	07d9      	lsls	r1, r3, #31
 8002a16:	d50c      	bpl.n	8002a32 <gc_execute_line+0x11ee>
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8002a18:	4b42      	ldr	r3, [pc, #264]	; (8002b24 <gc_execute_line+0x12e0>)
 8002a1a:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 8002a1e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002a20:	f7fd fe30 	bl	8000684 <__addsf3>
 8002a24:	4b3f      	ldr	r3, [pc, #252]	; (8002b24 <gc_execute_line+0x12e0>)
 8002a26:	4601      	mov	r1, r0
 8002a28:	69d8      	ldr	r0, [r3, #28]
 8002a2a:	f7fd fe29 	bl	8000680 <__aeabi_fsub>
 8002a2e:	f8c8 0010 	str.w	r0, [r8, #16]
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002a32:	9b08      	ldr	r3, [sp, #32]
 8002a34:	079a      	lsls	r2, r3, #30
 8002a36:	d50c      	bpl.n	8002a52 <gc_execute_line+0x120e>
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8002a38:	4b3a      	ldr	r3, [pc, #232]	; (8002b24 <gc_execute_line+0x12e0>)
 8002a3a:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 8002a3e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002a40:	f7fd fe20 	bl	8000684 <__addsf3>
 8002a44:	4b37      	ldr	r3, [pc, #220]	; (8002b24 <gc_execute_line+0x12e0>)
 8002a46:	4601      	mov	r1, r0
 8002a48:	6a18      	ldr	r0, [r3, #32]
 8002a4a:	f7fd fe19 	bl	8000680 <__aeabi_fsub>
 8002a4e:	f8c8 0014 	str.w	r0, [r8, #20]
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002a52:	9b08      	ldr	r3, [sp, #32]
 8002a54:	075b      	lsls	r3, r3, #29
 8002a56:	d50f      	bpl.n	8002a78 <gc_execute_line+0x1234>
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8002a58:	4b32      	ldr	r3, [pc, #200]	; (8002b24 <gc_execute_line+0x12e0>)
 8002a5a:	f8d8 0040 	ldr.w	r0, [r8, #64]	; 0x40
 8002a5e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002a60:	f7fd fe10 	bl	8000684 <__addsf3>
 8002a64:	4b2f      	ldr	r3, [pc, #188]	; (8002b24 <gc_execute_line+0x12e0>)
 8002a66:	4601      	mov	r1, r0
 8002a68:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002a6a:	f7fd fe09 	bl	8000680 <__aeabi_fsub>
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8002a6e:	4621      	mov	r1, r4
 8002a70:	f7fd fe06 	bl	8000680 <__aeabi_fsub>
 8002a74:	f8c8 0018 	str.w	r0, [r8, #24]
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002a78:	9b08      	ldr	r3, [sp, #32]
 8002a7a:	0718      	lsls	r0, r3, #28
 8002a7c:	f57f abd7 	bpl.w	800222e <gc_execute_line+0x9ea>
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8002a80:	4c28      	ldr	r4, [pc, #160]	; (8002b24 <gc_execute_line+0x12e0>)
 8002a82:	f8d8 1044 	ldr.w	r1, [r8, #68]	; 0x44
 8002a86:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002a88:	f7fd fdfc 	bl	8000684 <__addsf3>
 8002a8c:	4601      	mov	r1, r0
 8002a8e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002a90:	f7fd fdf6 	bl	8000680 <__aeabi_fsub>
 8002a94:	f8c8 001c 	str.w	r0, [r8, #28]
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8002a98:	f7ff bbc9 	b.w	800222e <gc_execute_line+0x9ea>
      memcpy(gc_state.coord_offset,gc_block.values.xyz,sizeof(gc_block.values.xyz));
 8002a9c:	4c24      	ldr	r4, [pc, #144]	; (8002b30 <gc_execute_line+0x12ec>)
 8002a9e:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <gc_execute_line+0x12e4>)
 8002aa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      system_flag_wco_change();
 8002aa6:	f005 fd01 	bl	80084ac <system_flag_wco_change>
      break;
 8002aaa:	e4e6      	b.n	800247a <gc_execute_line+0xc36>
            || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 8002aac:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <gc_execute_line+0x12e0>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
          if ((gc_state.modal.motion == MOTION_MODE_LINEAR) || (gc_state.modal.motion == MOTION_MODE_CW_ARC)
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	2b02      	cmp	r3, #2
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002ab6:	f003 0540 	and.w	r5, r3, #64	; 0x40
          if ((gc_state.modal.motion == MOTION_MODE_LINEAR) || (gc_state.modal.motion == MOTION_MODE_CW_ARC)
 8002aba:	d854      	bhi.n	8002b66 <gc_execute_line+0x1322>
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002abc:	0659      	lsls	r1, r3, #25
 8002abe:	f57f ac46 	bpl.w	800234e <gc_execute_line+0xb0a>
              gc_parser_flags |= GC_PARSER_LASER_FORCE_SYNC;
 8002ac2:	f043 0320 	orr.w	r3, r3, #32
 8002ac6:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ac8:	f003 0540 	and.w	r5, r3, #64	; 0x40
 8002acc:	e43f      	b.n	800234e <gc_execute_line+0xb0a>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <gc_execute_line+0x12e0>)
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002ad6:	9b08      	ldr	r3, [sp, #32]
 8002ad8:	0718      	lsls	r0, r3, #28
 8002ada:	f57f af6b 	bpl.w	80029b4 <gc_execute_line+0x1170>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 8002ade:	2c35      	cmp	r4, #53	; 0x35
 8002ae0:	f47f aeed 	bne.w	80028be <gc_execute_line+0x107a>
 8002ae4:	e64a      	b.n	800277c <gc_execute_line+0xf38>
 8002ae6:	2c35      	cmp	r4, #53	; 0x35
 8002ae8:	f43f aec9 	beq.w	800287e <gc_execute_line+0x103a>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 8002aec:	f8d8 1038 	ldr.w	r1, [r8, #56]	; 0x38
 8002af0:	9818      	ldr	r0, [sp, #96]	; 0x60
 8002af2:	f7fd fdc7 	bl	8000684 <__addsf3>
 8002af6:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <gc_execute_line+0x12e0>)
 8002af8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002afa:	f7fd fdc3 	bl	8000684 <__addsf3>
 8002afe:	f8c8 0038 	str.w	r0, [r8, #56]	; 0x38
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 8002b02:	e6bc      	b.n	800287e <gc_execute_line+0x103a>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 8002b04:	2c35      	cmp	r4, #53	; 0x35
 8002b06:	f43f aec2 	beq.w	800288e <gc_execute_line+0x104a>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 8002b0a:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
 8002b0e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8002b10:	f7fd fdb8 	bl	8000684 <__addsf3>
 8002b14:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <gc_execute_line+0x12e0>)
 8002b16:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002b18:	f7fd fdb4 	bl	8000684 <__addsf3>
 8002b1c:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 8002b20:	e6b5      	b.n	800288e <gc_execute_line+0x104a>
 8002b22:	bf00      	nop
 8002b24:	20000980 	.word	0x20000980
 8002b28:	20000970 	.word	0x20000970
 8002b2c:	2000099c 	.word	0x2000099c
 8002b30:	200009bc 	.word	0x200009bc
        gc_parser_flags |= GC_PARSER_LASER_ISMOTION;
 8002b34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8002b36:	4a5c      	ldr	r2, [pc, #368]	; (8002ca8 <gc_execute_line+0x1464>)
        gc_parser_flags |= GC_PARSER_LASER_ISMOTION;
 8002b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8002b3c:	7a54      	ldrb	r4, [r2, #9]
        gc_parser_flags |= GC_PARSER_LASER_ISMOTION;
 8002b3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002b40:	f003 0540 	and.w	r5, r3, #64	; 0x40
 8002b44:	e403      	b.n	800234e <gc_execute_line+0xb0a>
      if (sys.state != STATE_CHECK_MODE) {
 8002b46:	4b59      	ldr	r3, [pc, #356]	; (8002cac <gc_execute_line+0x1468>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	f43f acd1 	beq.w	80024f2 <gc_execute_line+0xcae>
        system_set_exec_state_flag(EXEC_FEED_HOLD); // Use feed hold for program pause.
 8002b50:	2008      	movs	r0, #8
 8002b52:	f005 fd11 	bl	8008578 <system_set_exec_state_flag>
        protocol_execute_realtime(); // Execute suspend.
 8002b56:	f002 fcc7 	bl	80054e8 <protocol_execute_realtime>
 8002b5a:	e4ca      	b.n	80024f2 <gc_execute_line+0xcae>
      if (axis_command) { mc_line(gc_block.values.xyz, pl_data); }
 8002b5c:	4854      	ldr	r0, [pc, #336]	; (8002cb0 <gc_execute_line+0x146c>)
 8002b5e:	a915      	add	r1, sp, #84	; 0x54
 8002b60:	f000 fcdc 	bl	800351c <mc_line>
 8002b64:	e4d5      	b.n	8002512 <gc_execute_line+0xcce>
            if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002b66:	065a      	lsls	r2, r3, #25
 8002b68:	f53f abf1 	bmi.w	800234e <gc_execute_line+0xb0a>
 8002b6c:	e7a9      	b.n	8002ac2 <gc_execute_line+0x127e>
      } else if (gc_update_pos == GC_UPDATE_POS_SYSTEM) {
 8002b6e:	2801      	cmp	r0, #1
 8002b70:	f47f ac8d 	bne.w	800248e <gc_execute_line+0xc4a>
  system_convert_array_steps_to_mpos(gc_state.position,sys_position);
 8002b74:	494f      	ldr	r1, [pc, #316]	; (8002cb4 <gc_execute_line+0x1470>)
 8002b76:	4850      	ldr	r0, [pc, #320]	; (8002cb8 <gc_execute_line+0x1474>)
 8002b78:	f005 fca2 	bl	80084c0 <system_convert_array_steps_to_mpos>
}
 8002b7c:	e487      	b.n	800248e <gc_execute_line+0xc4a>
          mc_arc(gc_block.values.xyz, pl_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 8002b7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002b80:	4d4b      	ldr	r5, [pc, #300]	; (8002cb0 <gc_execute_line+0x146c>)
 8002b82:	9303      	str	r3, [sp, #12]
 8002b84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b86:	4c4c      	ldr	r4, [pc, #304]	; (8002cb8 <gc_execute_line+0x1474>)
 8002b88:	9302      	str	r3, [sp, #8]
 8002b8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002b8c:	4628      	mov	r0, r5
 8002b8e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b92:	9304      	str	r3, [sp, #16]
 8002b94:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8002b98:	4622      	mov	r2, r4
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	a915      	add	r1, sp, #84	; 0x54
 8002b9e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002ba2:	f1a5 0328 	sub.w	r3, r5, #40	; 0x28
 8002ba6:	f000 fcef 	bl	8003588 <mc_arc>
      if (gc_update_pos == GC_UPDATE_POS_TARGET) {
 8002baa:	e6e1      	b.n	8002970 <gc_execute_line+0x112c>
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002bac:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
        mc_line(gc_block.values.xyz, pl_data);
 8002bb0:	4d3f      	ldr	r5, [pc, #252]	; (8002cb0 <gc_execute_line+0x146c>)
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
        mc_line(gc_block.values.xyz, pl_data);
 8002bb6:	4628      	mov	r0, r5
 8002bb8:	a915      	add	r1, sp, #84	; 0x54
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002bba:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
        mc_line(gc_block.values.xyz, pl_data);
 8002bbe:	4c3e      	ldr	r4, [pc, #248]	; (8002cb8 <gc_execute_line+0x1474>)
 8002bc0:	f000 fcac 	bl	800351c <mc_line>
      if (gc_update_pos == GC_UPDATE_POS_TARGET) {
 8002bc4:	e6d4      	b.n	8002970 <gc_execute_line+0x112c>
        mc_line(gc_block.values.xyz, pl_data);
 8002bc6:	4d3a      	ldr	r5, [pc, #232]	; (8002cb0 <gc_execute_line+0x146c>)
 8002bc8:	a915      	add	r1, sp, #84	; 0x54
 8002bca:	4628      	mov	r0, r5
 8002bcc:	f000 fca6 	bl	800351c <mc_line>
      if (gc_update_pos == GC_UPDATE_POS_TARGET) {
 8002bd0:	4c39      	ldr	r4, [pc, #228]	; (8002cb8 <gc_execute_line+0x1474>)
 8002bd2:	e6cd      	b.n	8002970 <gc_execute_line+0x112c>
            if (!(ijk_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_OFFSETS_IN_PLANE); } // [No offsets in plane]
 8002bd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002bd6:	423a      	tst	r2, r7
 8002bd8:	d062      	beq.n	8002ca0 <gc_execute_line+0x145c>
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002bda:	f898 2003 	ldrb.w	r2, [r8, #3]
            bit_false(value_words,(bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 8002bde:	f025 050e 	bic.w	r5, r5, #14
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002be2:	2a01      	cmp	r2, #1
            bit_false(value_words,(bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 8002be4:	b2ad      	uxth	r5, r5
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002be6:	d041      	beq.n	8002c6c <gc_execute_line+0x1428>
            y -= gc_block.values.ijk[axis_1]; // Delta y between circle center and target
 8002be8:	3602      	adds	r6, #2
 8002bea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8002bee:	68b1      	ldr	r1, [r6, #8]
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	f7fd fd45 	bl	8000680 <__aeabi_fsub>
 8002bf6:	4607      	mov	r7, r0
            x -= gc_block.values.ijk[axis_0]; // Delta x between circle center and target
 8002bf8:	f10a 0402 	add.w	r4, sl, #2
 8002bfc:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 8002c00:	68a1      	ldr	r1, [r4, #8]
 8002c02:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002c04:	f7fd fd3c 	bl	8000680 <__aeabi_fsub>
            float target_r = hypot_f(x,y);
 8002c08:	4639      	mov	r1, r7
 8002c0a:	f001 f81d 	bl	8003c48 <hypot_f>
 8002c0e:	4603      	mov	r3, r0
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8002c10:	68b1      	ldr	r1, [r6, #8]
 8002c12:	68a0      	ldr	r0, [r4, #8]
            float target_r = hypot_f(x,y);
 8002c14:	461c      	mov	r4, r3
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8002c16:	f001 f817 	bl	8003c48 <hypot_f>
 8002c1a:	4606      	mov	r6, r0
            float delta_r = fabsf(target_r-gc_block.values.r);
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	4631      	mov	r1, r6
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8002c20:	f8c8 602c 	str.w	r6, [r8, #44]	; 0x2c
            float delta_r = fabsf(target_r-gc_block.values.r);
 8002c24:	f7fd fd2c 	bl	8000680 <__aeabi_fsub>
 8002c28:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
            if (delta_r > 0.005f) {
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	4923      	ldr	r1, [pc, #140]	; (8002cbc <gc_execute_line+0x1478>)
 8002c30:	f7fd ffec 	bl	8000c0c <__aeabi_fcmpgt>
 8002c34:	2800      	cmp	r0, #0
 8002c36:	f43f ae77 	beq.w	8002928 <gc_execute_line+0x10e4>
              if (delta_r > 0.5f) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.5mm
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002c40:	f7fd ffe4 	bl	8000c0c <__aeabi_fcmpgt>
 8002c44:	b948      	cbnz	r0, 8002c5a <gc_execute_line+0x1416>
              if (delta_r > (0.001f*gc_block.values.r)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.005mm AND 0.1% radius
 8002c46:	491e      	ldr	r1, [pc, #120]	; (8002cc0 <gc_execute_line+0x147c>)
 8002c48:	4630      	mov	r0, r6
 8002c4a:	f7fd fe23 	bl	8000894 <__aeabi_fmul>
 8002c4e:	4621      	mov	r1, r4
 8002c50:	f7fd ffbe 	bl	8000bd0 <__aeabi_fcmplt>
 8002c54:	2800      	cmp	r0, #0
 8002c56:	f43f ae67 	beq.w	8002928 <gc_execute_line+0x10e4>
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002c5a:	2421      	movs	r4, #33	; 0x21
 8002c5c:	f7fe be77 	b.w	800194e <gc_execute_line+0x10a>
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8002c60:	2422      	movs	r4, #34	; 0x22
 8002c62:	f7fe be74 	b.w	800194e <gc_execute_line+0x10a>
          if (!(axis_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE); } // [No axis words in plane]
 8002c66:	2420      	movs	r4, #32
 8002c68:	f7fe be71 	b.w	800194e <gc_execute_line+0x10a>
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002c6c:	461f      	mov	r7, r3
 8002c6e:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <gc_execute_line+0x1480>)
                if (ijk_words & bit(idx)) { gc_block.values.ijk[idx] *= MM_PER_INCH; }
 8002c70:	9610      	str	r6, [sp, #64]	; 0x40
 8002c72:	461c      	mov	r4, r3
 8002c74:	4606      	mov	r6, r0
 8002c76:	4914      	ldr	r1, [pc, #80]	; (8002cc8 <gc_execute_line+0x1484>)
 8002c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c7a:	413b      	asrs	r3, r7
 8002c7c:	f013 0f01 	tst.w	r3, #1
 8002c80:	f107 0701 	add.w	r7, r7, #1
 8002c84:	d005      	beq.n	8002c92 <gc_execute_line+0x144e>
 8002c86:	6820      	ldr	r0, [r4, #0]
 8002c88:	9111      	str	r1, [sp, #68]	; 0x44
 8002c8a:	f7fd fe03 	bl	8000894 <__aeabi_fmul>
 8002c8e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002c90:	6020      	str	r0, [r4, #0]
              for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used to save flash space.
 8002c92:	2f04      	cmp	r7, #4
 8002c94:	f104 0404 	add.w	r4, r4, #4
 8002c98:	d1ee      	bne.n	8002c78 <gc_execute_line+0x1434>
 8002c9a:	4634      	mov	r4, r6
 8002c9c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8002c9e:	e7a3      	b.n	8002be8 <gc_execute_line+0x13a4>
            if (!(ijk_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_OFFSETS_IN_PLANE); } // [No offsets in plane]
 8002ca0:	2423      	movs	r4, #35	; 0x23
 8002ca2:	f7fe be54 	b.w	800194e <gc_execute_line+0x10a>
 8002ca6:	bf00      	nop
 8002ca8:	20000980 	.word	0x20000980
 8002cac:	200009d0 	.word	0x200009d0
 8002cb0:	20000970 	.word	0x20000970
 8002cb4:	200009e4 	.word	0x200009e4
 8002cb8:	2000099c 	.word	0x2000099c
 8002cbc:	3ba3d70a 	.word	0x3ba3d70a
 8002cc0:	3a83126f 	.word	0x3a83126f
 8002cc4:	20000948 	.word	0x20000948
 8002cc8:	41cb3333 	.word	0x41cb3333

08002ccc <jog_execute>:
#include "grbl.h"


// Sets up valid jog motion received from g-code parser, checks for soft-limits, and executes the jog.
uint8_t jog_execute(plan_line_data_t *pl_data, parser_block_t *gc_block)
{
 8002ccc:	460b      	mov	r3, r1
 8002cce:	b570      	push	{r4, r5, r6, lr}
 8002cd0:	4605      	mov	r5, r0
  // Initialize planner data struct for jogging motions.
  // NOTE: Spindle and coolant are allowed to fully function with overrides during a jog.
  pl_data->feed_rate = gc_block->values.f;
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002cd2:	7a02      	ldrb	r2, [r0, #8]
  pl_data->feed_rate = gc_block->values.f;
 8002cd4:	68d8      	ldr	r0, [r3, #12]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002cd6:	f042 0204 	orr.w	r2, r2, #4
#ifdef USE_LINE_NUMBERS
  pl_data->line_number = gc_block->values.n;
#endif

  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 8002cda:	4913      	ldr	r1, [pc, #76]	; (8002d28 <jog_execute+0x5c>)
  pl_data->feed_rate = gc_block->values.f;
 8002cdc:	6028      	str	r0, [r5, #0]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002cde:	722a      	strb	r2, [r5, #8]
  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 8002ce0:	f891 2058 	ldrb.w	r2, [r1, #88]	; 0x58
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 8002ce4:	f103 0438 	add.w	r4, r3, #56	; 0x38
  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 8002ce8:	0693      	lsls	r3, r2, #26
 8002cea:	d503      	bpl.n	8002cf4 <jog_execute+0x28>
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 8002cec:	4620      	mov	r0, r4
 8002cee:	f005 fc0d 	bl	800850c <system_check_travel_limits>
 8002cf2:	b9a8      	cbnz	r0, 8002d20 <jog_execute+0x54>
  }

  // Valid jog command. Plan, set state, and execute.
  mc_line(gc_block->values.xyz, pl_data);
  if (sys.state == STATE_IDLE) {
 8002cf4:	4e0d      	ldr	r6, [pc, #52]	; (8002d2c <jog_execute+0x60>)
  mc_line(gc_block->values.xyz, pl_data);
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	4629      	mov	r1, r5
 8002cfa:	f000 fc0f 	bl	800351c <mc_line>
  if (sys.state == STATE_IDLE) {
 8002cfe:	7834      	ldrb	r4, [r6, #0]
 8002d00:	b114      	cbz	r4, 8002d08 <jog_execute+0x3c>
      st_prep_buffer();
      st_wake_up();  // NOTE: Manual start. No state machine required.
    }
  }

  return(STATUS_OK);
 8002d02:	2400      	movs	r4, #0
}
 8002d04:	4620      	mov	r0, r4
 8002d06:	bd70      	pop	{r4, r5, r6, pc}
    if (plan_get_current_block() != NULL) { // Check if there is a block to execute.
 8002d08:	f001 f9be 	bl	8004088 <plan_get_current_block>
 8002d0c:	2800      	cmp	r0, #0
 8002d0e:	d0f8      	beq.n	8002d02 <jog_execute+0x36>
      sys.state = STATE_JOG;
 8002d10:	2320      	movs	r3, #32
 8002d12:	7033      	strb	r3, [r6, #0]
      st_prep_buffer();
 8002d14:	f004 fc80 	bl	8007618 <st_prep_buffer>
      st_wake_up();  // NOTE: Manual start. No state machine required.
 8002d18:	f004 f94a 	bl	8006fb0 <st_wake_up>
}
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	bd70      	pop	{r4, r5, r6, pc}
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 8002d20:	240f      	movs	r4, #15
}
 8002d22:	4620      	mov	r0, r4
 8002d24:	bd70      	pop	{r4, r5, r6, pc}
 8002d26:	bf00      	nop
 8002d28:	200013ec 	.word	0x200013ec
 8002d2c:	200009d0 	.word	0x200009d0

08002d30 <limits_init>:
#ifndef HOMING_AXIS_LOCATE_SCALAR
  #define HOMING_AXIS_LOCATE_SCALAR  5.0f // Must be > 1 to ensure limit switch is cleared.
#endif

void limits_init()
{
 8002d30:	b530      	push	{r4, r5, lr}
    WDTCSR = (1<<WDP0); // Set time-out at ~32msec.
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8002d32:	2101      	movs	r1, #1
{
 8002d34:	b085      	sub	sp, #20
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8002d36:	2009      	movs	r0, #9
 8002d38:	f7fe fb34 	bl	80013a4 <RCC_APB2PeriphClockCmd>
#ifdef DISABLE_LIMIT_PIN_PULL_UP
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 8002d3c:	f44f 4470 	mov.w	r4, #61440	; 0xf000
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002d40:	f644 0303 	movw	r3, #18435	; 0x4803
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);

	if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE))
 8002d44:	4d20      	ldr	r5, [pc, #128]	; (8002dc8 <limits_init+0x98>)
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);
 8002d46:	4669      	mov	r1, sp
 8002d48:	4820      	ldr	r0, [pc, #128]	; (8002dcc <limits_init+0x9c>)
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002d4a:	f8ad 3002 	strh.w	r3, [sp, #2]
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 8002d4e:	f8ad 4000 	strh.w	r4, [sp]
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);
 8002d52:	f7fe f92d 	bl	8000fb0 <GPIO_Init>
	if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE))
 8002d56:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 8002d5a:	071b      	lsls	r3, r3, #28
 8002d5c:	d406      	bmi.n	8002d6c <limits_init+0x3c>

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8002d5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d62:	4b1b      	ldr	r3, [pc, #108]	; (8002dd0 <limits_init+0xa0>)
 8002d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	else
	{
		limits_disable();
	}
#endif
}
 8002d68:	b005      	add	sp, #20
 8002d6a:	bd30      	pop	{r4, r5, pc}
		delay_ms(100); // added by MS for debug (issue#14)
 8002d6c:	2064      	movs	r0, #100	; 0x64
 8002d6e:	f000 ff5b 	bl	8003c28 <delay_ms>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, X_LIMIT_BIT);
 8002d72:	210c      	movs	r1, #12
 8002d74:	2001      	movs	r0, #1
 8002d76:	f7fe faf9 	bl	800136c <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, Y_LIMIT_BIT);
 8002d7a:	210d      	movs	r1, #13
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	f7fe faf5 	bl	800136c <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, Z_LIMIT_BIT);
 8002d82:	210e      	movs	r1, #14
 8002d84:	2001      	movs	r0, #1
 8002d86:	f7fe faf1 	bl	800136c <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, A_LIMIT_BIT);
 8002d8a:	210f      	movs	r1, #15
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	f7fe faed 	bl	800136c <GPIO_EXTILineConfig>
		if (bit_istrue(settings.flags, BITFLAG_INVERT_LIMIT_PINS )) { // for normally closed switches, we need to interrupt on the rising edge
 8002d92:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8002d96:	2100      	movs	r1, #0
			EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 8002d98:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002d9c:	bf14      	ite	ne
 8002d9e:	2208      	movne	r2, #8
 8002da0:	220c      	moveq	r2, #12
		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8002da2:	2301      	movs	r3, #1
		EXTI_Init(&EXTI_InitStructure);
 8002da4:	a802      	add	r0, sp, #8
		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8002da6:	f88d 100c 	strb.w	r1, [sp, #12]
 8002daa:	f88d 200d 	strb.w	r2, [sp, #13]
		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8002dae:	f88d 300e 	strb.w	r3, [sp, #14]
		EXTI_InitStructure.EXTI_Line = LIMIT_MASK;    //
 8002db2:	9402      	str	r4, [sp, #8]
		EXTI_Init(&EXTI_InitStructure);
 8002db4:	f7fd ffd0 	bl	8000d58 <EXTI_Init>
		NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn; //Enable keypad external interrupt channel
 8002db8:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <limits_init+0xa4>)
		NVIC_Init(&NVIC_InitStructure);
 8002dba:	a801      	add	r0, sp, #4
		NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn; //Enable keypad external interrupt channel
 8002dbc:	9301      	str	r3, [sp, #4]
		NVIC_Init(&NVIC_InitStructure);
 8002dbe:	f7fd ff95 	bl	8000cec <NVIC_Init>
}
 8002dc2:	b005      	add	sp, #20
 8002dc4:	bd30      	pop	{r4, r5, pc}
 8002dc6:	bf00      	nop
 8002dc8:	200013ec 	.word	0x200013ec
 8002dcc:	40010c00 	.word	0x40010c00
 8002dd0:	e000e100 	.word	0xe000e100
 8002dd4:	01020228 	.word	0x01020228

08002dd8 <limits_disable>:
 8002dd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ddc:	4b01      	ldr	r3, [pc, #4]	; (8002de4 <limits_disable+0xc>)
 8002dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PCICR &= ~(1 << LIMIT_INT);  // Disable Pin Change Interrupt
#endif
#ifdef STM32F103C8
  NVIC_DisableIRQ(EXTI15_10_IRQn);
#endif
}
 8002de2:	4770      	bx	lr
 8002de4:	e000e100 	.word	0xe000e100

08002de8 <limits_get_state>:

// Returns limit state as a bit-wise uint8 variable. Each bit indicates an axis limit, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Axes are defined by their
// number in bit position, i.e. Z_AXIS is (1<<2) or bit 2, and Y_AXIS is (1<<1) or bit 1.
uint8_t limits_get_state()
{
 8002de8:	b508      	push	{r3, lr}
#if defined(AVRTARGET) || defined(STM32F103C8)
#if defined(AVRTARGET)
  uint8_t pin = (LIMIT_PIN & LIMIT_MASK);
#endif
#if defined(STM32F103C8)
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 8002dea:	4812      	ldr	r0, [pc, #72]	; (8002e34 <limits_get_state+0x4c>)
 8002dec:	f7fe fa74 	bl	80012d8 <GPIO_ReadInputData>
#endif
  #ifdef INVERT_LIMIT_PIN_MASK
    pin ^= INVERT_LIMIT_PIN_MASK;
  #endif
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 8002df0:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <limits_get_state+0x50>)
 8002df2:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 8002df6:	4603      	mov	r3, r0
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 8002df8:	0652      	lsls	r2, r2, #25
 8002dfa:	bf5c      	itt	pl
 8002dfc:	f480 4370 	eorpl.w	r3, r0, #61440	; 0xf000
 8002e00:	b29b      	uxthpl	r3, r3
  if (pin) {
 8002e02:	b1ab      	cbz	r3, 8002e30 <limits_get_state+0x48>
    uint8_t idx;
    for (idx=0; idx<N_AXIS; idx++) {
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8002e04:	4a0d      	ldr	r2, [pc, #52]	; (8002e3c <limits_get_state+0x54>)
 8002e06:	8810      	ldrh	r0, [r2, #0]
 8002e08:	8851      	ldrh	r1, [r2, #2]
 8002e0a:	4203      	tst	r3, r0
  uint8_t limit_state = 0;
 8002e0c:	bf14      	ite	ne
 8002e0e:	2001      	movne	r0, #1
 8002e10:	2000      	moveq	r0, #0
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8002e12:	420b      	tst	r3, r1
 8002e14:	8891      	ldrh	r1, [r2, #4]
 8002e16:	88d2      	ldrh	r2, [r2, #6]
 8002e18:	bf18      	it	ne
 8002e1a:	f040 0002 	orrne.w	r0, r0, #2
 8002e1e:	420b      	tst	r3, r1
 8002e20:	bf18      	it	ne
 8002e22:	f040 0004 	orrne.w	r0, r0, #4
 8002e26:	4213      	tst	r3, r2
 8002e28:	d001      	beq.n	8002e2e <limits_get_state+0x46>
 8002e2a:	f040 0008 	orr.w	r0, r0, #8
    }
  }
#endif
  return(limit_state);
}
 8002e2e:	bd08      	pop	{r3, pc}
  uint8_t limit_state = 0;
 8002e30:	4618      	mov	r0, r3
}
 8002e32:	bd08      	pop	{r3, pc}
 8002e34:	40010c00 	.word	0x40010c00
 8002e38:	200013ec 	.word	0x200013ec
 8002e3c:	0800af90 	.word	0x0800af90

08002e40 <EXTI15_10_IRQHandler>:
#if defined(AVRTARGET) 
ISR(LIMIT_INT_vect) // DEFAULT: Limit pin change interrupt process.
#else
void EXTI15_10_IRQHandler(void)
#endif
{
 8002e40:	b508      	push	{r3, lr}
#if defined (STM32F103C8)
	if (EXTI_GetITStatus(1 << X_LIMIT_BIT) != RESET)
 8002e42:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002e46:	f7fd ffc7 	bl	8000dd8 <EXTI_GetITStatus>
 8002e4a:	bb88      	cbnz	r0, 8002eb0 <EXTI15_10_IRQHandler+0x70>
	{
		EXTI_ClearITPendingBit(1 << X_LIMIT_BIT);
	}
	if (EXTI_GetITStatus(1 << Y_LIMIT_BIT) != RESET)
 8002e4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e50:	f7fd ffc2 	bl	8000dd8 <EXTI_GetITStatus>
 8002e54:	bb38      	cbnz	r0, 8002ea6 <EXTI15_10_IRQHandler+0x66>
	{
		EXTI_ClearITPendingBit(1 << Y_LIMIT_BIT);
	}
	if (EXTI_GetITStatus(1 << Z_LIMIT_BIT) != RESET)
 8002e56:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002e5a:	f7fd ffbd 	bl	8000dd8 <EXTI_GetITStatus>
 8002e5e:	b9e8      	cbnz	r0, 8002e9c <EXTI15_10_IRQHandler+0x5c>
	{
		EXTI_ClearITPendingBit(1 << Z_LIMIT_BIT);
	}
// --- YSV 22-06-2018
	#if defined(AA_AXIS) || defined(AB_AXIS) || defined(ABC_AXIS)
	if (EXTI_GetITStatus(1 << A_LIMIT_BIT) != RESET)
 8002e60:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002e64:	f7fd ffb8 	bl	8000dd8 <EXTI_GetITStatus>
 8002e68:	b998      	cbnz	r0, 8002e92 <EXTI15_10_IRQHandler+0x52>

    \param [in]      IRQn  Number of the interrupt for clear pending
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 8002e6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e6e:	4a13      	ldr	r2, [pc, #76]	; (8002ebc <EXTI15_10_IRQHandler+0x7c>)
  // Ignore limit switches if already in an alarm state or in-process of executing an alarm.
  // When in the alarm state, Grbl should have been reset or will force a reset, so any pending
  // moves in the planner and serial buffers are all cleared and newly sent blocks will be
  // locked out until a homing cycle or a kill lock command. Allows the user to disable the hard
  // limit setting if their limits are constantly triggering after a reset and move their axes.
  if (sys.state != STATE_ALARM) {
 8002e70:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <EXTI15_10_IRQHandler+0x80>)
 8002e72:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d002      	beq.n	8002e82 <EXTI15_10_IRQHandler+0x42>
    if (!(sys_rt_exec_alarm)) {
 8002e7c:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <EXTI15_10_IRQHandler+0x84>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	b103      	cbz	r3, 8002e84 <EXTI15_10_IRQHandler+0x44>
      mc_reset(); // Initiate system kill.
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
#endif
    }
  }
}
 8002e82:	bd08      	pop	{r3, pc}
      mc_reset(); // Initiate system kill.
 8002e84:	f000 fdd4 	bl	8003a30 <mc_reset>
}
 8002e88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	f005 bb87 	b.w	80085a0 <system_set_exec_alarm>
		EXTI_ClearITPendingBit(1 << A_LIMIT_BIT);
 8002e92:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002e96:	f7fd ffad 	bl	8000df4 <EXTI_ClearITPendingBit>
 8002e9a:	e7e6      	b.n	8002e6a <EXTI15_10_IRQHandler+0x2a>
		EXTI_ClearITPendingBit(1 << Z_LIMIT_BIT);
 8002e9c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ea0:	f7fd ffa8 	bl	8000df4 <EXTI_ClearITPendingBit>
 8002ea4:	e7dc      	b.n	8002e60 <EXTI15_10_IRQHandler+0x20>
		EXTI_ClearITPendingBit(1 << Y_LIMIT_BIT);
 8002ea6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002eaa:	f7fd ffa3 	bl	8000df4 <EXTI_ClearITPendingBit>
 8002eae:	e7d2      	b.n	8002e56 <EXTI15_10_IRQHandler+0x16>
		EXTI_ClearITPendingBit(1 << X_LIMIT_BIT);
 8002eb0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002eb4:	f7fd ff9e 	bl	8000df4 <EXTI_ClearITPendingBit>
 8002eb8:	e7c8      	b.n	8002e4c <EXTI15_10_IRQHandler+0xc>
 8002eba:	bf00      	nop
 8002ebc:	e000e100 	.word	0xe000e100
 8002ec0:	200009d0 	.word	0x200009d0
 8002ec4:	20000a06 	.word	0x20000a06

08002ec8 <limits_go_home>:
// mask, which prevents the stepper algorithm from executing step pulses. Homing motions typically
// circumvent the processes for executing motions in normal operation.
// NOTE: Only the abort realtime command can interrupt this process.
// TODO: Move limit pin-specific calls to a general function for portability.
void limits_go_home(uint8_t cycle_mask)
{
 8002ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sys.abort) { return; } // Block if system reset has been issued.
 8002ecc:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 80030c4 <limits_go_home+0x1fc>
{
 8002ed0:	b093      	sub	sp, #76	; 0x4c
  if (sys.abort) { return; } // Block if system reset has been issued.
 8002ed2:	f898 3001 	ldrb.w	r3, [r8, #1]
{
 8002ed6:	9006      	str	r0, [sp, #24]
  if (sys.abort) { return; } // Block if system reset has been issued.
 8002ed8:	b113      	cbz	r3, 8002ee0 <limits_go_home+0x18>
      #endif

    }
  }
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
}
 8002eda:	b013      	add	sp, #76	; 0x4c
 8002edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memset(pl_data,0,sizeof(plan_line_data_t));
 8002ee0:	4604      	mov	r4, r0
    step_pin[idx] = step_pin_mask[idx];
 8002ee2:	4a79      	ldr	r2, [pc, #484]	; (80030c8 <limits_go_home+0x200>)
  memset(pl_data,0,sizeof(plan_line_data_t));
 8002ee4:	930d      	str	r3, [sp, #52]	; 0x34
    step_pin[idx] = step_pin_mask[idx];
 8002ee6:	6810      	ldr	r0, [r2, #0]
 8002ee8:	6851      	ldr	r1, [r2, #4]
  memset(pl_data,0,sizeof(plan_line_data_t));
 8002eea:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
    step_pin[idx] = step_pin_mask[idx];
 8002eee:	ab09      	add	r3, sp, #36	; 0x24
 8002ef0:	c303      	stmia	r3!, {r0, r1}
    if (bit_istrue(cycle_mask,bit(idx))) {
 8002ef2:	4623      	mov	r3, r4
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 8002ef4:	2506      	movs	r5, #6
    if (bit_istrue(cycle_mask,bit(idx))) {
 8002ef6:	f013 0301 	ands.w	r3, r3, #1
 8002efa:	f004 0401 	and.w	r4, r4, #1
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 8002efe:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
    if (bit_istrue(cycle_mask,bit(idx))) {
 8002f02:	9307      	str	r3, [sp, #28]
 8002f04:	f000 81e3 	beq.w	80032ce <limits_go_home+0x406>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8002f08:	4f70      	ldr	r7, [pc, #448]	; (80030cc <limits_go_home+0x204>)
 8002f0a:	4971      	ldr	r1, [pc, #452]	; (80030d0 <limits_go_home+0x208>)
 8002f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f0e:	f7fd fcc1 	bl	8000894 <__aeabi_fmul>
 8002f12:	2100      	movs	r1, #0
 8002f14:	4681      	mov	r9, r0
 8002f16:	f7fd fe6f 	bl	8000bf8 <__aeabi_fcmpge>
 8002f1a:	2800      	cmp	r0, #0
 8002f1c:	f000 81e1 	beq.w	80032e2 <limits_go_home+0x41a>
    if (bit_istrue(cycle_mask,bit(idx))) {
 8002f20:	9b06      	ldr	r3, [sp, #24]
 8002f22:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8002f26:	079b      	lsls	r3, r3, #30
 8002f28:	9203      	str	r2, [sp, #12]
 8002f2a:	d50b      	bpl.n	8002f44 <limits_go_home+0x7c>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8002f2c:	4968      	ldr	r1, [pc, #416]	; (80030d0 <limits_go_home+0x208>)
 8002f2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f30:	f7fd fcb0 	bl	8000894 <__aeabi_fmul>
 8002f34:	4605      	mov	r5, r0
 8002f36:	4648      	mov	r0, r9
 8002f38:	4629      	mov	r1, r5
 8002f3a:	f7fd fe5d 	bl	8000bf8 <__aeabi_fcmpge>
 8002f3e:	2800      	cmp	r0, #0
 8002f40:	f000 81cd 	beq.w	80032de <limits_go_home+0x416>
    if (bit_istrue(cycle_mask,bit(idx))) {
 8002f44:	9b06      	ldr	r3, [sp, #24]
 8002f46:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8002f4a:	075e      	lsls	r6, r3, #29
 8002f4c:	9205      	str	r2, [sp, #20]
 8002f4e:	d50b      	bpl.n	8002f68 <limits_go_home+0xa0>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8002f50:	495f      	ldr	r1, [pc, #380]	; (80030d0 <limits_go_home+0x208>)
 8002f52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f54:	f7fd fc9e 	bl	8000894 <__aeabi_fmul>
 8002f58:	4605      	mov	r5, r0
 8002f5a:	4648      	mov	r0, r9
 8002f5c:	4629      	mov	r1, r5
 8002f5e:	f7fd fe4b 	bl	8000bf8 <__aeabi_fcmpge>
 8002f62:	2800      	cmp	r0, #0
 8002f64:	f000 81b9 	beq.w	80032da <limits_go_home+0x412>
    if (bit_istrue(cycle_mask,bit(idx))) {
 8002f68:	9b06      	ldr	r3, [sp, #24]
 8002f6a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8002f6e:	071d      	lsls	r5, r3, #28
 8002f70:	9204      	str	r2, [sp, #16]
 8002f72:	d50b      	bpl.n	8002f8c <limits_go_home+0xc4>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8002f74:	4956      	ldr	r1, [pc, #344]	; (80030d0 <limits_go_home+0x208>)
 8002f76:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002f78:	f7fd fc8c 	bl	8000894 <__aeabi_fmul>
 8002f7c:	4605      	mov	r5, r0
 8002f7e:	4648      	mov	r0, r9
 8002f80:	4629      	mov	r1, r5
 8002f82:	f7fd fe39 	bl	8000bf8 <__aeabi_fcmpge>
 8002f86:	2800      	cmp	r0, #0
 8002f88:	f000 81a5 	beq.w	80032d6 <limits_go_home+0x40e>
  float homing_rate = settings.homing_seek_rate;
 8002f8c:	2304      	movs	r3, #4
 8002f8e:	f8d7 b060 	ldr.w	fp, [r7, #96]	; 0x60
 8002f92:	b2e2      	uxtb	r2, r4
 8002f94:	9301      	str	r3, [sp, #4]
  bool approach = true;
 8002f96:	2501      	movs	r5, #1
 8002f98:	464b      	mov	r3, r9
 8002f9a:	46d9      	mov	r9, fp
 8002f9c:	4693      	mov	fp, r2
 8002f9e:	4e4d      	ldr	r6, [pc, #308]	; (80030d4 <limits_go_home+0x20c>)
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8002fa0:	f8df a134 	ldr.w	sl, [pc, #308]	; 80030d8 <limits_go_home+0x210>
    system_convert_array_steps_to_mpos(target,sys_position);
 8002fa4:	494d      	ldr	r1, [pc, #308]	; (80030dc <limits_go_home+0x214>)
 8002fa6:	a80e      	add	r0, sp, #56	; 0x38
 8002fa8:	9302      	str	r3, [sp, #8]
 8002faa:	f005 fa89 	bl	80084c0 <system_convert_array_steps_to_mpos>
      if (bit_istrue(cycle_mask,bit(idx))) {
 8002fae:	9b02      	ldr	r3, [sp, #8]
 8002fb0:	f1bb 0f00 	cmp.w	fp, #0
 8002fb4:	f000 8125 	beq.w	8003202 <limits_go_home+0x33a>
          sys_position[idx] = 0;
 8002fb8:	2200      	movs	r2, #0
 8002fba:	4948      	ldr	r1, [pc, #288]	; (80030dc <limits_go_home+0x214>)
 8002fbc:	600a      	str	r2, [r1, #0]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8002fbe:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8002fc2:	07d4      	lsls	r4, r2, #31
 8002fc4:	f140 8131 	bpl.w	800322a <limits_go_home+0x362>
          if (approach) { target[idx] = -max_travel; }
 8002fc8:	2d00      	cmp	r5, #0
 8002fca:	f040 8131 	bne.w	8003230 <limits_go_home+0x368>
          else { target[idx] = max_travel; }
 8002fce:	930e      	str	r3, [sp, #56]	; 0x38
        n_active_axis++;
 8002fd0:	4658      	mov	r0, fp
        axislock |= step_pin[idx];
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
      if (bit_istrue(cycle_mask,bit(idx))) {
 8002fd8:	9903      	ldr	r1, [sp, #12]
 8002fda:	b179      	cbz	r1, 8002ffc <limits_go_home+0x134>
          sys_position[idx] = 0;
 8002fdc:	2100      	movs	r1, #0
 8002fde:	483f      	ldr	r0, [pc, #252]	; (80030dc <limits_go_home+0x214>)
 8002fe0:	6041      	str	r1, [r0, #4]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8002fe2:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8002fe6:	0788      	lsls	r0, r1, #30
 8002fe8:	f140 8118 	bpl.w	800321c <limits_go_home+0x354>
          if (approach) { target[idx] = -max_travel; }
 8002fec:	2d00      	cmp	r5, #0
 8002fee:	f040 8118 	bne.w	8003222 <limits_go_home+0x35a>
          else { target[idx] = max_travel; }
 8002ff2:	930f      	str	r3, [sp, #60]	; 0x3c
        n_active_axis++;
 8002ff4:	4610      	mov	r0, r2
        axislock |= step_pin[idx];
 8002ff6:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8002ffa:	4314      	orrs	r4, r2
      if (bit_istrue(cycle_mask,bit(idx))) {
 8002ffc:	9a05      	ldr	r2, [sp, #20]
 8002ffe:	b182      	cbz	r2, 8003022 <limits_go_home+0x15a>
          sys_position[idx] = 0;
 8003000:	2200      	movs	r2, #0
 8003002:	4936      	ldr	r1, [pc, #216]	; (80030dc <limits_go_home+0x214>)
        n_active_axis++;
 8003004:	3001      	adds	r0, #1
          sys_position[idx] = 0;
 8003006:	608a      	str	r2, [r1, #8]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003008:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
        n_active_axis++;
 800300c:	b2c0      	uxtb	r0, r0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800300e:	0751      	lsls	r1, r2, #29
 8003010:	f140 8112 	bpl.w	8003238 <limits_go_home+0x370>
          if (approach) { target[idx] = -max_travel; }
 8003014:	2d00      	cmp	r5, #0
 8003016:	f040 8112 	bne.w	800323e <limits_go_home+0x376>
          else { target[idx] = max_travel; }
 800301a:	9310      	str	r3, [sp, #64]	; 0x40
        axislock |= step_pin[idx];
 800301c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8003020:	4314      	orrs	r4, r2
      if (bit_istrue(cycle_mask,bit(idx))) {
 8003022:	9a04      	ldr	r2, [sp, #16]
 8003024:	b182      	cbz	r2, 8003048 <limits_go_home+0x180>
          sys_position[idx] = 0;
 8003026:	2200      	movs	r2, #0
 8003028:	492c      	ldr	r1, [pc, #176]	; (80030dc <limits_go_home+0x214>)
        n_active_axis++;
 800302a:	3001      	adds	r0, #1
          sys_position[idx] = 0;
 800302c:	60ca      	str	r2, [r1, #12]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800302e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
        n_active_axis++;
 8003032:	b2c0      	uxtb	r0, r0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003034:	0712      	lsls	r2, r2, #28
 8003036:	f100 80ed 	bmi.w	8003214 <limits_go_home+0x34c>
          if (approach) { target[idx] = max_travel; }
 800303a:	b90d      	cbnz	r5, 8003040 <limits_go_home+0x178>
          if (approach) { target[idx] = -max_travel; }
 800303c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003040:	9311      	str	r3, [sp, #68]	; 0x44
        axislock |= step_pin[idx];
 8003042:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8003046:	431c      	orrs	r4, r3
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 8003048:	f7fd fbcc 	bl	80007e4 <__aeabi_ui2f>
 800304c:	f006 fef8 	bl	8009e40 <sqrtf>
 8003050:	4649      	mov	r1, r9
    sys.homing_axis_lock = axislock;
 8003052:	f8a8 4006 	strh.w	r4, [r8, #6]
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 8003056:	f7fd fc1d 	bl	8000894 <__aeabi_fmul>
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 800305a:	a90b      	add	r1, sp, #44	; 0x2c
    pl_data->feed_rate = homing_rate; // Set current homing rate.
 800305c:	900b      	str	r0, [sp, #44]	; 0x2c
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 800305e:	a80e      	add	r0, sp, #56	; 0x38
 8003060:	f001 f908 	bl	8004274 <plan_buffer_line>
    sys.step_control = STEP_CONTROL_EXECUTE_SYS_MOTION; // Set to execute homing motion and clear existing flags.
 8003064:	2304      	movs	r3, #4
 8003066:	f888 3004 	strb.w	r3, [r8, #4]
    st_prep_buffer(); // Prep and fill segment buffer from newly planned block.
 800306a:	f004 fad5 	bl	8007618 <st_prep_buffer>
    st_wake_up(); // Initiate motion
 800306e:	f003 ff9f 	bl	8006fb0 <st_wake_up>
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 8003072:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80030e0 <limits_go_home+0x218>
      if (approach) {
 8003076:	2d00      	cmp	r5, #0
 8003078:	d136      	bne.n	80030e8 <limits_go_home+0x220>
      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 800307a:	f004 facd 	bl	8007618 <st_prep_buffer>
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 800307e:	7833      	ldrb	r3, [r6, #0]
 8003080:	f013 0f34 	tst.w	r3, #52	; 0x34
 8003084:	d179      	bne.n	800317a <limits_go_home+0x2b2>
    } while (STEP_MASK & axislock);
 8003086:	0723      	lsls	r3, r4, #28
 8003088:	d1f5      	bne.n	8003076 <limits_go_home+0x1ae>
    st_reset(); // Immediately force kill steppers and reset step segment buffer.
 800308a:	f004 f987 	bl	800739c <st_reset>
    delay_ms(settings.homing_debounce_delay); // Delay to allow transient dynamics to dissipate.
 800308e:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 8003092:	f000 fdc9 	bl	8003c28 <delay_ms>
    approach = !approach;
 8003096:	f085 0401 	eor.w	r4, r5, #1
    if (approach) {
 800309a:	2d00      	cmp	r5, #0
 800309c:	f040 80b5 	bne.w	800320a <limits_go_home+0x342>
      max_travel = settings.homing_pulloff*HOMING_AXIS_LOCATE_SCALAR;
 80030a0:	6ebd      	ldr	r5, [r7, #104]	; 0x68
 80030a2:	4910      	ldr	r1, [pc, #64]	; (80030e4 <limits_go_home+0x21c>)
 80030a4:	4628      	mov	r0, r5
 80030a6:	f7fd fbf5 	bl	8000894 <__aeabi_fmul>
 80030aa:	4603      	mov	r3, r0
      homing_rate = settings.homing_feed_rate;
 80030ac:	f8d7 905c 	ldr.w	r9, [r7, #92]	; 0x5c
  } while (n_cycle-- > 0);
 80030b0:	9a01      	ldr	r2, [sp, #4]
 80030b2:	3a01      	subs	r2, #1
 80030b4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80030b8:	9201      	str	r2, [sp, #4]
 80030ba:	f000 80c4 	beq.w	8003246 <limits_go_home+0x37e>
    approach = !approach;
 80030be:	4625      	mov	r5, r4
 80030c0:	e770      	b.n	8002fa4 <limits_go_home+0xdc>
 80030c2:	bf00      	nop
 80030c4:	200009d0 	.word	0x200009d0
 80030c8:	0800af98 	.word	0x0800af98
 80030cc:	200013ec 	.word	0x200013ec
 80030d0:	bfc00000 	.word	0xbfc00000
 80030d4:	20000a08 	.word	0x20000a08
 80030d8:	0800af90 	.word	0x0800af90
 80030dc:	200009e4 	.word	0x200009e4
 80030e0:	40010c00 	.word	0x40010c00
 80030e4:	40a00000 	.word	0x40a00000
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 80030e8:	4648      	mov	r0, r9
 80030ea:	f7fe f8f5 	bl	80012d8 <GPIO_ReadInputData>
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 80030ee:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80030f2:	065b      	lsls	r3, r3, #25
 80030f4:	bf5c      	itt	pl
 80030f6:	f480 4070 	eorpl.w	r0, r0, #61440	; 0xf000
 80030fa:	b280      	uxthpl	r0, r0
  if (pin) {
 80030fc:	2800      	cmp	r0, #0
 80030fe:	d034      	beq.n	800316a <limits_go_home+0x2a2>
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8003100:	f8ba 3000 	ldrh.w	r3, [sl]
 8003104:	4218      	tst	r0, r3
 8003106:	bf14      	ite	ne
 8003108:	2201      	movne	r2, #1
 800310a:	2200      	moveq	r2, #0
 800310c:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8003110:	4218      	tst	r0, r3
 8003112:	bf14      	ite	ne
 8003114:	f042 0302 	orrne.w	r3, r2, #2
  uint8_t limit_state = 0;
 8003118:	4613      	moveq	r3, r2
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 800311a:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800311e:	4210      	tst	r0, r2
 8003120:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 8003124:	bf18      	it	ne
 8003126:	f043 0304 	orrne.w	r3, r3, #4
 800312a:	4210      	tst	r0, r2
          if (axislock & step_pin[idx]) {
 800312c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8003130:	bf18      	it	ne
 8003132:	f043 0308 	orrne.w	r3, r3, #8
          if (axislock & step_pin[idx]) {
 8003136:	4214      	tst	r4, r2
 8003138:	d002      	beq.n	8003140 <limits_go_home+0x278>
            if (limit_state & (1 << idx)) {
 800313a:	07d9      	lsls	r1, r3, #31
                axislock &= ~(step_pin[idx]);
 800313c:	bf48      	it	mi
 800313e:	4394      	bicmi	r4, r2
          if (axislock & step_pin[idx]) {
 8003140:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8003144:	4214      	tst	r4, r2
 8003146:	d002      	beq.n	800314e <limits_go_home+0x286>
            if (limit_state & (1 << idx)) {
 8003148:	0798      	lsls	r0, r3, #30
                axislock &= ~(step_pin[idx]);
 800314a:	bf48      	it	mi
 800314c:	4394      	bicmi	r4, r2
          if (axislock & step_pin[idx]) {
 800314e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8003152:	4214      	tst	r4, r2
 8003154:	d002      	beq.n	800315c <limits_go_home+0x294>
            if (limit_state & (1 << idx)) {
 8003156:	0759      	lsls	r1, r3, #29
                axislock &= ~(step_pin[idx]);
 8003158:	bf48      	it	mi
 800315a:	4394      	bicmi	r4, r2
          if (axislock & step_pin[idx]) {
 800315c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8003160:	4214      	tst	r4, r2
 8003162:	d002      	beq.n	800316a <limits_go_home+0x2a2>
            if (limit_state & (1 << idx)) {
 8003164:	08db      	lsrs	r3, r3, #3
                axislock &= ~(step_pin[idx]);
 8003166:	bf18      	it	ne
 8003168:	4394      	bicne	r4, r2
        sys.homing_axis_lock = axislock;
 800316a:	f8a8 4006 	strh.w	r4, [r8, #6]
      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 800316e:	f004 fa53 	bl	8007618 <st_prep_buffer>
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 8003172:	7833      	ldrb	r3, [r6, #0]
 8003174:	f013 0f34 	tst.w	r3, #52	; 0x34
 8003178:	d085      	beq.n	8003086 <limits_go_home+0x1be>
        uint8_t rt_exec = sys_rt_exec_state;
 800317a:	7833      	ldrb	r3, [r6, #0]
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 800317c:	06d8      	lsls	r0, r3, #27
        uint8_t rt_exec = sys_rt_exec_state;
 800317e:	b2dc      	uxtb	r4, r3
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8003180:	f100 80a1 	bmi.w	80032c6 <limits_go_home+0x3fe>
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 8003184:	06a1      	lsls	r1, r4, #26
 8003186:	d40c      	bmi.n	80031a2 <limits_go_home+0x2da>
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 8003188:	b185      	cbz	r5, 80031ac <limits_go_home+0x2e4>
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 800318a:	0763      	lsls	r3, r4, #29
 800318c:	f100 80d4 	bmi.w	8003338 <limits_go_home+0x470>
        if (sys_rt_exec_alarm) {
 8003190:	4b6e      	ldr	r3, [pc, #440]	; (800334c <limits_go_home+0x484>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	f040 80d3 	bne.w	8003340 <limits_go_home+0x478>
          system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 800319a:	2004      	movs	r0, #4
 800319c:	f005 f9f6 	bl	800858c <system_clear_exec_state_flag>
          break;
 80031a0:	e773      	b.n	800308a <limits_go_home+0x1c2>
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 80031a2:	2007      	movs	r0, #7
 80031a4:	f005 f9fc 	bl	80085a0 <system_set_exec_alarm>
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 80031a8:	2d00      	cmp	r5, #0
 80031aa:	d1ee      	bne.n	800318a <limits_go_home+0x2c2>
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 80031ac:	4868      	ldr	r0, [pc, #416]	; (8003350 <limits_go_home+0x488>)
 80031ae:	f7fe f893 	bl	80012d8 <GPIO_ReadInputData>
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 80031b2:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80031b6:	065a      	lsls	r2, r3, #25
 80031b8:	bf5c      	itt	pl
 80031ba:	f480 4070 	eorpl.w	r0, r0, #61440	; 0xf000
 80031be:	b280      	uxthpl	r0, r0
  if (pin) {
 80031c0:	2800      	cmp	r0, #0
 80031c2:	d0e5      	beq.n	8003190 <limits_go_home+0x2c8>
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 80031c4:	f8ba 3000 	ldrh.w	r3, [sl]
 80031c8:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 80031cc:	4218      	tst	r0, r3
 80031ce:	bf14      	ite	ne
 80031d0:	2301      	movne	r3, #1
 80031d2:	2300      	moveq	r3, #0
 80031d4:	4210      	tst	r0, r2
 80031d6:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80031da:	bf18      	it	ne
 80031dc:	f043 0302 	orrne.w	r3, r3, #2
 80031e0:	4210      	tst	r0, r2
 80031e2:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 80031e6:	bf18      	it	ne
 80031e8:	f043 0304 	orrne.w	r3, r3, #4
 80031ec:	4210      	tst	r0, r2
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 80031ee:	9a06      	ldr	r2, [sp, #24]
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 80031f0:	bf18      	it	ne
 80031f2:	f043 0308 	orrne.w	r3, r3, #8
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 80031f6:	421a      	tst	r2, r3
 80031f8:	d0ca      	beq.n	8003190 <limits_go_home+0x2c8>
 80031fa:	2008      	movs	r0, #8
 80031fc:	f005 f9d0 	bl	80085a0 <system_set_exec_alarm>
 8003200:	e7c6      	b.n	8003190 <limits_go_home+0x2c8>
    n_active_axis = 0;
 8003202:	4658      	mov	r0, fp
      if (bit_istrue(cycle_mask,bit(idx))) {
 8003204:	2201      	movs	r2, #1
    axislock = 0;
 8003206:	465c      	mov	r4, fp
 8003208:	e6e6      	b.n	8002fd8 <limits_go_home+0x110>
      max_travel = settings.homing_pulloff;
 800320a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
      homing_rate = settings.homing_seek_rate;
 800320c:	f8d7 9060 	ldr.w	r9, [r7, #96]	; 0x60
 8003210:	461d      	mov	r5, r3
 8003212:	e74d      	b.n	80030b0 <limits_go_home+0x1e8>
          if (approach) { target[idx] = -max_travel; }
 8003214:	2d00      	cmp	r5, #0
 8003216:	f47f af11 	bne.w	800303c <limits_go_home+0x174>
 800321a:	e711      	b.n	8003040 <limits_go_home+0x178>
          if (approach) { target[idx] = max_travel; }
 800321c:	2d00      	cmp	r5, #0
 800321e:	f47f aee8 	bne.w	8002ff2 <limits_go_home+0x12a>
          if (approach) { target[idx] = -max_travel; }
 8003222:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003226:	910f      	str	r1, [sp, #60]	; 0x3c
 8003228:	e6e4      	b.n	8002ff4 <limits_go_home+0x12c>
          if (approach) { target[idx] = max_travel; }
 800322a:	2d00      	cmp	r5, #0
 800322c:	f47f aecf 	bne.w	8002fce <limits_go_home+0x106>
          if (approach) { target[idx] = -max_travel; }
 8003230:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 8003234:	920e      	str	r2, [sp, #56]	; 0x38
 8003236:	e6cb      	b.n	8002fd0 <limits_go_home+0x108>
          if (approach) { target[idx] = max_travel; }
 8003238:	2d00      	cmp	r5, #0
 800323a:	f47f aeee 	bne.w	800301a <limits_go_home+0x152>
          if (approach) { target[idx] = -max_travel; }
 800323e:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 8003242:	9210      	str	r2, [sp, #64]	; 0x40
 8003244:	e6ea      	b.n	800301c <limits_go_home+0x154>
    if (cycle_mask & bit(idx)) {
 8003246:	9b07      	ldr	r3, [sp, #28]
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 8003248:	f8b7 405a 	ldrh.w	r4, [r7, #90]	; 0x5a
    if (cycle_mask & bit(idx)) {
 800324c:	b15b      	cbz	r3, 8003266 <limits_go_home+0x39e>
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 800324e:	07e6      	lsls	r6, r4, #31
 8003250:	d468      	bmi.n	8003324 <limits_go_home+0x45c>
          set_axis_position = lroundf(-settings.homing_pulloff*settings.steps_per_mm[idx]);
 8003252:	4628      	mov	r0, r5
 8003254:	6839      	ldr	r1, [r7, #0]
 8003256:	f7fd fb1d 	bl	8000894 <__aeabi_fmul>
 800325a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800325e:	f006 fd87 	bl	8009d70 <lroundf>
        sys_position[idx] = set_axis_position;
 8003262:	4b3c      	ldr	r3, [pc, #240]	; (8003354 <limits_go_home+0x48c>)
 8003264:	6018      	str	r0, [r3, #0]
    if (cycle_mask & bit(idx)) {
 8003266:	9b03      	ldr	r3, [sp, #12]
 8003268:	b15b      	cbz	r3, 8003282 <limits_go_home+0x3ba>
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 800326a:	07a0      	lsls	r0, r4, #30
 800326c:	d450      	bmi.n	8003310 <limits_go_home+0x448>
          set_axis_position = lroundf(-settings.homing_pulloff*settings.steps_per_mm[idx]);
 800326e:	4628      	mov	r0, r5
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	f7fd fb0f 	bl	8000894 <__aeabi_fmul>
 8003276:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800327a:	f006 fd79 	bl	8009d70 <lroundf>
        sys_position[idx] = set_axis_position;
 800327e:	4b35      	ldr	r3, [pc, #212]	; (8003354 <limits_go_home+0x48c>)
 8003280:	6058      	str	r0, [r3, #4]
    if (cycle_mask & bit(idx)) {
 8003282:	9b05      	ldr	r3, [sp, #20]
 8003284:	b15b      	cbz	r3, 800329e <limits_go_home+0x3d6>
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 8003286:	0761      	lsls	r1, r4, #29
 8003288:	d438      	bmi.n	80032fc <limits_go_home+0x434>
          set_axis_position = lroundf(-settings.homing_pulloff*settings.steps_per_mm[idx]);
 800328a:	4628      	mov	r0, r5
 800328c:	68b9      	ldr	r1, [r7, #8]
 800328e:	f7fd fb01 	bl	8000894 <__aeabi_fmul>
 8003292:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003296:	f006 fd6b 	bl	8009d70 <lroundf>
        sys_position[idx] = set_axis_position;
 800329a:	4b2e      	ldr	r3, [pc, #184]	; (8003354 <limits_go_home+0x48c>)
 800329c:	6098      	str	r0, [r3, #8]
    if (cycle_mask & bit(idx)) {
 800329e:	9b04      	ldr	r3, [sp, #16]
 80032a0:	b15b      	cbz	r3, 80032ba <limits_go_home+0x3f2>
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 80032a2:	0722      	lsls	r2, r4, #28
 80032a4:	d420      	bmi.n	80032e8 <limits_go_home+0x420>
          set_axis_position = lroundf(-settings.homing_pulloff*settings.steps_per_mm[idx]);
 80032a6:	4628      	mov	r0, r5
 80032a8:	68f9      	ldr	r1, [r7, #12]
 80032aa:	f7fd faf3 	bl	8000894 <__aeabi_fmul>
 80032ae:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80032b2:	f006 fd5d 	bl	8009d70 <lroundf>
        sys_position[idx] = set_axis_position;
 80032b6:	4b27      	ldr	r3, [pc, #156]	; (8003354 <limits_go_home+0x48c>)
 80032b8:	60d8      	str	r0, [r3, #12]
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
 80032ba:	2300      	movs	r3, #0
 80032bc:	f888 3004 	strb.w	r3, [r8, #4]
}
 80032c0:	b013      	add	sp, #76	; 0x4c
 80032c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 80032c6:	2006      	movs	r0, #6
 80032c8:	f005 f96a 	bl	80085a0 <system_set_exec_alarm>
 80032cc:	e75a      	b.n	8003184 <limits_go_home+0x2bc>
  float max_travel = 0.0f;
 80032ce:	f04f 0900 	mov.w	r9, #0
 80032d2:	4f21      	ldr	r7, [pc, #132]	; (8003358 <limits_go_home+0x490>)
 80032d4:	e624      	b.n	8002f20 <limits_go_home+0x58>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 80032d6:	46a9      	mov	r9, r5
 80032d8:	e658      	b.n	8002f8c <limits_go_home+0xc4>
 80032da:	46a9      	mov	r9, r5
 80032dc:	e644      	b.n	8002f68 <limits_go_home+0xa0>
 80032de:	46a9      	mov	r9, r5
 80032e0:	e630      	b.n	8002f44 <limits_go_home+0x7c>
 80032e2:	f04f 0900 	mov.w	r9, #0
 80032e6:	e61b      	b.n	8002f20 <limits_go_home+0x58>
          set_axis_position = lroundf((settings.max_travel[idx]+settings.homing_pulloff)*settings.steps_per_mm[idx]);
 80032e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80032ea:	4628      	mov	r0, r5
 80032ec:	f7fd f9ca 	bl	8000684 <__addsf3>
 80032f0:	68f9      	ldr	r1, [r7, #12]
 80032f2:	f7fd facf 	bl	8000894 <__aeabi_fmul>
 80032f6:	f006 fd3b 	bl	8009d70 <lroundf>
 80032fa:	e7dc      	b.n	80032b6 <limits_go_home+0x3ee>
 80032fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032fe:	4628      	mov	r0, r5
 8003300:	f7fd f9c0 	bl	8000684 <__addsf3>
 8003304:	68b9      	ldr	r1, [r7, #8]
 8003306:	f7fd fac5 	bl	8000894 <__aeabi_fmul>
 800330a:	f006 fd31 	bl	8009d70 <lroundf>
 800330e:	e7c4      	b.n	800329a <limits_go_home+0x3d2>
 8003310:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003312:	4628      	mov	r0, r5
 8003314:	f7fd f9b6 	bl	8000684 <__addsf3>
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	f7fd fabb 	bl	8000894 <__aeabi_fmul>
 800331e:	f006 fd27 	bl	8009d70 <lroundf>
 8003322:	e7ac      	b.n	800327e <limits_go_home+0x3b6>
 8003324:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003326:	4628      	mov	r0, r5
 8003328:	f7fd f9ac 	bl	8000684 <__addsf3>
 800332c:	6839      	ldr	r1, [r7, #0]
 800332e:	f7fd fab1 	bl	8000894 <__aeabi_fmul>
 8003332:	f006 fd1d 	bl	8009d70 <lroundf>
 8003336:	e794      	b.n	8003262 <limits_go_home+0x39a>
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 8003338:	2009      	movs	r0, #9
 800333a:	f005 f931 	bl	80085a0 <system_set_exec_alarm>
 800333e:	e727      	b.n	8003190 <limits_go_home+0x2c8>
          mc_reset(); // Stop motors, if they are running.
 8003340:	f000 fb76 	bl	8003a30 <mc_reset>
          protocol_execute_realtime();
 8003344:	f002 f8d0 	bl	80054e8 <protocol_execute_realtime>
          return;
 8003348:	e5c7      	b.n	8002eda <limits_go_home+0x12>
 800334a:	bf00      	nop
 800334c:	20000a06 	.word	0x20000a06
 8003350:	40010c00 	.word	0x40010c00
 8003354:	200009e4 	.word	0x200009e4
 8003358:	200013ec 	.word	0x200013ec

0800335c <limits_soft_check>:

// Performs a soft limit check. Called from mc_line() only. Assumes the machine has been homed,
// the workspace volume is in all negative space, and the system is in normal operation.
// NOTE: Used by jogging to limit travel within soft-limit volume.
void limits_soft_check(float *target)
{
 800335c:	b510      	push	{r4, lr}
  if (system_check_travel_limits(target)) {
 800335e:	f005 f8d5 	bl	800850c <system_check_travel_limits>
 8003362:	b178      	cbz	r0, 8003384 <limits_soft_check+0x28>
    sys.soft_limit = true;
 8003364:	2301      	movs	r3, #1
 8003366:	4c0c      	ldr	r4, [pc, #48]	; (8003398 <limits_soft_check+0x3c>)
    // Force feed hold if cycle is active. All buffered blocks are guaranteed to be within
    // workspace volume so just come to a controlled stop so position is not lost. When complete
    // enter alarm mode.
    if (sys.state == STATE_CYCLE) {
 8003368:	7820      	ldrb	r0, [r4, #0]
    sys.soft_limit = true;
 800336a:	70e3      	strb	r3, [r4, #3]
    if (sys.state == STATE_CYCLE) {
 800336c:	2808      	cmp	r0, #8
 800336e:	d10a      	bne.n	8003386 <limits_soft_check+0x2a>
      system_set_exec_state_flag(EXEC_FEED_HOLD);
 8003370:	f005 f902 	bl	8008578 <system_set_exec_state_flag>
 8003374:	e001      	b.n	800337a <limits_soft_check+0x1e>
      do {
        protocol_execute_realtime();
        if (sys.abort) { return; }
      } while ( sys.state != STATE_IDLE );
 8003376:	7823      	ldrb	r3, [r4, #0]
 8003378:	b12b      	cbz	r3, 8003386 <limits_soft_check+0x2a>
        protocol_execute_realtime();
 800337a:	f002 f8b5 	bl	80054e8 <protocol_execute_realtime>
        if (sys.abort) { return; }
 800337e:	7863      	ldrb	r3, [r4, #1]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f8      	beq.n	8003376 <limits_soft_check+0x1a>
    mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
    system_set_exec_alarm(EXEC_ALARM_SOFT_LIMIT); // Indicate soft limit critical event
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
    return;
  }
}
 8003384:	bd10      	pop	{r4, pc}
    mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 8003386:	f000 fb53 	bl	8003a30 <mc_reset>
    system_set_exec_alarm(EXEC_ALARM_SOFT_LIMIT); // Indicate soft limit critical event
 800338a:	2002      	movs	r0, #2
 800338c:	f005 f908 	bl	80085a0 <system_set_exec_alarm>
}
 8003390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
 8003394:	f002 b8a8 	b.w	80054e8 <protocol_execute_realtime>
 8003398:	200009d0 	.word	0x200009d0

0800339c <main>:
#ifdef WIN32
int main(int argc, char *argv[])
#else
int main(void)
#endif
{
 800339c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined (STM32F103C8)
    //GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE); // ??? Disable JTAG and SWD!?? Bug?
#ifdef LEDBLINK
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80033a0:	2101      	movs	r1, #1
{
 80033a2:	b083      	sub	sp, #12
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80033a4:	2010      	movs	r0, #16
 80033a6:	f7fd fffd 	bl	80013a4 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;

#ifdef SileliSMod
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_15; //configure PA15 (aka !HS541_OE1pin) as output
 80033aa:	f44f 4320 	mov.w	r3, #40960	; 0xa000
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 80033ae:	f241 0202 	movw	r2, #4098	; 0x1002
#else
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
#endif

	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80033b2:	483d      	ldr	r0, [pc, #244]	; (80034a8 <main+0x10c>)
 80033b4:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_15; //configure PA15 (aka !HS541_OE1pin) as output
 80033b6:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 80033ba:	f8ad 2006 	strh.w	r2, [sp, #6]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80033be:	f7fd fdf7 	bl	8000fb0 <GPIO_Init>

#ifdef SileliSMod
	GPIO_WriteBit(GPIOC, GPIO_Pin_15, RESET);  //set !HS541_OE1pin high (disable stepper motors chip while init procedure)
 80033c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033c6:	4838      	ldr	r0, [pc, #224]	; (80034a8 <main+0x10c>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	f7fd ff91 	bl	80012f0 <GPIO_WriteBit>
#endif
	//Set_System();
#ifndef USEUSB
	USART1_Configuration(115200);
#else
	Set_USBClock();
 80033ce:	f006 f8b1 	bl	8009534 <Set_USBClock>
	USB_Interrupts_Config();
 80033d2:	f006 f8bb 	bl	800954c <USB_Interrupts_Config>
	USB_Init();
 80033d6:	f005 fe45 	bl	8009064 <USB_Init>
#endif

#ifndef NOEEPROMSUPPORT
	FLASH_Unlock();
 80033da:	f7fd fd11 	bl	8000e00 <FLASH_Unlock>
	eeprom_init();
 80033de:	f7fe f975 	bl	80016cc <eeprom_init>
#endif
	SysTick->CTRL &= 0xfffffffb;
 80033e2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80033e6:	6913      	ldr	r3, [r2, #16]
  // Initialize system state.
  #ifdef FORCE_INITIALIZATION_ALARM
    // Force Grbl into an ALARM state upon a power-cycle or hard reset.
    sys.state = STATE_ALARM;
  #else
    sys.state = STATE_IDLE;
 80033e8:	4d30      	ldr	r5, [pc, #192]	; (80034ac <main+0x110>)
	SysTick->CTRL &= 0xfffffffb;
 80033ea:	f023 0304 	bic.w	r3, r3, #4
 80033ee:	6113      	str	r3, [r2, #16]
  serial_init();   // Setup serial baud rate and interrupts
 80033f0:	f002 fff6 	bl	80063e0 <serial_init>
  settings_init(); // Load Grbl settings from EEPROM
 80033f4:	f003 fb82 	bl	8006afc <settings_init>
  stepper_init();  // Configure stepper pins and interrupt timers
 80033f8:	f004 f844 	bl	8007484 <stepper_init>
  system_init();   // Configure pinout pins and pin-change interrupt
 80033fc:	f004 fe08 	bl	8008010 <system_init>
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 8003400:	2300      	movs	r3, #0
  // cycle '$H' or kill alarm locks '$X' will disable the alarm.
  // NOTE: The startup script will run after successful completion of the homing cycle, but
  // not after disabling the alarm locks. Prevents motion startup blocks from crashing into
  // things uncontrollably. Very bad.
  #ifdef HOMING_INIT_LOCK
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 8003402:	492b      	ldr	r1, [pc, #172]	; (80034b0 <main+0x114>)
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 8003404:	4a2b      	ldr	r2, [pc, #172]	; (80034b4 <main+0x118>)
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 8003406:	f891 1058 	ldrb.w	r1, [r1, #88]	; 0x58
    sys.state = STATE_IDLE;
 800340a:	702b      	strb	r3, [r5, #0]
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 800340c:	e9c2 3300 	strd	r3, r3, [r2]
 8003410:	e9c2 3302 	strd	r3, r3, [r2, #8]
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 8003414:	06cb      	lsls	r3, r1, #27
 8003416:	bf48      	it	mi
 8003418:	2301      	movmi	r3, #1
  // will return to this loop to be cleanly re-initialized.
  for(;;) {

    // Reset system variables.
    uint8_t prior_state = sys.state;
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 800341a:	f04f 0400 	mov.w	r4, #0
    sys.state = prior_state;
    sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 800341e:	f246 4864 	movw	r8, #25700	; 0x6464
 8003422:	4f25      	ldr	r7, [pc, #148]	; (80034b8 <main+0x11c>)
 8003424:	f8df b094 	ldr.w	fp, [pc, #148]	; 80034bc <main+0x120>
 8003428:	f8df a094 	ldr.w	sl, [pc, #148]	; 80034c0 <main+0x124>
 800342c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80034c4 <main+0x128>
    probe_init();
    plan_reset(); // Clear block buffer and planner variables
    st_reset(); // Clear stepper subsystem variables.

#ifdef SileliSMod
    GPIO_WriteBit(GPIOC, GPIO_Pin_15, SET);  //set !HS541_OE1pin low (enable stepper motors chip afret init procedure)
 8003430:	4e1d      	ldr	r6, [pc, #116]	; (80034a8 <main+0x10c>)
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 8003432:	bf48      	it	mi
 8003434:	702b      	strbmi	r3, [r5, #0]
    sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE; // Set to 100%
 8003436:	2364      	movs	r3, #100	; 0x64
    uint8_t prior_state = sys.state;
 8003438:	782a      	ldrb	r2, [r5, #0]
    sys_rt_exec_motion_override = 0;
 800343a:	4923      	ldr	r1, [pc, #140]	; (80034c8 <main+0x12c>)
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 800343c:	602c      	str	r4, [r5, #0]
    sys.state = prior_state;
 800343e:	702a      	strb	r2, [r5, #0]
    sys_rt_exec_accessory_override = 0;
 8003440:	4a22      	ldr	r2, [pc, #136]	; (80034cc <main+0x130>)
    sys_probe_state = 0;
 8003442:	f88b 4000 	strb.w	r4, [fp]
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 8003446:	60ac      	str	r4, [r5, #8]
    sys_rt_exec_state = 0;
 8003448:	f88a 4000 	strb.w	r4, [sl]
    sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE; // Set to 100%
 800344c:	72ab      	strb	r3, [r5, #10]
    sys_rt_exec_alarm = 0;
 800344e:	f889 4000 	strb.w	r4, [r9]
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 8003452:	e9c5 4403 	strd	r4, r4, [r5, #12]
    sys_rt_exec_motion_override = 0;
 8003456:	700c      	strb	r4, [r1, #0]
	memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
 8003458:	e9c7 4400 	strd	r4, r4, [r7]
    sys_rt_exec_accessory_override = 0;
 800345c:	7014      	strb	r4, [r2, #0]
	memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
 800345e:	e9c7 4402 	strd	r4, r4, [r7, #8]
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 8003462:	606c      	str	r4, [r5, #4]
    sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 8003464:	f8a5 8008 	strh.w	r8, [r5, #8]
    serial_reset_read_buffer(); // Clear serial read buffer
 8003468:	f003 f8d0 	bl	800660c <serial_reset_read_buffer>
    gc_init(); // Set g-code parser to default state
 800346c:	f7fe f9cc 	bl	8001808 <gc_init>
    spindle_init();
 8003470:	f003 fb5e 	bl	8006b30 <spindle_init>
    coolant_init();
 8003474:	f7fe f88e 	bl	8001594 <coolant_init>
    limits_init();
 8003478:	f7ff fc5a 	bl	8002d30 <limits_init>
    probe_init();
 800347c:	f001 fcae 	bl	8004ddc <probe_init>
    plan_reset(); // Clear block buffer and planner variables
 8003480:	f000 fdc0 	bl	8004004 <plan_reset>
    st_reset(); // Clear stepper subsystem variables.
 8003484:	f003 ff8a 	bl	800739c <st_reset>
    GPIO_WriteBit(GPIOC, GPIO_Pin_15, SET);  //set !HS541_OE1pin low (enable stepper motors chip afret init procedure)
 8003488:	2201      	movs	r2, #1
 800348a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800348e:	4630      	mov	r0, r6
 8003490:	f7fd ff2e 	bl	80012f0 <GPIO_WriteBit>
#endif

    // Sync cleared gcode and planner positions to current system position.
    plan_sync_position();
 8003494:	f001 f95c 	bl	8004750 <plan_sync_position>
    gc_sync_position();
 8003498:	f7fe f9cc 	bl	8001834 <gc_sync_position>

    // Print welcome message. Indicates an initialization has occured at power-up or with a reset.
    report_init_message();
 800349c:	f002 f992 	bl	80057c4 <report_init_message>

    // Start Grbl main loop. Processes program inputs and executes them.
    protocol_main_loop();
 80034a0:	f002 f830 	bl	8005504 <protocol_main_loop>
  for(;;) {
 80034a4:	e7c7      	b.n	8003436 <main+0x9a>
 80034a6:	bf00      	nop
 80034a8:	40011000 	.word	0x40011000
 80034ac:	200009d0 	.word	0x200009d0
 80034b0:	200013ec 	.word	0x200013ec
 80034b4:	200009e4 	.word	0x200009e4
 80034b8:	200009f4 	.word	0x200009f4
 80034bc:	20000a04 	.word	0x20000a04
 80034c0:	20000a08 	.word	0x20000a08
 80034c4:	20000a06 	.word	0x20000a06
 80034c8:	20000a07 	.word	0x20000a07
 80034cc:	20000a05 	.word	0x20000a05

080034d0 <_delay_ms>:
}
#if defined (STM32F103C8)
void _delay_ms(uint32_t x)
{
	u32 temp;
	SysTick->LOAD = (u32)72000000 / 8000 * x;                     // Loading time
 80034d0:	f242 3c28 	movw	ip, #9000	; 0x2328
 80034d4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
	SysTick->VAL = 0x00;                                            // Empty the counter
 80034d8:	2100      	movs	r1, #0
	SysTick->CTRL = 0x01;                                           // Start from bottom
 80034da:	2301      	movs	r3, #1
	SysTick->LOAD = (u32)72000000 / 8000 * x;                     // Loading time
 80034dc:	fb0c f000 	mul.w	r0, ip, r0
 80034e0:	6150      	str	r0, [r2, #20]
	SysTick->VAL = 0x00;                                            // Empty the counter
 80034e2:	6191      	str	r1, [r2, #24]
	SysTick->CTRL = 0x01;                                           // Start from bottom
 80034e4:	6113      	str	r3, [r2, #16]
	do
	{
		temp = SysTick->CTRL;
 80034e6:	6913      	ldr	r3, [r2, #16]
	} while ((temp & 0x01) && !(temp&(1 << 16)));                             // Wait time arrive
 80034e8:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d0fa      	beq.n	80034e6 <_delay_ms+0x16>
	SysTick->CTRL = 0x00;                                            // Close the counter
 80034f0:	2300      	movs	r3, #0
 80034f2:	6113      	str	r3, [r2, #16]
	SysTick->VAL = 0X00;                                            // Empty the counter
 80034f4:	6193      	str	r3, [r2, #24]
}
 80034f6:	4770      	bx	lr

080034f8 <LedBlink>:
void LedBlink(void)
{
 80034f8:	b510      	push	{r4, lr}
	static BitAction nOnFlag = Bit_SET;
	GPIO_WriteBit(GPIOC, GPIO_Pin_13, nOnFlag);
 80034fa:	4c06      	ldr	r4, [pc, #24]	; (8003514 <LedBlink+0x1c>)
 80034fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003500:	7822      	ldrb	r2, [r4, #0]
 8003502:	4805      	ldr	r0, [pc, #20]	; (8003518 <LedBlink+0x20>)
 8003504:	f7fd fef4 	bl	80012f0 <GPIO_WriteBit>
	nOnFlag = (nOnFlag == Bit_SET) ? Bit_RESET : Bit_SET;
 8003508:	7823      	ldrb	r3, [r4, #0]
 800350a:	3b01      	subs	r3, #1
 800350c:	bf18      	it	ne
 800350e:	2301      	movne	r3, #1
 8003510:	7023      	strb	r3, [r4, #0]
}
 8003512:	bd10      	pop	{r4, pc}
 8003514:	20000000 	.word	0x20000000
 8003518:	40011000 	.word	0x40011000

0800351c <mc_line>:
// NOTE: This is the primary gateway to the grbl planner. All line motions, including arc line
// segments, must pass through this routine before being passed to the planner. The seperation of
// mc_line and plan_buffer_line is done primarily to place non-planner-type functions from being
// in the planner and to let backlash compensation or canned cycle integration simple and direct.
void mc_line(float *target, plan_line_data_t *pl_data)
{
 800351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If enabled, check for soft limit violations. Placed here all line motions are picked up
  // from everywhere in Grbl.
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 800351e:	4e17      	ldr	r6, [pc, #92]	; (800357c <mc_line+0x60>)
{
 8003520:	460d      	mov	r5, r1
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003522:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
{
 8003526:	4607      	mov	r7, r0
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003528:	0699      	lsls	r1, r3, #26
    // NOTE: Block jog state. Jogging is a special case and soft limits are handled independently.
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 800352a:	4c15      	ldr	r4, [pc, #84]	; (8003580 <mc_line+0x64>)
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 800352c:	d504      	bpl.n	8003538 <mc_line+0x1c>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 800352e:	7823      	ldrb	r3, [r4, #0]
 8003530:	2b20      	cmp	r3, #32
 8003532:	d00a      	beq.n	800354a <mc_line+0x2e>
 8003534:	f7ff ff12 	bl	800335c <limits_soft_check>
  }

  // If in check gcode mode, prevent motion by blocking planner. Soft limits still work.
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003538:	7823      	ldrb	r3, [r4, #0]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d105      	bne.n	800354a <mc_line+0x2e>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
			}
		}
	}
}
 800353e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003540:	f000 fdd0 	bl	80040e4 <plan_check_full_buffer>
 8003544:	b138      	cbz	r0, 8003556 <mc_line+0x3a>
 8003546:	f001 fcb3 	bl	8004eb0 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 800354a:	f001 ffcd 	bl	80054e8 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 800354e:	7863      	ldrb	r3, [r4, #1]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0f5      	beq.n	8003540 <mc_line+0x24>
 8003554:	e7f3      	b.n	800353e <mc_line+0x22>
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8003556:	4629      	mov	r1, r5
 8003558:	4638      	mov	r0, r7
 800355a:	f000 fe8b 	bl	8004274 <plan_buffer_line>
 800355e:	2800      	cmp	r0, #0
 8003560:	d1ed      	bne.n	800353e <mc_line+0x22>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003562:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 8003566:	079a      	lsls	r2, r3, #30
 8003568:	d5e9      	bpl.n	800353e <mc_line+0x22>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 800356a:	7a2b      	ldrb	r3, [r5, #8]
 800356c:	06db      	lsls	r3, r3, #27
 800356e:	d5e6      	bpl.n	800353e <mc_line+0x22>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003570:	6869      	ldr	r1, [r5, #4]
 8003572:	2010      	movs	r0, #16
}
 8003574:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003578:	f003 bc62 	b.w	8006e40 <spindle_sync>
 800357c:	200013ec 	.word	0x200013ec
 8003580:	200009d0 	.word	0x200009d0
 8003584:	00000000 	.word	0x00000000

08003588 <mc_arc>:
// The arc is approximated by generating a huge number of tiny, linear segments. The chordal tolerance
// of each segment is configured in settings.arc_tolerance, which is defined to be the maximum normal
// distance from segment to the circle when the end points both lie on the circle.
void mc_arc(float *target, plan_line_data_t *pl_data, float *position, float *offset, float radius,
  uint8_t axis_0, uint8_t axis_1, uint8_t axis_linear, uint8_t is_clockwise_arc)
{
 8003588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800358c:	b08f      	sub	sp, #60	; 0x3c
 800358e:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 8003592:	f89d 6070 	ldrb.w	r6, [sp, #112]	; 0x70
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003596:	f853 8024 	ldr.w	r8, [r3, r4, lsl #2]
{
 800359a:	900d      	str	r0, [sp, #52]	; 0x34
 800359c:	468b      	mov	fp, r1
  float center_axis0 = position[axis_0] + offset[axis_0];
 800359e:	4640      	mov	r0, r8
 80035a0:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
{
 80035a4:	4691      	mov	r9, r2
 80035a6:	9600      	str	r6, [sp, #0]
 80035a8:	461e      	mov	r6, r3
  float center_axis0 = position[axis_0] + offset[axis_0];
 80035aa:	f7fd f86b 	bl	8000684 <__addsf3>
 80035ae:	4603      	mov	r3, r0
{
 80035b0:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  float center_axis0 = position[axis_0] + offset[axis_0];
 80035b4:	eb09 0c84 	add.w	ip, r9, r4, lsl #2
  float center_axis1 = position[axis_1] + offset[axis_1];
 80035b8:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
  float center_axis0 = position[axis_0] + offset[axis_0];
 80035bc:	f8cd c008 	str.w	ip, [sp, #8]
 80035c0:	eb06 0c84 	add.w	ip, r6, r4, lsl #2
 80035c4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  float center_axis1 = position[axis_1] + offset[axis_1];
 80035c8:	eb06 0c85 	add.w	ip, r6, r5, lsl #2
 80035cc:	4610      	mov	r0, r2
 80035ce:	f859 1025 	ldr.w	r1, [r9, r5, lsl #2]
 80035d2:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 80035d6:	eb09 0c85 	add.w	ip, r9, r5, lsl #2
 80035da:	9208      	str	r2, [sp, #32]
 80035dc:	f8cd c00c 	str.w	ip, [sp, #12]
  float center_axis0 = position[axis_0] + offset[axis_0];
 80035e0:	9301      	str	r3, [sp, #4]
  float center_axis1 = position[axis_1] + offset[axis_1];
 80035e2:	f7fd f84f 	bl	8000684 <__addsf3>
 80035e6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80035e8:	9004      	str	r0, [sp, #16]
  float r_axis1 = -offset[axis_1];
  float rt_axis0 = target[axis_0] - center_axis0;
  float rt_axis1 = target[axis_1] - center_axis1;

  // CCW angle between position and target from circle center. Only one atan2() trig computation required.
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 80035ea:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 80035ee:	f7fd f847 	bl	8000680 <__aeabi_fsub>
 80035f2:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 80035f6:	4605      	mov	r5, r0
 80035f8:	9801      	ldr	r0, [sp, #4]
 80035fa:	f7fd f841 	bl	8000680 <__aeabi_fsub>
 80035fe:	4604      	mov	r4, r0
 8003600:	4640      	mov	r0, r8
 8003602:	4621      	mov	r1, r4
 8003604:	f7fd f946 	bl	8000894 <__aeabi_fmul>
 8003608:	4629      	mov	r1, r5
 800360a:	4606      	mov	r6, r0
 800360c:	9808      	ldr	r0, [sp, #32]
 800360e:	f7fd f941 	bl	8000894 <__aeabi_fmul>
 8003612:	4601      	mov	r1, r0
 8003614:	4630      	mov	r0, r6
 8003616:	f7fd f835 	bl	8000684 <__addsf3>
 800361a:	4603      	mov	r3, r0
 800361c:	4629      	mov	r1, r5
 800361e:	4640      	mov	r0, r8
 8003620:	461d      	mov	r5, r3
 8003622:	f7fd f937 	bl	8000894 <__aeabi_fmul>
 8003626:	4603      	mov	r3, r0
 8003628:	4621      	mov	r1, r4
 800362a:	9808      	ldr	r0, [sp, #32]
 800362c:	461c      	mov	r4, r3
 800362e:	f7fd f931 	bl	8000894 <__aeabi_fmul>
 8003632:	4601      	mov	r1, r0
 8003634:	4620      	mov	r0, r4
 8003636:	f7fd f823 	bl	8000680 <__aeabi_fsub>
 800363a:	4629      	mov	r1, r5
 800363c:	f006 fbfe 	bl	8009e3c <atan2f>
  if (is_clockwise_arc) { // Correct atan2 output per direction
 8003640:	9b00      	ldr	r3, [sp, #0]
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8003642:	4606      	mov	r6, r0
{
 8003644:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8003646:	f89d a06c 	ldrb.w	sl, [sp, #108]	; 0x6c
  if (is_clockwise_arc) { // Correct atan2 output per direction
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 8108 	beq.w	8003860 <mc_arc+0x2d8>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 8003650:	f7fc fee2 	bl	8000418 <__aeabi_f2d>
 8003654:	a39c      	add	r3, pc, #624	; (adr r3, 80038c8 <mc_arc+0x340>)
 8003656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365a:	4604      	mov	r4, r0
 800365c:	460d      	mov	r5, r1
 800365e:	f7fc ffa7 	bl	80005b0 <__aeabi_dcmpge>
 8003662:	2800      	cmp	r0, #0
 8003664:	f040 8122 	bne.w	80038ac <mc_arc+0x324>
  // NOTE: Segment end points are on the arc, which can lead to the arc diameter being smaller by up to
  // (2x) settings.arc_tolerance. For 99% of users, this is just fine. If a different arc segment fit
  // is desired, i.e. least-squares, midpoint on arc, just change the mm_per_arc_segment calculation.
  // For the intended uses of Grbl, this value shouldn't exceed 2000 for the strictest of cases.
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 8003668:	4b9d      	ldr	r3, [pc, #628]	; (80038e0 <mc_arc+0x358>)
 800366a:	4639      	mov	r1, r7
 800366c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800366e:	4638      	mov	r0, r7
 8003670:	f7fd f808 	bl	8000684 <__addsf3>
 8003674:	4621      	mov	r1, r4
 8003676:	f7fd f803 	bl	8000680 <__aeabi_fsub>
 800367a:	4621      	mov	r1, r4
 800367c:	f7fd f90a 	bl	8000894 <__aeabi_fmul>
 8003680:	f006 fbde 	bl	8009e40 <sqrtf>
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
 8003684:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 8003688:	4604      	mov	r4, r0
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
 800368a:	4638      	mov	r0, r7
 800368c:	f7fd f902 	bl	8000894 <__aeabi_fmul>
 8003690:	4631      	mov	r1, r6
 8003692:	f7fd f8ff 	bl	8000894 <__aeabi_fmul>
 8003696:	4621      	mov	r1, r4
 8003698:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800369c:	f7fd f9ae 	bl	80009fc <__aeabi_fdiv>
 80036a0:	f006 fb24 	bl	8009cec <floorf>
 80036a4:	f7fd faf8 	bl	8000c98 <__aeabi_f2uiz>
 80036a8:	b283      	uxth	r3, r0
 80036aa:	9300      	str	r3, [sp, #0]

  if (segments) {
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 80d0 	beq.w	8003852 <mc_arc+0x2ca>
    // Multiply inverse feed_rate to compensate for the fact that this movement is approximated
    // by a number of discrete segments. The inverse feed_rate should be correct for the sum of
    // all segments.
    if (pl_data->condition & PL_COND_FLAG_INVERSE_TIME) { 
 80036b2:	f89b 5008 	ldrb.w	r5, [fp, #8]
 80036b6:	4618      	mov	r0, r3
 80036b8:	072b      	lsls	r3, r5, #28
 80036ba:	f100 80e8 	bmi.w	800388e <mc_arc+0x306>
      pl_data->feed_rate *= segments; 
 80036be:	f7fd f895 	bl	80007ec <__aeabi_i2f>
 80036c2:	4604      	mov	r4, r0
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
    }
    
    float theta_per_segment = angular_travel/segments;
 80036c4:	4621      	mov	r1, r4
 80036c6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80036ca:	f7fd f997 	bl	80009fc <__aeabi_fdiv>
 80036ce:	4604      	mov	r4, r0
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 80036d0:	eb09 038a 	add.w	r3, r9, sl, lsl #2
    float theta_per_segment = angular_travel/segments;
 80036d4:	4621      	mov	r1, r4
 80036d6:	4630      	mov	r0, r6
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 80036d8:	9305      	str	r3, [sp, #20]
    float theta_per_segment = angular_travel/segments;
 80036da:	f7fd f8db 	bl	8000894 <__aeabi_fmul>
 80036de:	4603      	mov	r3, r0
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 80036e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80036e2:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 80036e6:	f852 002a 	ldr.w	r0, [r2, sl, lsl #2]
    float theta_per_segment = angular_travel/segments;
 80036ea:	461e      	mov	r6, r3
 80036ec:	930b      	str	r3, [sp, #44]	; 0x2c
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 80036ee:	f7fc ffc7 	bl	8000680 <__aeabi_fsub>
 80036f2:	4621      	mov	r1, r4
 80036f4:	f7fd f8ce 	bl	8000894 <__aeabi_fmul>
       without the initial overhead of computing cos() or sin(). By the time the arc needs to be applied
       a correction, the planner should have caught up to the lag caused by the initial mc_arc overhead.
       This is important when there are successive arc motions.
    */
    // Computes: cos_T = 1 - theta_per_segment^2/2, sin_T = theta_per_segment - theta_per_segment^3/6) in ~52usec
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 80036f8:	4631      	mov	r1, r6
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 80036fa:	9006      	str	r0, [sp, #24]
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 80036fc:	4630      	mov	r0, r6
 80036fe:	f7fd f8c9 	bl	8000894 <__aeabi_fmul>
 8003702:	4604      	mov	r4, r0
 8003704:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003708:	4621      	mov	r1, r4
 800370a:	f7fc ffb9 	bl	8000680 <__aeabi_fsub>
 800370e:	4603      	mov	r3, r0
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 8003710:	4621      	mov	r1, r4
 8003712:	4874      	ldr	r0, [pc, #464]	; (80038e4 <mc_arc+0x35c>)
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 8003714:	461c      	mov	r4, r3
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 8003716:	f7fc ffb3 	bl	8000680 <__aeabi_fsub>
 800371a:	4973      	ldr	r1, [pc, #460]	; (80038e8 <mc_arc+0x360>)
 800371c:	4605      	mov	r5, r0
 800371e:	4630      	mov	r0, r6
 8003720:	f7fd f8b8 	bl	8000894 <__aeabi_fmul>
 8003724:	4601      	mov	r1, r0
 8003726:	4628      	mov	r0, r5
 8003728:	f7fd f8b4 	bl	8000894 <__aeabi_fmul>
 800372c:	4682      	mov	sl, r0
    cos_T *= 0.5;
 800372e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003732:	4620      	mov	r0, r4
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 8003734:	f8cd a01c 	str.w	sl, [sp, #28]
    cos_T *= 0.5;
 8003738:	f7fd f8ac 	bl	8000894 <__aeabi_fmul>
    float cos_Ti;
    float r_axisi;
    uint16_t i;
    uint8_t count = 0;

    for (i = 1; i<segments; i++) { // Increment (segments-1).
 800373c:	9b00      	ldr	r3, [sp, #0]
    cos_T *= 0.5;
 800373e:	900c      	str	r0, [sp, #48]	; 0x30
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003740:	2b01      	cmp	r3, #1
 8003742:	f000 8086 	beq.w	8003852 <mc_arc+0x2ca>
  float r_axis1 = -offset[axis_1];
 8003746:	9b08      	ldr	r3, [sp, #32]
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
 8003748:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800374c:	46b8      	mov	r8, r7
  float r_axis1 = -offset[axis_1];
 800374e:	2501      	movs	r5, #1
    uint8_t count = 0;
 8003750:	2400      	movs	r4, #0
 8003752:	464f      	mov	r7, r9
  float r_axis1 = -offset[axis_1];
 8003754:	f103 4600 	add.w	r6, r3, #2147483648	; 0x80000000
 8003758:	e042      	b.n	80037e0 <mc_arc+0x258>

      if (count < N_ARC_CORRECTION) {
        // Apply vector rotation matrix. ~40 usec
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 800375a:	4641      	mov	r1, r8
 800375c:	9807      	ldr	r0, [sp, #28]
 800375e:	f7fd f899 	bl	8000894 <__aeabi_fmul>
 8003762:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8003766:	4682      	mov	sl, r0
 8003768:	4631      	mov	r1, r6
 800376a:	4648      	mov	r0, r9
 800376c:	f7fd f892 	bl	8000894 <__aeabi_fmul>
 8003770:	4601      	mov	r1, r0
 8003772:	4650      	mov	r0, sl
 8003774:	f7fc ff86 	bl	8000684 <__addsf3>
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8003778:	4641      	mov	r1, r8
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 800377a:	4682      	mov	sl, r0
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 800377c:	4648      	mov	r0, r9
 800377e:	f7fd f889 	bl	8000894 <__aeabi_fmul>
 8003782:	4631      	mov	r1, r6
 8003784:	4680      	mov	r8, r0
 8003786:	9807      	ldr	r0, [sp, #28]
 8003788:	f7fd f884 	bl	8000894 <__aeabi_fmul>
 800378c:	4601      	mov	r1, r0
 800378e:	4640      	mov	r0, r8
 8003790:	f7fc ff76 	bl	8000680 <__aeabi_fsub>
        r_axis1 = r_axisi;
 8003794:	4656      	mov	r6, sl
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8003796:	4680      	mov	r8, r0
        count++;
 8003798:	3401      	adds	r4, #1
 800379a:	b2e4      	uxtb	r4, r4
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
        count = 0;
      }

      // Update arc_target location
      position[axis_0] = center_axis0 + r_axis0;
 800379c:	9901      	ldr	r1, [sp, #4]
 800379e:	4640      	mov	r0, r8
 80037a0:	f7fc ff70 	bl	8000684 <__addsf3>
 80037a4:	9b02      	ldr	r3, [sp, #8]
      position[axis_1] = center_axis1 + r_axis1;
 80037a6:	9904      	ldr	r1, [sp, #16]
      position[axis_0] = center_axis0 + r_axis0;
 80037a8:	6018      	str	r0, [r3, #0]
      position[axis_1] = center_axis1 + r_axis1;
 80037aa:	4630      	mov	r0, r6
 80037ac:	f7fc ff6a 	bl	8000684 <__addsf3>
 80037b0:	9b03      	ldr	r3, [sp, #12]
      position[axis_linear] += linear_per_segment;
 80037b2:	f8dd 9014 	ldr.w	r9, [sp, #20]
      position[axis_1] = center_axis1 + r_axis1;
 80037b6:	6018      	str	r0, [r3, #0]
      position[axis_linear] += linear_per_segment;
 80037b8:	f8d9 0000 	ldr.w	r0, [r9]
 80037bc:	9906      	ldr	r1, [sp, #24]
 80037be:	f7fc ff61 	bl	8000684 <__addsf3>

      mc_line(position, pl_data);
 80037c2:	4659      	mov	r1, fp
      position[axis_linear] += linear_per_segment;
 80037c4:	f8c9 0000 	str.w	r0, [r9]
      mc_line(position, pl_data);
 80037c8:	4638      	mov	r0, r7
 80037ca:	f7ff fea7 	bl	800351c <mc_line>

      // Bail mid-circle on system abort. Runtime command check already performed by mc_line.
      if (sys.abort) { return; }
 80037ce:	4b47      	ldr	r3, [pc, #284]	; (80038ec <mc_arc+0x364>)
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 80037d0:	3501      	adds	r5, #1
      if (sys.abort) { return; }
 80037d2:	785b      	ldrb	r3, [r3, #1]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d174      	bne.n	80038c2 <mc_arc+0x33a>
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 80037d8:	9a00      	ldr	r2, [sp, #0]
 80037da:	b2ab      	uxth	r3, r5
 80037dc:	429a      	cmp	r2, r3
 80037de:	d938      	bls.n	8003852 <mc_arc+0x2ca>
      if (count < N_ARC_CORRECTION) {
 80037e0:	2c0b      	cmp	r4, #11
 80037e2:	d9ba      	bls.n	800375a <mc_arc+0x1d2>
        cos_Ti = cosf(i*theta_per_segment);
 80037e4:	4628      	mov	r0, r5
 80037e6:	f7fd f801 	bl	80007ec <__aeabi_i2f>
 80037ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80037ec:	f7fd f852 	bl	8000894 <__aeabi_fmul>
 80037f0:	4680      	mov	r8, r0
 80037f2:	f006 fa43 	bl	8009c7c <cosf>
 80037f6:	4606      	mov	r6, r0
        sin_Ti = sinf(i*theta_per_segment);
 80037f8:	4640      	mov	r0, r8
 80037fa:	f006 fae5 	bl	8009dc8 <sinf>
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 80037fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
        sin_Ti = sinf(i*theta_per_segment);
 8003800:	4682      	mov	sl, r0
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4631      	mov	r1, r6
 8003806:	f103 4800 	add.w	r8, r3, #2147483648	; 0x80000000
 800380a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800380c:	4640      	mov	r0, r8
 800380e:	f8d3 9000 	ldr.w	r9, [r3]
 8003812:	f7fd f83f 	bl	8000894 <__aeabi_fmul>
 8003816:	4603      	mov	r3, r0
 8003818:	4651      	mov	r1, sl
 800381a:	4648      	mov	r0, r9
 800381c:	9308      	str	r3, [sp, #32]
 800381e:	f7fd f839 	bl	8000894 <__aeabi_fmul>
 8003822:	9b08      	ldr	r3, [sp, #32]
 8003824:	4601      	mov	r1, r0
 8003826:	4618      	mov	r0, r3
 8003828:	f7fc ff2c 	bl	8000684 <__addsf3>
 800382c:	4603      	mov	r3, r0
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 800382e:	4651      	mov	r1, sl
 8003830:	4640      	mov	r0, r8
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003832:	4698      	mov	r8, r3
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003834:	f7fd f82e 	bl	8000894 <__aeabi_fmul>
 8003838:	4603      	mov	r3, r0
 800383a:	4631      	mov	r1, r6
 800383c:	4648      	mov	r0, r9
 800383e:	461e      	mov	r6, r3
 8003840:	f7fd f828 	bl	8000894 <__aeabi_fmul>
 8003844:	4601      	mov	r1, r0
 8003846:	4630      	mov	r0, r6
 8003848:	f7fc ff1a 	bl	8000680 <__aeabi_fsub>
        count = 0;
 800384c:	2400      	movs	r4, #0
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 800384e:	4606      	mov	r6, r0
        count = 0;
 8003850:	e7a4      	b.n	800379c <mc_arc+0x214>
    }
  }
  // Ensure last segment arrives at target location.
  mc_line(target, pl_data);
 8003852:	4659      	mov	r1, fp
 8003854:	980d      	ldr	r0, [sp, #52]	; 0x34
}
 8003856:	b00f      	add	sp, #60	; 0x3c
 8003858:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  mc_line(target, pl_data);
 800385c:	f7ff be5e 	b.w	800351c <mc_line>
    if (angular_travel <= ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel += 2*M_PI; }
 8003860:	f7fc fdda 	bl	8000418 <__aeabi_f2d>
 8003864:	a31a      	add	r3, pc, #104	; (adr r3, 80038d0 <mc_arc+0x348>)
 8003866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386a:	4604      	mov	r4, r0
 800386c:	460d      	mov	r5, r1
 800386e:	f7fc fe95 	bl	800059c <__aeabi_dcmple>
 8003872:	2800      	cmp	r0, #0
 8003874:	f43f aef8 	beq.w	8003668 <mc_arc+0xe0>
 8003878:	a317      	add	r3, pc, #92	; (adr r3, 80038d8 <mc_arc+0x350>)
 800387a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387e:	4620      	mov	r0, r4
 8003880:	4629      	mov	r1, r5
 8003882:	f7fc fc6b 	bl	800015c <__adddf3>
 8003886:	f7fc fea7 	bl	80005d8 <__aeabi_d2f>
 800388a:	4606      	mov	r6, r0
 800388c:	e6ec      	b.n	8003668 <mc_arc+0xe0>
      pl_data->feed_rate *= segments; 
 800388e:	f7fc ffad 	bl	80007ec <__aeabi_i2f>
 8003892:	4604      	mov	r4, r0
 8003894:	f8db 0000 	ldr.w	r0, [fp]
 8003898:	4621      	mov	r1, r4
 800389a:	f7fc fffb 	bl	8000894 <__aeabi_fmul>
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 800389e:	f025 0508 	bic.w	r5, r5, #8
 80038a2:	f88b 5008 	strb.w	r5, [fp, #8]
      pl_data->feed_rate *= segments; 
 80038a6:	f8cb 0000 	str.w	r0, [fp]
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 80038aa:	e70b      	b.n	80036c4 <mc_arc+0x13c>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 80038ac:	a30a      	add	r3, pc, #40	; (adr r3, 80038d8 <mc_arc+0x350>)
 80038ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b2:	4620      	mov	r0, r4
 80038b4:	4629      	mov	r1, r5
 80038b6:	f7fc fc4f 	bl	8000158 <__aeabi_dsub>
 80038ba:	f7fc fe8d 	bl	80005d8 <__aeabi_d2f>
 80038be:	4606      	mov	r6, r0
 80038c0:	e6d2      	b.n	8003668 <mc_arc+0xe0>
}
 80038c2:	b00f      	add	sp, #60	; 0x3c
 80038c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038c8:	a0b5ed8d 	.word	0xa0b5ed8d
 80038cc:	bea0c6f7 	.word	0xbea0c6f7
 80038d0:	a0b5ed8d 	.word	0xa0b5ed8d
 80038d4:	3ea0c6f7 	.word	0x3ea0c6f7
 80038d8:	54442d18 	.word	0x54442d18
 80038dc:	401921fb 	.word	0x401921fb
 80038e0:	200013ec 	.word	0x200013ec
 80038e4:	40c00000 	.word	0x40c00000
 80038e8:	3e2aaaab 	.word	0x3e2aaaab
 80038ec:	200009d0 	.word	0x200009d0

080038f0 <mc_dwell>:


// Execute dwell in seconds.
void mc_dwell(float seconds)
{
  if (sys.state == STATE_CHECK_MODE) { return; }
 80038f0:	4b07      	ldr	r3, [pc, #28]	; (8003910 <mc_dwell+0x20>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d009      	beq.n	800390c <mc_dwell+0x1c>
{
 80038f8:	b510      	push	{r4, lr}
 80038fa:	4604      	mov	r4, r0
  protocol_buffer_synchronize();
 80038fc:	f001 feba 	bl	8005674 <protocol_buffer_synchronize>
  delay_sec(seconds, DELAY_MODE_DWELL);
 8003900:	4620      	mov	r0, r4
}
 8003902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_sec(seconds, DELAY_MODE_DWELL);
 8003906:	2100      	movs	r1, #0
 8003908:	f000 b958 	b.w	8003bbc <delay_sec>
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	200009d0 	.word	0x200009d0

08003914 <mc_homing_cycle>:

// Perform homing cycle to locate and set machine zero. Only '$H' executes this command.
// NOTE: There should be no motions in the buffer and Grbl must be in an idle state before
// executing the homing cycle. This prevents incorrect buffered plans after homing.
void mc_homing_cycle(uint8_t cycle_mask)
{
 8003914:	b508      	push	{r3, lr}
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT);
      return;
    }
  #endif

  limits_disable(); // Disable hard limits pin change register for cycle duration
 8003916:	f7ff fa5f 	bl	8002dd8 <limits_disable>
    if (cycle_mask) { limits_go_home(cycle_mask); } // Perform homing cycle based on mask.
    else
  #endif
  {
    // Search to engage all axes limit switches at faster homing seek rate.
    limits_go_home(HOMING_CYCLE_0);  // Homing cycle 0
 800391a:	2004      	movs	r0, #4
 800391c:	f7ff fad4 	bl	8002ec8 <limits_go_home>
    #ifdef HOMING_CYCLE_1
      limits_go_home(HOMING_CYCLE_1);  // Homing cycle 1
 8003920:	2003      	movs	r0, #3
 8003922:	f7ff fad1 	bl	8002ec8 <limits_go_home>
    #endif
    #ifdef HOMING_CYCLE_2
      limits_go_home(HOMING_CYCLE_2);  // Homing cycle 2
 8003926:	2008      	movs	r0, #8
 8003928:	f7ff face 	bl	8002ec8 <limits_go_home>
    #endif
  }

  protocol_execute_realtime(); // Check for reset and set system abort.
 800392c:	f001 fddc 	bl	80054e8 <protocol_execute_realtime>
  if (sys.abort) { return; } // Did not complete. Alarm state set by mc_alarm.
 8003930:	4b09      	ldr	r3, [pc, #36]	; (8003958 <mc_homing_cycle+0x44>)
 8003932:	785b      	ldrb	r3, [r3, #1]
 8003934:	b103      	cbz	r3, 8003938 <mc_homing_cycle+0x24>
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
	NVIC_EnableIRQ(EXTI15_10_IRQn);
#else
	limits_init();
#endif
}
 8003936:	bd08      	pop	{r3, pc}
  gc_sync_position();
 8003938:	f7fd ff7c 	bl	8001834 <gc_sync_position>
  plan_sync_position();
 800393c:	f000 ff08 	bl	8004750 <plan_sync_position>
	EXTI_ClearITPendingBit((1 << X_LIMIT_BIT) | (1 << Y_LIMIT_BIT) | (1 << Z_LIMIT_BIT) | (1 << A_LIMIT_BIT));
 8003940:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003944:	f7fd fa56 	bl	8000df4 <EXTI_ClearITPendingBit>
 8003948:	f44f 7280 	mov.w	r2, #256	; 0x100
 800394c:	4b03      	ldr	r3, [pc, #12]	; (800395c <mc_homing_cycle+0x48>)
 800394e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8003952:	605a      	str	r2, [r3, #4]
}
 8003954:	bd08      	pop	{r3, pc}
 8003956:	bf00      	nop
 8003958:	200009d0 	.word	0x200009d0
 800395c:	e000e100 	.word	0xe000e100

08003960 <mc_probe_cycle>:


// Perform tool length probe cycle. Requires probe switch.
// NOTE: Upon probe failure, the program will be stopped and placed into ALARM state.
uint8_t mc_probe_cycle(float *target, plan_line_data_t *pl_data, uint8_t parser_flags)
{
 8003960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // TODO: Need to update this cycle so it obeys a non-auto cycle start.
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8003964:	4c2e      	ldr	r4, [pc, #184]	; (8003a20 <mc_probe_cycle+0xc0>)
 8003966:	7823      	ldrb	r3, [r4, #0]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d027      	beq.n	80039bc <mc_probe_cycle+0x5c>

  // Finish all queued commands and empty planner buffer before starting probe cycle.
  protocol_buffer_synchronize();
 800396c:	4607      	mov	r7, r0
 800396e:	460d      	mov	r5, r1
 8003970:	4616      	mov	r6, r2
 8003972:	f001 fe7f 	bl	8005674 <protocol_buffer_synchronize>
  if (sys.abort) { return(GC_PROBE_ABORT); } // Return if system reset has been issued.
 8003976:	f894 8001 	ldrb.w	r8, [r4, #1]
 800397a:	f1b8 0f00 	cmp.w	r8, #0
 800397e:	d11a      	bne.n	80039b6 <mc_probe_cycle+0x56>

  // Initialize probing control variables
  uint8_t is_probe_away = bit_istrue(parser_flags, GC_PARSER_PROBE_IS_AWAY);
  uint8_t is_no_error = bit_istrue(parser_flags, GC_PARSER_PROBE_IS_NO_ERROR);
  sys.probe_succeeded = false; // Re-initialize probe history before beginning cycle.
  probe_configure_invert_mask(is_probe_away);
 8003980:	f3c6 00c0 	ubfx	r0, r6, #3, #1
  sys.probe_succeeded = false; // Re-initialize probe history before beginning cycle.
 8003984:	f884 8005 	strb.w	r8, [r4, #5]
  probe_configure_invert_mask(is_probe_away);
 8003988:	f001 fa4a 	bl	8004e20 <probe_configure_invert_mask>

  // After syncing, check if probe is already triggered. If so, halt and issue alarm.
  // NOTE: This probe initialization error applies to all probing cycles.
  if ( probe_get_state() ) { // Check probe pin state.
 800398c:	f001 fa5c 	bl	8004e48 <probe_get_state>
 8003990:	bb80      	cbnz	r0, 80039f4 <mc_probe_cycle+0x94>
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
    return(GC_PROBE_FAIL_INIT); // Nothing else to do but bail.
  }

  // Setup and queue probing motion. Auto cycle-start should not start the cycle.
  mc_line(target, pl_data);
 8003992:	4638      	mov	r0, r7
 8003994:	4629      	mov	r1, r5
 8003996:	f7ff fdc1 	bl	800351c <mc_line>

  // Activate the probing state monitor in the stepper module.
  sys_probe_state = PROBE_ACTIVE;
 800399a:	2301      	movs	r3, #1
 800399c:	4d21      	ldr	r5, [pc, #132]	; (8003a24 <mc_probe_cycle+0xc4>)

  // Perform probing cycle. Wait here until probe is triggered or motion completes.
  system_set_exec_state_flag(EXEC_CYCLE_START);
 800399e:	2002      	movs	r0, #2
  sys_probe_state = PROBE_ACTIVE;
 80039a0:	702b      	strb	r3, [r5, #0]
  system_set_exec_state_flag(EXEC_CYCLE_START);
 80039a2:	f004 fde9 	bl	8008578 <system_set_exec_state_flag>
 80039a6:	e001      	b.n	80039ac <mc_probe_cycle+0x4c>
  do {
    protocol_execute_realtime();
    if (sys.abort) { return(GC_PROBE_ABORT); } // Check for system abort
  } while (sys.state != STATE_IDLE);
 80039a8:	7823      	ldrb	r3, [r4, #0]
 80039aa:	b153      	cbz	r3, 80039c2 <mc_probe_cycle+0x62>
    protocol_execute_realtime();
 80039ac:	f001 fd9c 	bl	80054e8 <protocol_execute_realtime>
    if (sys.abort) { return(GC_PROBE_ABORT); } // Check for system abort
 80039b0:	7863      	ldrb	r3, [r4, #1]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0f8      	beq.n	80039a8 <mc_probe_cycle+0x48>
    return(GC_PROBE_FAIL_INIT); // Nothing else to do but bail.
 80039b6:	2002      	movs	r0, #2
    report_probe_parameters();
  #endif

  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
  else { return(GC_PROBE_FAIL_END); } // Failed to trigger probe within travel. With or without error.
}
 80039b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 80039bc:	2000      	movs	r0, #0
}
 80039be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (sys_probe_state == PROBE_ACTIVE) {
 80039c2:	782b      	ldrb	r3, [r5, #0]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d01e      	beq.n	8003a06 <mc_probe_cycle+0xa6>
    sys.probe_succeeded = true; // Indicate to system the probing cycle completed successfully.
 80039c8:	2301      	movs	r3, #1
 80039ca:	7163      	strb	r3, [r4, #5]
  sys_probe_state = PROBE_OFF; // Ensure probe state monitor is disabled.
 80039cc:	2000      	movs	r0, #0
 80039ce:	7028      	strb	r0, [r5, #0]
  probe_configure_invert_mask(false); // Re-initialize invert mask.
 80039d0:	f001 fa26 	bl	8004e20 <probe_configure_invert_mask>
  protocol_execute_realtime();   // Check and execute run-time commands
 80039d4:	f001 fd88 	bl	80054e8 <protocol_execute_realtime>
  st_reset(); // Reset step segment buffer.
 80039d8:	f003 fce0 	bl	800739c <st_reset>
  plan_reset(); // Reset planner buffer. Zero planner positions. Ensure probing motion is cleared.
 80039dc:	f000 fb12 	bl	8004004 <plan_reset>
  plan_sync_position(); // Sync planner position to current machine position.
 80039e0:	f000 feb6 	bl	8004750 <plan_sync_position>
    report_probe_parameters();
 80039e4:	f002 f8f2 	bl	8005bcc <report_probe_parameters>
  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
 80039e8:	7960      	ldrb	r0, [r4, #5]
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 80039ea:	3800      	subs	r0, #0
 80039ec:	bf18      	it	ne
 80039ee:	2001      	movne	r0, #1
}
 80039f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_INITIAL);
 80039f4:	2004      	movs	r0, #4
 80039f6:	f004 fdd3 	bl	80085a0 <system_set_exec_alarm>
    protocol_execute_realtime();
 80039fa:	f001 fd75 	bl	80054e8 <protocol_execute_realtime>
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
 80039fe:	4640      	mov	r0, r8
 8003a00:	f001 fa0e 	bl	8004e20 <probe_configure_invert_mask>
 8003a04:	e7d7      	b.n	80039b6 <mc_probe_cycle+0x56>
    if (is_no_error) { memcpy(sys_probe_position, sys_position, sizeof(sys_position)); }
 8003a06:	06f3      	lsls	r3, r6, #27
 8003a08:	d505      	bpl.n	8003a16 <mc_probe_cycle+0xb6>
 8003a0a:	4e07      	ldr	r6, [pc, #28]	; (8003a28 <mc_probe_cycle+0xc8>)
 8003a0c:	4b07      	ldr	r3, [pc, #28]	; (8003a2c <mc_probe_cycle+0xcc>)
 8003a0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a10:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8003a14:	e7da      	b.n	80039cc <mc_probe_cycle+0x6c>
    else { system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_CONTACT); }
 8003a16:	2005      	movs	r0, #5
 8003a18:	f004 fdc2 	bl	80085a0 <system_set_exec_alarm>
 8003a1c:	e7d6      	b.n	80039cc <mc_probe_cycle+0x6c>
 8003a1e:	bf00      	nop
 8003a20:	200009d0 	.word	0x200009d0
 8003a24:	20000a04 	.word	0x20000a04
 8003a28:	200009f4 	.word	0x200009f4
 8003a2c:	200009e4 	.word	0x200009e4

08003a30 <mc_reset>:
// active processes in the system. This also checks if a system reset is issued while Grbl
// is in a motion state. If so, kills the steppers and sets the system alarm to flag position
// lost, since there was an abrupt uncontrolled deceleration. Called at an interrupt level by
// realtime abort command and hard limits. So, keep to a minimum.
void mc_reset()
{
 8003a30:	b508      	push	{r3, lr}
  // Only this function can set the system reset. Helps prevent multiple kill calls.
  if (bit_isfalse(sys_rt_exec_state, EXEC_RESET)) {
 8003a32:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <mc_reset+0x54>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	06db      	lsls	r3, r3, #27
 8003a38:	d500      	bpl.n	8003a3c <mc_reset+0xc>
      }
      else { system_set_exec_alarm(EXEC_ALARM_ABORT_CYCLE); }
      st_go_idle(); // Force kill steppers. Position has likely been lost.
    }
  }
}
 8003a3a:	bd08      	pop	{r3, pc}
    system_set_exec_state_flag(EXEC_RESET);
 8003a3c:	2010      	movs	r0, #16
 8003a3e:	f004 fd9b 	bl	8008578 <system_set_exec_state_flag>
    spindle_stop();
 8003a42:	f003 f911 	bl	8006c68 <spindle_stop>
    coolant_stop();
 8003a46:	f7fd fde3 	bl	8001610 <coolant_stop>
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 8003a4a:	4b0f      	ldr	r3, [pc, #60]	; (8003a88 <mc_reset+0x58>)
 8003a4c:	781a      	ldrb	r2, [r3, #0]
 8003a4e:	791b      	ldrb	r3, [r3, #4]
 8003a50:	f002 012c 	and.w	r1, r2, #44	; 0x2c
 8003a54:	f003 0306 	and.w	r3, r3, #6
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	d0ee      	beq.n	8003a3a <mc_reset+0xa>
      if (sys.state == STATE_HOMING) {
 8003a5c:	2a04      	cmp	r2, #4
 8003a5e:	d106      	bne.n	8003a6e <mc_reset+0x3e>
        if (!sys_rt_exec_alarm) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8003a60:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <mc_reset+0x5c>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	b153      	cbz	r3, 8003a7c <mc_reset+0x4c>
}
 8003a66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      st_go_idle(); // Force kill steppers. Position has likely been lost.
 8003a6a:	f003 bae7 	b.w	800703c <st_go_idle>
      else { system_set_exec_alarm(EXEC_ALARM_ABORT_CYCLE); }
 8003a6e:	2003      	movs	r0, #3
 8003a70:	f004 fd96 	bl	80085a0 <system_set_exec_alarm>
}
 8003a74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      st_go_idle(); // Force kill steppers. Position has likely been lost.
 8003a78:	f003 bae0 	b.w	800703c <st_go_idle>
        if (!sys_rt_exec_alarm) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8003a7c:	2006      	movs	r0, #6
 8003a7e:	f004 fd8f 	bl	80085a0 <system_set_exec_alarm>
 8003a82:	e7f0      	b.n	8003a66 <mc_reset+0x36>
 8003a84:	20000a08 	.word	0x20000a08
 8003a88:	200009d0 	.word	0x200009d0
 8003a8c:	20000a06 	.word	0x20000a06

08003a90 <read_float>:
// CNC applications, the typical decimal value is expected to be in the range of E0 to E-4.
// Scientific notation is officially not supported by g-code, and the 'E' character may
// be a g-code word on some CNC systems. So, 'E' notation will not be recognized.
// NOTE: Thanks to Radu-Eosif Mihailescu for identifying the issues with using strtod().
uint8_t read_float(char *line, uint8_t *char_counter, float *float_ptr)
{
 8003a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char *ptr = line + *char_counter;
 8003a94:	780b      	ldrb	r3, [r1, #0]
{
 8003a96:	4617      	mov	r7, r2
  char *ptr = line + *char_counter;
 8003a98:	18c2      	adds	r2, r0, r3
  unsigned char c;

  // Grab first character and increment pointer. No spaces assumed in line.
  c = *ptr++;
 8003a9a:	5cc3      	ldrb	r3, [r0, r3]
{
 8003a9c:	460e      	mov	r6, r1

  // Capture initial positive/minus character
  bool isnegative = false;
  if (c == '-') {
 8003a9e:	2b2d      	cmp	r3, #45	; 0x2d
{
 8003aa0:	4605      	mov	r5, r0
 8003aa2:	b083      	sub	sp, #12
  if (c == '-') {
 8003aa4:	d074      	beq.n	8003b90 <read_float+0x100>
    isnegative = true;
    c = *ptr++;
  } else if (c == '+') {
 8003aa6:	2b2b      	cmp	r3, #43	; 0x2b
    c = *ptr++;
 8003aa8:	bf0a      	itet	eq
 8003aaa:	7853      	ldrbeq	r3, [r2, #1]
  c = *ptr++;
 8003aac:	f102 0901 	addne.w	r9, r2, #1
    c = *ptr++;
 8003ab0:	f102 0902 	addeq.w	r9, r2, #2
  bool isnegative = false;
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	9201      	str	r2, [sp, #4]

  // Extract number into fast integer. Track decimal in terms of exponent value.
  uint32_t intval = 0;
  int8_t exp = 0;
  uint8_t ndigit = 0;
  bool isdecimal = false;
 8003ab8:	2200      	movs	r2, #0
  uint8_t ndigit = 0;
 8003aba:	4614      	mov	r4, r2
  int8_t exp = 0;
 8003abc:	4692      	mov	sl, r2
  uint32_t intval = 0;
 8003abe:	4610      	mov	r0, r2
 8003ac0:	e00e      	b.n	8003ae0 <read_float+0x50>
  while(1) {
    c -= '0';
    if (c <= 9) {
      ndigit++;
 8003ac2:	3401      	adds	r4, #1
 8003ac4:	b2e4      	uxtb	r4, r4
      if (ndigit <= MAX_INT_DIGITS) {
 8003ac6:	2c08      	cmp	r4, #8
 8003ac8:	d813      	bhi.n	8003af2 <read_float+0x62>
        if (isdecimal) { exp--; }
 8003aca:	b11a      	cbz	r2, 8003ad4 <read_float+0x44>
 8003acc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003ad0:	fa4f fa8a 	sxtb.w	sl, sl
        intval = (((intval << 2) + intval) << 1) + c; // intval*10 + c
 8003ad4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003ad8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
      isdecimal = true;
    } else {
      break;
    }
    c = *ptr++;
 8003adc:	f819 3b01 	ldrb.w	r3, [r9], #1
    c -= '0';
 8003ae0:	3b30      	subs	r3, #48	; 0x30
 8003ae2:	b2db      	uxtb	r3, r3
    if (c <= 9) {
 8003ae4:	2b09      	cmp	r3, #9
 8003ae6:	d9ec      	bls.n	8003ac2 <read_float+0x32>
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
 8003ae8:	2bfe      	cmp	r3, #254	; 0xfe
 8003aea:	d109      	bne.n	8003b00 <read_float+0x70>
 8003aec:	b942      	cbnz	r2, 8003b00 <read_float+0x70>
      isdecimal = true;
 8003aee:	2201      	movs	r2, #1
 8003af0:	e7f4      	b.n	8003adc <read_float+0x4c>
        if (!(isdecimal)) { exp++; }  // Drop overflow digits
 8003af2:	2a00      	cmp	r2, #0
 8003af4:	d1f2      	bne.n	8003adc <read_float+0x4c>
 8003af6:	f10a 0a01 	add.w	sl, sl, #1
 8003afa:	fa4f fa8a 	sxtb.w	sl, sl
 8003afe:	e7ed      	b.n	8003adc <read_float+0x4c>
  }

  // Return if no digits have been read.
  if (!ndigit) { return(false); };
 8003b00:	2c00      	cmp	r4, #0
 8003b02:	d03d      	beq.n	8003b80 <read_float+0xf0>

  // Convert integer into floating point.
  float fval;
  fval = (float)intval;
 8003b04:	f7fc fe6e 	bl	80007e4 <__aeabi_ui2f>

  // Apply decimal. Should perform no more than two floating point multiplications for the
  // expected range of E0 to E-4.
  if (fval != 0) {
 8003b08:	2100      	movs	r1, #0
  fval = (float)intval;
 8003b0a:	4683      	mov	fp, r0
  if (fval != 0) {
 8003b0c:	f7fd f856 	bl	8000bbc <__aeabi_fcmpeq>
 8003b10:	bb68      	cbnz	r0, 8003b6e <read_float+0xde>
    while (exp <= -2) {
 8003b12:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003b16:	da16      	bge.n	8003b46 <read_float+0xb6>
 8003b18:	4654      	mov	r4, sl
      fval *= 0.01f;
 8003b1a:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8003bb0 <read_float+0x120>
 8003b1e:	4658      	mov	r0, fp
 8003b20:	4641      	mov	r1, r8
 8003b22:	f7fc feb7 	bl	8000894 <__aeabi_fmul>
 8003b26:	3402      	adds	r4, #2
 8003b28:	b264      	sxtb	r4, r4
    while (exp <= -2) {
 8003b2a:	1c63      	adds	r3, r4, #1
      fval *= 0.01f;
 8003b2c:	4683      	mov	fp, r0
    while (exp <= -2) {
 8003b2e:	dbf6      	blt.n	8003b1e <read_float+0x8e>
 8003b30:	fa5f fa8a 	uxtb.w	sl, sl
 8003b34:	f1ca 03fe 	rsb	r3, sl, #254	; 0xfe
 8003b38:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003b3c:	449a      	add	sl, r3
 8003b3e:	f10a 0a02 	add.w	sl, sl, #2
 8003b42:	fa4f fa8a 	sxtb.w	sl, sl
      exp += 2;
    }
    if (exp < 0) {
 8003b46:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003b4a:	d027      	beq.n	8003b9c <read_float+0x10c>
      fval *= 0.1f;
    } else if (exp > 0) {
 8003b4c:	f1ba 0f00 	cmp.w	sl, #0
 8003b50:	d00d      	beq.n	8003b6e <read_float+0xde>
      do {
        fval *= 10.0f;
 8003b52:	4c18      	ldr	r4, [pc, #96]	; (8003bb4 <read_float+0x124>)
 8003b54:	4658      	mov	r0, fp
 8003b56:	4621      	mov	r1, r4
 8003b58:	f7fc fe9c 	bl	8000894 <__aeabi_fmul>
 8003b5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b60:	fa5f f38a 	uxtb.w	r3, sl
 8003b64:	4683      	mov	fp, r0
      } while (--exp > 0);
 8003b66:	fa4f fa8a 	sxtb.w	sl, sl
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f2      	bne.n	8003b54 <read_float+0xc4>
    }
  }

  // Assign floating point value with correct sign.
  if (isnegative) {
 8003b6e:	9b01      	ldr	r3, [sp, #4]
 8003b70:	b953      	cbnz	r3, 8003b88 <read_float+0xf8>
    *float_ptr = fval;
  }

  *char_counter = ptr - line - 1; // Set char_counter to next statement

  return(true);
 8003b72:	2401      	movs	r4, #1
  *char_counter = ptr - line - 1; // Set char_counter to next statement
 8003b74:	eba9 0505 	sub.w	r5, r9, r5
 8003b78:	3d01      	subs	r5, #1
 8003b7a:	f8c7 b000 	str.w	fp, [r7]
 8003b7e:	7035      	strb	r5, [r6, #0]
}
 8003b80:	4620      	mov	r0, r4
 8003b82:	b003      	add	sp, #12
 8003b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *float_ptr = -fval;
 8003b88:	f10b 4000 	add.w	r0, fp, #2147483648	; 0x80000000
 8003b8c:	4683      	mov	fp, r0
 8003b8e:	e7f0      	b.n	8003b72 <read_float+0xe2>
    c = *ptr++;
 8003b90:	7853      	ldrb	r3, [r2, #1]
 8003b92:	f102 0902 	add.w	r9, r2, #2
    isnegative = true;
 8003b96:	2201      	movs	r2, #1
 8003b98:	9201      	str	r2, [sp, #4]
 8003b9a:	e78d      	b.n	8003ab8 <read_float+0x28>
      fval *= 0.1f;
 8003b9c:	4658      	mov	r0, fp
 8003b9e:	4906      	ldr	r1, [pc, #24]	; (8003bb8 <read_float+0x128>)
 8003ba0:	f7fc fe78 	bl	8000894 <__aeabi_fmul>
  if (isnegative) {
 8003ba4:	9b01      	ldr	r3, [sp, #4]
      fval *= 0.1f;
 8003ba6:	4683      	mov	fp, r0
  if (isnegative) {
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0e2      	beq.n	8003b72 <read_float+0xe2>
 8003bac:	e7ec      	b.n	8003b88 <read_float+0xf8>
 8003bae:	bf00      	nop
 8003bb0:	3c23d70a 	.word	0x3c23d70a
 8003bb4:	41200000 	.word	0x41200000
 8003bb8:	3dcccccd 	.word	0x3dcccccd

08003bbc <delay_sec>:


// Non-blocking delay function used for general operation and suspend features.
void delay_sec(float seconds, uint8_t mode)
{
 8003bbc:	b570      	push	{r4, r5, r6, lr}
 8003bbe:	460d      	mov	r5, r1
	uint16_t i = (uint16_t)ceilf(1000 / DWELL_TIME_STEP*seconds);
 8003bc0:	4917      	ldr	r1, [pc, #92]	; (8003c20 <delay_sec+0x64>)
 8003bc2:	f7fc fe67 	bl	8000894 <__aeabi_fmul>
 8003bc6:	f006 f819 	bl	8009bfc <ceilf>
 8003bca:	f7fd f865 	bl	8000c98 <__aeabi_f2uiz>
 8003bce:	b280      	uxth	r0, r0
	while (i-- > 0) {
 8003bd0:	b1a8      	cbz	r0, 8003bfe <delay_sec+0x42>
 8003bd2:	1e44      	subs	r4, r0, #1
 8003bd4:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8003bd8:	b2a4      	uxth	r4, r4
 8003bda:	b18d      	cbz	r5, 8003c00 <delay_sec+0x44>
 8003bdc:	4d11      	ldr	r5, [pc, #68]	; (8003c24 <delay_sec+0x68>)
 8003bde:	e00b      	b.n	8003bf8 <delay_sec+0x3c>
		if (sys.abort) { return; }
		if (mode == DELAY_MODE_DWELL) {
			protocol_execute_realtime();
		} else { // DELAY_MODE_SYS_SUSPEND
		  // Execute rt_system() only to avoid nesting suspend loops.
		  protocol_exec_rt_system();
 8003be0:	f001 f970 	bl	8004ec4 <protocol_exec_rt_system>
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
 8003be4:	78ab      	ldrb	r3, [r5, #2]
 8003be6:	079b      	lsls	r3, r3, #30
 8003be8:	d409      	bmi.n	8003bfe <delay_sec+0x42>
	while (i-- > 0) {
 8003bea:	3c01      	subs	r4, #1
		}
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 8003bec:	2032      	movs	r0, #50	; 0x32
	while (i-- > 0) {
 8003bee:	b2a4      	uxth	r4, r4
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 8003bf0:	f7ff fc6e 	bl	80034d0 <_delay_ms>
	while (i-- > 0) {
 8003bf4:	42b4      	cmp	r4, r6
 8003bf6:	d002      	beq.n	8003bfe <delay_sec+0x42>
		if (sys.abort) { return; }
 8003bf8:	786b      	ldrb	r3, [r5, #1]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0f0      	beq.n	8003be0 <delay_sec+0x24>
	}
}
 8003bfe:	bd70      	pop	{r4, r5, r6, pc}
 8003c00:	4d08      	ldr	r5, [pc, #32]	; (8003c24 <delay_sec+0x68>)
 8003c02:	e008      	b.n	8003c16 <delay_sec+0x5a>
	while (i-- > 0) {
 8003c04:	3c01      	subs	r4, #1
			protocol_execute_realtime();
 8003c06:	f001 fc6f 	bl	80054e8 <protocol_execute_realtime>
	while (i-- > 0) {
 8003c0a:	b2a4      	uxth	r4, r4
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 8003c0c:	2032      	movs	r0, #50	; 0x32
 8003c0e:	f7ff fc5f 	bl	80034d0 <_delay_ms>
	while (i-- > 0) {
 8003c12:	42b4      	cmp	r4, r6
 8003c14:	d0f3      	beq.n	8003bfe <delay_sec+0x42>
		if (sys.abort) { return; }
 8003c16:	786b      	ldrb	r3, [r5, #1]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0f3      	beq.n	8003c04 <delay_sec+0x48>
}
 8003c1c:	bd70      	pop	{r4, r5, r6, pc}
 8003c1e:	bf00      	nop
 8003c20:	41a00000 	.word	0x41a00000
 8003c24:	200009d0 	.word	0x200009d0

08003c28 <delay_ms>:

// Delays variable defined milliseconds. Compiler compatibility fix for _delay_ms(),
// which only accepts constants in future compiler releases.
void delay_ms(uint16_t ms)
{
  while ( ms-- ) { _delay_ms(1); }
 8003c28:	b160      	cbz	r0, 8003c44 <delay_ms+0x1c>
{
 8003c2a:	b538      	push	{r3, r4, r5, lr}
  while ( ms-- ) { _delay_ms(1); }
 8003c2c:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003c30:	1e44      	subs	r4, r0, #1
 8003c32:	b2a4      	uxth	r4, r4
 8003c34:	3c01      	subs	r4, #1
 8003c36:	2001      	movs	r0, #1
 8003c38:	b2a4      	uxth	r4, r4
 8003c3a:	f7ff fc49 	bl	80034d0 <_delay_ms>
 8003c3e:	42ac      	cmp	r4, r5
 8003c40:	d1f8      	bne.n	8003c34 <delay_ms+0xc>
}
 8003c42:	bd38      	pop	{r3, r4, r5, pc}
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop

08003c48 <hypot_f>:


// Simple hypotenuse computation function.
float hypot_f(float x, float y) { return(sqrtf(x*x + y*y)); }
 8003c48:	b538      	push	{r3, r4, r5, lr}
 8003c4a:	460d      	mov	r5, r1
 8003c4c:	4601      	mov	r1, r0
 8003c4e:	f7fc fe21 	bl	8000894 <__aeabi_fmul>
 8003c52:	4629      	mov	r1, r5
 8003c54:	4604      	mov	r4, r0
 8003c56:	4628      	mov	r0, r5
 8003c58:	f7fc fe1c 	bl	8000894 <__aeabi_fmul>
 8003c5c:	4601      	mov	r1, r0
 8003c5e:	4620      	mov	r0, r4
 8003c60:	f7fc fd10 	bl	8000684 <__addsf3>
 8003c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c68:	f006 b8ea 	b.w	8009e40 <sqrtf>

08003c6c <convert_delta_vector_to_unit_vector>:


float convert_delta_vector_to_unit_vector(float *vector)
{
 8003c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t idx;
  float magnitude = 0.0f;
  for (idx=0; idx<N_AXIS; idx++) {
    if (vector[idx] != 0.0f) {
 8003c70:	6807      	ldr	r7, [r0, #0]
{
 8003c72:	4604      	mov	r4, r0
    if (vector[idx] != 0.0f) {
 8003c74:	2100      	movs	r1, #0
 8003c76:	4638      	mov	r0, r7
 8003c78:	f7fc ffa0 	bl	8000bbc <__aeabi_fcmpeq>
 8003c7c:	2800      	cmp	r0, #0
 8003c7e:	d156      	bne.n	8003d2e <convert_delta_vector_to_unit_vector+0xc2>
      magnitude += vector[idx]*vector[idx];
 8003c80:	4639      	mov	r1, r7
 8003c82:	4638      	mov	r0, r7
 8003c84:	f7fc fe06 	bl	8000894 <__aeabi_fmul>
 8003c88:	4605      	mov	r5, r0
    if (vector[idx] != 0.0f) {
 8003c8a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8003c8e:	2100      	movs	r1, #0
 8003c90:	4648      	mov	r0, r9
 8003c92:	f7fc ff93 	bl	8000bbc <__aeabi_fcmpeq>
 8003c96:	b940      	cbnz	r0, 8003caa <convert_delta_vector_to_unit_vector+0x3e>
      magnitude += vector[idx]*vector[idx];
 8003c98:	4649      	mov	r1, r9
 8003c9a:	4648      	mov	r0, r9
 8003c9c:	f7fc fdfa 	bl	8000894 <__aeabi_fmul>
 8003ca0:	4601      	mov	r1, r0
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	f7fc fcee 	bl	8000684 <__addsf3>
 8003ca8:	4605      	mov	r5, r0
    if (vector[idx] != 0.0f) {
 8003caa:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8003cae:	2100      	movs	r1, #0
 8003cb0:	4640      	mov	r0, r8
 8003cb2:	f7fc ff83 	bl	8000bbc <__aeabi_fcmpeq>
 8003cb6:	b940      	cbnz	r0, 8003cca <convert_delta_vector_to_unit_vector+0x5e>
      magnitude += vector[idx]*vector[idx];
 8003cb8:	4641      	mov	r1, r8
 8003cba:	4640      	mov	r0, r8
 8003cbc:	f7fc fdea 	bl	8000894 <__aeabi_fmul>
 8003cc0:	4601      	mov	r1, r0
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	f7fc fcde 	bl	8000684 <__addsf3>
 8003cc8:	4605      	mov	r5, r0
    if (vector[idx] != 0.0f) {
 8003cca:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4650      	mov	r0, sl
 8003cd2:	f7fc ff73 	bl	8000bbc <__aeabi_fcmpeq>
 8003cd6:	b940      	cbnz	r0, 8003cea <convert_delta_vector_to_unit_vector+0x7e>
      magnitude += vector[idx]*vector[idx];
 8003cd8:	4651      	mov	r1, sl
 8003cda:	4650      	mov	r0, sl
 8003cdc:	f7fc fdda 	bl	8000894 <__aeabi_fmul>
 8003ce0:	4601      	mov	r1, r0
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	f7fc fcce 	bl	8000684 <__addsf3>
 8003ce8:	4605      	mov	r5, r0
    }
  }
  magnitude = sqrtf(magnitude);
 8003cea:	4628      	mov	r0, r5
 8003cec:	f006 f8a8 	bl	8009e40 <sqrtf>
 8003cf0:	4606      	mov	r6, r0
  float inv_magnitude = 1.0f/magnitude;
 8003cf2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003cf6:	4631      	mov	r1, r6
 8003cf8:	f7fc fe80 	bl	80009fc <__aeabi_fdiv>
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 8003cfc:	4639      	mov	r1, r7
  float inv_magnitude = 1.0f/magnitude;
 8003cfe:	4605      	mov	r5, r0
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 8003d00:	f7fc fdc8 	bl	8000894 <__aeabi_fmul>
 8003d04:	4649      	mov	r1, r9
 8003d06:	6020      	str	r0, [r4, #0]
 8003d08:	4628      	mov	r0, r5
 8003d0a:	f7fc fdc3 	bl	8000894 <__aeabi_fmul>
 8003d0e:	4641      	mov	r1, r8
 8003d10:	6060      	str	r0, [r4, #4]
 8003d12:	4628      	mov	r0, r5
 8003d14:	f7fc fdbe 	bl	8000894 <__aeabi_fmul>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	4651      	mov	r1, sl
 8003d1c:	60a3      	str	r3, [r4, #8]
 8003d1e:	4628      	mov	r0, r5
 8003d20:	f7fc fdb8 	bl	8000894 <__aeabi_fmul>
 8003d24:	4603      	mov	r3, r0
  return(magnitude);
}
 8003d26:	4630      	mov	r0, r6
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 8003d28:	60e3      	str	r3, [r4, #12]
}
 8003d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  float magnitude = 0.0f;
 8003d2e:	463d      	mov	r5, r7
 8003d30:	e7ab      	b.n	8003c8a <convert_delta_vector_to_unit_vector+0x1e>
 8003d32:	bf00      	nop

08003d34 <limit_value_by_axis_maximum>:


float limit_value_by_axis_maximum(float *max_value, float *unit_vec)
{
 8003d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d36:	460c      	mov	r4, r1
  uint8_t idx;
  float limit_value = SOME_LARGE_VALUE;
  for (idx=0; idx<N_AXIS; idx++) {
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8003d38:	6825      	ldr	r5, [r4, #0]
{
 8003d3a:	4606      	mov	r6, r0
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4628      	mov	r0, r5
 8003d40:	f7fc ff3c 	bl	8000bbc <__aeabi_fcmpeq>
 8003d44:	2800      	cmp	r0, #0
 8003d46:	d143      	bne.n	8003dd0 <limit_value_by_axis_maximum+0x9c>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8003d48:	4629      	mov	r1, r5
 8003d4a:	6830      	ldr	r0, [r6, #0]
 8003d4c:	f7fc fe56 	bl	80009fc <__aeabi_fdiv>
 8003d50:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8003d54:	4628      	mov	r0, r5
 8003d56:	4923      	ldr	r1, [pc, #140]	; (8003de4 <limit_value_by_axis_maximum+0xb0>)
 8003d58:	f7fc ff44 	bl	8000be4 <__aeabi_fcmple>
 8003d5c:	2800      	cmp	r0, #0
 8003d5e:	d037      	beq.n	8003dd0 <limit_value_by_axis_maximum+0x9c>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8003d60:	6867      	ldr	r7, [r4, #4]
 8003d62:	2100      	movs	r1, #0
 8003d64:	4638      	mov	r0, r7
 8003d66:	f7fc ff29 	bl	8000bbc <__aeabi_fcmpeq>
 8003d6a:	b958      	cbnz	r0, 8003d84 <limit_value_by_axis_maximum+0x50>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8003d6c:	4639      	mov	r1, r7
 8003d6e:	6870      	ldr	r0, [r6, #4]
 8003d70:	f7fc fe44 	bl	80009fc <__aeabi_fdiv>
 8003d74:	4607      	mov	r7, r0
 8003d76:	f027 4700 	bic.w	r7, r7, #2147483648	; 0x80000000
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	4639      	mov	r1, r7
 8003d7e:	f7fc ff31 	bl	8000be4 <__aeabi_fcmple>
 8003d82:	b360      	cbz	r0, 8003dde <limit_value_by_axis_maximum+0xaa>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8003d84:	68a7      	ldr	r7, [r4, #8]
 8003d86:	2100      	movs	r1, #0
 8003d88:	4638      	mov	r0, r7
 8003d8a:	f7fc ff17 	bl	8000bbc <__aeabi_fcmpeq>
 8003d8e:	b958      	cbnz	r0, 8003da8 <limit_value_by_axis_maximum+0x74>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8003d90:	4639      	mov	r1, r7
 8003d92:	68b0      	ldr	r0, [r6, #8]
 8003d94:	f7fc fe32 	bl	80009fc <__aeabi_fdiv>
 8003d98:	4607      	mov	r7, r0
 8003d9a:	f027 4700 	bic.w	r7, r7, #2147483648	; 0x80000000
 8003d9e:	4628      	mov	r0, r5
 8003da0:	4639      	mov	r1, r7
 8003da2:	f7fc ff1f 	bl	8000be4 <__aeabi_fcmple>
 8003da6:	b1c0      	cbz	r0, 8003dda <limit_value_by_axis_maximum+0xa6>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8003da8:	68e4      	ldr	r4, [r4, #12]
 8003daa:	2100      	movs	r1, #0
 8003dac:	4620      	mov	r0, r4
 8003dae:	f7fc ff05 	bl	8000bbc <__aeabi_fcmpeq>
 8003db2:	b958      	cbnz	r0, 8003dcc <limit_value_by_axis_maximum+0x98>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8003db4:	4621      	mov	r1, r4
 8003db6:	68f0      	ldr	r0, [r6, #12]
 8003db8:	f7fc fe20 	bl	80009fc <__aeabi_fdiv>
 8003dbc:	4604      	mov	r4, r0
 8003dbe:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003dc2:	4628      	mov	r0, r5
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	f7fc ff0d 	bl	8000be4 <__aeabi_fcmple>
 8003dca:	b118      	cbz	r0, 8003dd4 <limit_value_by_axis_maximum+0xa0>
    }
  }
  return(limit_value);
}
 8003dcc:	4628      	mov	r0, r5
 8003dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  float limit_value = SOME_LARGE_VALUE;
 8003dd0:	4d04      	ldr	r5, [pc, #16]	; (8003de4 <limit_value_by_axis_maximum+0xb0>)
 8003dd2:	e7c5      	b.n	8003d60 <limit_value_by_axis_maximum+0x2c>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8003dd4:	4625      	mov	r5, r4
}
 8003dd6:	4628      	mov	r0, r5
 8003dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8003dda:	463d      	mov	r5, r7
 8003ddc:	e7e4      	b.n	8003da8 <limit_value_by_axis_maximum+0x74>
 8003dde:	463d      	mov	r5, r7
 8003de0:	e7d0      	b.n	8003d84 <limit_value_by_axis_maximum+0x50>
 8003de2:	bf00      	nop
 8003de4:	7f7fffff 	.word	0x7f7fffff

08003de8 <planner_recalculate>:
  to compute an optimal plan, so select carefully. The Arduino 328p memory is already maxed out, but future
  ARM versions should have enough memory and speed for look-ahead blocks numbering up to a hundred or more.

*/
static void planner_recalculate()
{
 8003de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Initialize block index to the last block in the planner buffer.
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 8003dec:	4b80      	ldr	r3, [pc, #512]	; (8003ff0 <planner_recalculate+0x208>)
{
 8003dee:	b085      	sub	sp, #20
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	9301      	str	r3, [sp, #4]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 80b9 	beq.w	8003f6c <planner_recalculate+0x184>

  // Bail. Can't do anything with one only one plan-able block.
  if (block_index == block_buffer_planned) { return; }
 8003dfa:	4a7e      	ldr	r2, [pc, #504]	; (8003ff4 <planner_recalculate+0x20c>)
  block_index--;
 8003dfc:	f103 38ff 	add.w	r8, r3, #4294967295
  if (block_index == block_buffer_planned) { return; }
 8003e00:	7815      	ldrb	r5, [r2, #0]
  block_index--;
 8003e02:	fa5f f888 	uxtb.w	r8, r8
  if (block_index == block_buffer_planned) { return; }
 8003e06:	4545      	cmp	r5, r8
 8003e08:	9202      	str	r2, [sp, #8]
 8003e0a:	f000 80ac 	beq.w	8003f66 <planner_recalculate+0x17e>
  // Reverse Pass: Coarsely maximize all possible deceleration curves back-planning from the last
  // block in buffer. Cease planning when the last optimal planned or tail pointer is reached.
  // NOTE: Forward pass will later refine and correct the reverse pass to create an optimal plan.
  float entry_speed_sqr;
  plan_block_t *next;
  plan_block_t *current = &block_buffer[block_index];
 8003e0e:	4e7a      	ldr	r6, [pc, #488]	; (8003ff8 <planner_recalculate+0x210>)
 8003e10:	ebc8 04c8 	rsb	r4, r8, r8, lsl #3
 8003e14:	eb06 04c4 	add.w	r4, r6, r4, lsl #3

  // Calculate maximum entry speed for last block in buffer, where the exit speed is always zero.
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 8003e18:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003e1a:	6a20      	ldr	r0, [r4, #32]
 8003e1c:	f7fc fd3a 	bl	8000894 <__aeabi_fmul>
 8003e20:	4601      	mov	r1, r0
 8003e22:	f7fc fc2f 	bl	8000684 <__addsf3>
 8003e26:	69e1      	ldr	r1, [r4, #28]
 8003e28:	4681      	mov	r9, r0
 8003e2a:	f104 0b18 	add.w	fp, r4, #24
 8003e2e:	9103      	str	r1, [sp, #12]
 8003e30:	f7fc fed8 	bl	8000be4 <__aeabi_fcmple>
 8003e34:	2800      	cmp	r0, #0
 8003e36:	f000 80cb 	beq.w	8003fd0 <planner_recalculate+0x1e8>
 8003e3a:	f8cb 9000 	str.w	r9, [fp]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 8003e3e:	f04f 0b23 	mov.w	fp, #35	; 0x23
 8003e42:	f1b8 0f00 	cmp.w	r8, #0
 8003e46:	f040 80cd 	bne.w	8003fe4 <planner_recalculate+0x1fc>

  block_index = plan_prev_block_index(block_index);
  if (block_index == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 8003e4a:	455d      	cmp	r5, fp
 8003e4c:	f000 80ac 	beq.w	8003fa8 <planner_recalculate+0x1c0>
 8003e50:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8003ffc <planner_recalculate+0x214>
 8003e54:	e02a      	b.n	8003eac <planner_recalculate+0xc4>
      next = current;
      current = &block_buffer[block_index];
      block_index = plan_prev_block_index(block_index);

      // Check if next block is the tail block(=planned block). If so, update current stepper parameters.
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8003e56:	f899 3000 	ldrb.w	r3, [r9]
  block_index--;
 8003e5a:	fa5f fb81 	uxtb.w	fp, r1
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8003e5e:	455b      	cmp	r3, fp
 8003e60:	d035      	beq.n	8003ece <planner_recalculate+0xe6>

      // Compute maximum entry speed decelerating over the current block from its exit speed.
      if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 8003e62:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 8003e66:	eb06 0ac7 	add.w	sl, r6, r7, lsl #3
 8003e6a:	f8da 701c 	ldr.w	r7, [sl, #28]
 8003e6e:	f8da 0018 	ldr.w	r0, [sl, #24]
 8003e72:	4639      	mov	r1, r7
 8003e74:	f7fc fea2 	bl	8000bbc <__aeabi_fcmpeq>
 8003e78:	b9b0      	cbnz	r0, 8003ea8 <planner_recalculate+0xc0>
        entry_speed_sqr = next->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 8003e7a:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 8003e7e:	f8da 0020 	ldr.w	r0, [sl, #32]
 8003e82:	f7fc fd07 	bl	8000894 <__aeabi_fmul>
 8003e86:	4601      	mov	r1, r0
 8003e88:	f7fc fbfc 	bl	8000684 <__addsf3>
 8003e8c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8003e90:	f7fc fbf8 	bl	8000684 <__addsf3>
 8003e94:	4680      	mov	r8, r0
        if (entry_speed_sqr < current->max_entry_speed_sqr) {
 8003e96:	4638      	mov	r0, r7
 8003e98:	4641      	mov	r1, r8
 8003e9a:	f7fc feb7 	bl	8000c0c <__aeabi_fcmpgt>
 8003e9e:	2800      	cmp	r0, #0
 8003ea0:	f000 808e 	beq.w	8003fc0 <planner_recalculate+0x1d8>
          current->entry_speed_sqr = entry_speed_sqr;
 8003ea4:	f8ca 8018 	str.w	r8, [sl, #24]
    while (block_index != block_buffer_planned) {
 8003ea8:	45ab      	cmp	fp, r5
 8003eaa:	d015      	beq.n	8003ed8 <planner_recalculate+0xf0>
      current = &block_buffer[block_index];
 8003eac:	ebcb 03cb 	rsb	r3, fp, fp, lsl #3
 8003eb0:	46a0      	mov	r8, r4
 8003eb2:	465f      	mov	r7, fp
  block_index--;
 8003eb4:	f10b 31ff 	add.w	r1, fp, #4294967295
      current = &block_buffer[block_index];
 8003eb8:	eb06 04c3 	add.w	r4, r6, r3, lsl #3
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 8003ebc:	f1bb 0f00 	cmp.w	fp, #0
 8003ec0:	d1c9      	bne.n	8003e56 <planner_recalculate+0x6e>
 8003ec2:	f04f 0b23 	mov.w	fp, #35	; 0x23
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8003ec6:	f899 3000 	ldrb.w	r3, [r9]
 8003eca:	455b      	cmp	r3, fp
 8003ecc:	d1c9      	bne.n	8003e62 <planner_recalculate+0x7a>
 8003ece:	f003 fb8d 	bl	80075ec <st_update_plan_block_parameters>
    while (block_index != block_buffer_planned) {
 8003ed2:	9b02      	ldr	r3, [sp, #8]
 8003ed4:	781d      	ldrb	r5, [r3, #0]
 8003ed6:	e7c4      	b.n	8003e62 <planner_recalculate+0x7a>

  // Forward Pass: Forward plan the acceleration curve from the planned pointer onward.
  // Also scans for optimal plan breakpoints and appropriately updates the planned pointer.
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
  block_index = plan_next_block_index(block_buffer_planned);
  while (block_index != block_buffer_head) {
 8003ed8:	4b45      	ldr	r3, [pc, #276]	; (8003ff0 <planner_recalculate+0x208>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	9301      	str	r3, [sp, #4]
  block_index++;
 8003ede:	1c6c      	adds	r4, r5, #1
 8003ee0:	b2e4      	uxtb	r4, r4
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8003ee2:	2c24      	cmp	r4, #36	; 0x24
 8003ee4:	bf08      	it	eq
 8003ee6:	2400      	moveq	r4, #0
  while (block_index != block_buffer_head) {
 8003ee8:	9b01      	ldr	r3, [sp, #4]
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 8003eea:	ebc5 0bc5 	rsb	fp, r5, r5, lsl #3
  while (block_index != block_buffer_head) {
 8003eee:	429c      	cmp	r4, r3
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 8003ef0:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
  while (block_index != block_buffer_head) {
 8003ef4:	d037      	beq.n	8003f66 <planner_recalculate+0x17e>
    current = next;
    next = &block_buffer[block_index];
 8003ef6:	ebc4 08c4 	rsb	r8, r4, r4, lsl #3
 8003efa:	eb06 08c8 	add.w	r8, r6, r8, lsl #3

    // Any acceleration detected in the forward pass automatically moves the optimal planned
    // pointer forward, since everything before this is all optimal. In other words, nothing
    // can improve the plan from the buffer tail to the planned pointer by logic.
    if (current->entry_speed_sqr < next->entry_speed_sqr) {
 8003efe:	f8d8 9018 	ldr.w	r9, [r8, #24]
 8003f02:	f8db 7018 	ldr.w	r7, [fp, #24]
 8003f06:	4648      	mov	r0, r9
 8003f08:	4639      	mov	r1, r7
 8003f0a:	f7fc fe7f 	bl	8000c0c <__aeabi_fcmpgt>
    next = &block_buffer[block_index];
 8003f0e:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
    if (current->entry_speed_sqr < next->entry_speed_sqr) {
 8003f12:	b1a0      	cbz	r0, 8003f3e <planner_recalculate+0x156>
      entry_speed_sqr = current->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 8003f14:	f8db 1020 	ldr.w	r1, [fp, #32]
 8003f18:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
 8003f1c:	f7fc fcba 	bl	8000894 <__aeabi_fmul>
 8003f20:	4601      	mov	r1, r0
 8003f22:	f7fc fbaf 	bl	8000684 <__addsf3>
 8003f26:	4639      	mov	r1, r7
 8003f28:	f7fc fbac 	bl	8000684 <__addsf3>
      // If true, current block is full-acceleration and we can move the planned pointer forward.
      if (entry_speed_sqr < next->entry_speed_sqr) {
 8003f2c:	4649      	mov	r1, r9
      entry_speed_sqr = current->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 8003f2e:	4683      	mov	fp, r0
      if (entry_speed_sqr < next->entry_speed_sqr) {
 8003f30:	f7fc fe4e 	bl	8000bd0 <__aeabi_fcmplt>
 8003f34:	b118      	cbz	r0, 8003f3e <planner_recalculate+0x156>
      entry_speed_sqr = current->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 8003f36:	46d9      	mov	r9, fp
        next->entry_speed_sqr = entry_speed_sqr; // Always <= max_entry_speed_sqr. Backward pass sets this.
 8003f38:	4625      	mov	r5, r4
 8003f3a:	f8c8 b018 	str.w	fp, [r8, #24]

    // Any block set at its maximum entry speed also creates an optimal plan up to this
    // point in the buffer. When the plan is bracketed by either the beginning of the
    // buffer and a maximum entry speed or two maximum entry speeds, every block in between
    // cannot logically be further improved. Hence, we don't have to recompute them anymore.
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 8003f3e:	ebaa 0304 	sub.w	r3, sl, r4
 8003f42:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8003f46:	69d8      	ldr	r0, [r3, #28]
 8003f48:	4649      	mov	r1, r9
 8003f4a:	f7fc fe37 	bl	8000bbc <__aeabi_fcmpeq>
  block_index++;
 8003f4e:	1c63      	adds	r3, r4, #1
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 8003f50:	2800      	cmp	r0, #0
 8003f52:	bf18      	it	ne
 8003f54:	4625      	movne	r5, r4
  block_index++;
 8003f56:	b2dc      	uxtb	r4, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8003f58:	2c24      	cmp	r4, #36	; 0x24
  while (block_index != block_buffer_head) {
 8003f5a:	9b01      	ldr	r3, [sp, #4]
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8003f5c:	d033      	beq.n	8003fc6 <planner_recalculate+0x1de>
  while (block_index != block_buffer_head) {
 8003f5e:	429c      	cmp	r4, r3
 8003f60:	d134      	bne.n	8003fcc <planner_recalculate+0x1e4>
 8003f62:	9b02      	ldr	r3, [sp, #8]
 8003f64:	701d      	strb	r5, [r3, #0]
    block_index = plan_next_block_index( block_index );
  }
}
 8003f66:	b005      	add	sp, #20
 8003f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (block_index == block_buffer_planned) { return; }
 8003f6c:	4b21      	ldr	r3, [pc, #132]	; (8003ff4 <planner_recalculate+0x20c>)
 8003f6e:	781d      	ldrb	r5, [r3, #0]
 8003f70:	9302      	str	r3, [sp, #8]
 8003f72:	2d23      	cmp	r5, #35	; 0x23
 8003f74:	d0f7      	beq.n	8003f66 <planner_recalculate+0x17e>
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 8003f76:	4e20      	ldr	r6, [pc, #128]	; (8003ff8 <planner_recalculate+0x210>)
 8003f78:	f8d6 17c8 	ldr.w	r1, [r6, #1992]	; 0x7c8
 8003f7c:	f8d6 07cc 	ldr.w	r0, [r6, #1996]	; 0x7cc
 8003f80:	f7fc fc88 	bl	8000894 <__aeabi_fmul>
 8003f84:	4601      	mov	r1, r0
 8003f86:	f7fc fb7d 	bl	8000684 <__addsf3>
 8003f8a:	f8d6 87c4 	ldr.w	r8, [r6, #1988]	; 0x7c4
 8003f8e:	4604      	mov	r4, r0
 8003f90:	4641      	mov	r1, r8
 8003f92:	f7fc fe27 	bl	8000be4 <__aeabi_fcmple>
 8003f96:	b1f0      	cbz	r0, 8003fd6 <planner_recalculate+0x1ee>
 8003f98:	f04f 0b22 	mov.w	fp, #34	; 0x22
 8003f9c:	f8c6 47c0 	str.w	r4, [r6, #1984]	; 0x7c0
  plan_block_t *current = &block_buffer[block_index];
 8003fa0:	4c17      	ldr	r4, [pc, #92]	; (8004000 <planner_recalculate+0x218>)
  if (block_index == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 8003fa2:	455d      	cmp	r5, fp
 8003fa4:	f47f af54 	bne.w	8003e50 <planner_recalculate+0x68>
    if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8003fa8:	4b14      	ldr	r3, [pc, #80]	; (8003ffc <planner_recalculate+0x214>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	42ab      	cmp	r3, r5
 8003fae:	d196      	bne.n	8003ede <planner_recalculate+0xf6>
 8003fb0:	f003 fb1c 	bl	80075ec <st_update_plan_block_parameters>
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 8003fb4:	9b02      	ldr	r3, [sp, #8]
 8003fb6:	781d      	ldrb	r5, [r3, #0]
  while (block_index != block_buffer_head) {
 8003fb8:	4b0d      	ldr	r3, [pc, #52]	; (8003ff0 <planner_recalculate+0x208>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	9301      	str	r3, [sp, #4]
 8003fbe:	e78e      	b.n	8003ede <planner_recalculate+0xf6>
          current->entry_speed_sqr = current->max_entry_speed_sqr;
 8003fc0:	f8ca 7018 	str.w	r7, [sl, #24]
 8003fc4:	e770      	b.n	8003ea8 <planner_recalculate+0xc0>
  while (block_index != block_buffer_head) {
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0cb      	beq.n	8003f62 <planner_recalculate+0x17a>
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8003fca:	2400      	movs	r4, #0
    next = &block_buffer[block_index];
 8003fcc:	46c3      	mov	fp, r8
 8003fce:	e792      	b.n	8003ef6 <planner_recalculate+0x10e>
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 8003fd0:	9903      	ldr	r1, [sp, #12]
 8003fd2:	4689      	mov	r9, r1
 8003fd4:	e731      	b.n	8003e3a <planner_recalculate+0x52>
 8003fd6:	4644      	mov	r4, r8
 8003fd8:	f04f 0b22 	mov.w	fp, #34	; 0x22
 8003fdc:	f8c6 47c0 	str.w	r4, [r6, #1984]	; 0x7c0
  plan_block_t *current = &block_buffer[block_index];
 8003fe0:	4c07      	ldr	r4, [pc, #28]	; (8004000 <planner_recalculate+0x218>)
 8003fe2:	e7de      	b.n	8003fa2 <planner_recalculate+0x1ba>
  block_index--;
 8003fe4:	9b01      	ldr	r3, [sp, #4]
 8003fe6:	1e9a      	subs	r2, r3, #2
 8003fe8:	fa5f fb82 	uxtb.w	fp, r2
 8003fec:	e72d      	b.n	8003e4a <planner_recalculate+0x62>
 8003fee:	bf00      	nop
 8003ff0:	200011ec 	.word	0x200011ec
 8003ff4:	200011ed 	.word	0x200011ed
 8003ff8:	20000a0c 	.word	0x20000a0c
 8003ffc:	200011ee 	.word	0x200011ee
 8004000:	200011b4 	.word	0x200011b4

08004004 <plan_reset>:


void plan_reset()
{
 8004004:	b538      	push	{r3, r4, r5, lr}
  memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 8004006:	2224      	movs	r2, #36	; 0x24
 8004008:	2100      	movs	r1, #0
 800400a:	4807      	ldr	r0, [pc, #28]	; (8004028 <plan_reset+0x24>)
 800400c:	f005 fd86 	bl	8009b1c <memset>
}


void plan_reset_buffer()
{
  block_buffer_tail = 0;
 8004010:	2300      	movs	r3, #0
  block_buffer_head = 0; // Empty = tail
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 8004012:	2101      	movs	r1, #1
  block_buffer_head = 0; // Empty = tail
 8004014:	4805      	ldr	r0, [pc, #20]	; (800402c <plan_reset+0x28>)
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 8004016:	4a06      	ldr	r2, [pc, #24]	; (8004030 <plan_reset+0x2c>)
  block_buffer_tail = 0;
 8004018:	4c06      	ldr	r4, [pc, #24]	; (8004034 <plan_reset+0x30>)
  block_buffer_planned = 0; // = block_buffer_tail;
 800401a:	4d07      	ldr	r5, [pc, #28]	; (8004038 <plan_reset+0x34>)
  block_buffer_head = 0; // Empty = tail
 800401c:	7003      	strb	r3, [r0, #0]
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 800401e:	7011      	strb	r1, [r2, #0]
  block_buffer_planned = 0; // = block_buffer_tail;
 8004020:	702b      	strb	r3, [r5, #0]
  block_buffer_tail = 0;
 8004022:	7023      	strb	r3, [r4, #0]
}
 8004024:	bd38      	pop	{r3, r4, r5, pc}
 8004026:	bf00      	nop
 8004028:	200011f0 	.word	0x200011f0
 800402c:	200011ec 	.word	0x200011ec
 8004030:	200011ef 	.word	0x200011ef
 8004034:	200011ee 	.word	0x200011ee
 8004038:	200011ed 	.word	0x200011ed

0800403c <plan_discard_current_block>:
}


void plan_discard_current_block()
{
  if (block_buffer_head != block_buffer_tail) { // Discard non-empty buffer.
 800403c:	4909      	ldr	r1, [pc, #36]	; (8004064 <plan_discard_current_block+0x28>)
 800403e:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <plan_discard_current_block+0x2c>)
 8004040:	780a      	ldrb	r2, [r1, #0]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	4293      	cmp	r3, r2
 8004046:	d00b      	beq.n	8004060 <plan_discard_current_block+0x24>
  block_index++;
 8004048:	1c53      	adds	r3, r2, #1
 800404a:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 800404c:	2b24      	cmp	r3, #36	; 0x24
 800404e:	bf08      	it	eq
 8004050:	2300      	moveq	r3, #0
    uint8_t block_index = plan_next_block_index( block_buffer_tail );
    // Push block_buffer_planned pointer, if encountered.
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 8004052:	4806      	ldr	r0, [pc, #24]	; (800406c <plan_discard_current_block+0x30>)
    block_buffer_tail = block_index;
 8004054:	700b      	strb	r3, [r1, #0]
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 8004056:	f890 c000 	ldrb.w	ip, [r0]
 800405a:	4594      	cmp	ip, r2
 800405c:	bf08      	it	eq
 800405e:	7003      	strbeq	r3, [r0, #0]
  }
}
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	200011ee 	.word	0x200011ee
 8004068:	200011ec 	.word	0x200011ec
 800406c:	200011ed 	.word	0x200011ed

08004070 <plan_get_system_motion_block>:


// Returns address of planner buffer block used by system motions. Called by segment generator.
plan_block_t *plan_get_system_motion_block()
{
  return(&block_buffer[block_buffer_head]);
 8004070:	4b03      	ldr	r3, [pc, #12]	; (8004080 <plan_get_system_motion_block+0x10>)
 8004072:	4804      	ldr	r0, [pc, #16]	; (8004084 <plan_get_system_motion_block+0x14>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
}
 800407a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800407e:	4770      	bx	lr
 8004080:	200011ec 	.word	0x200011ec
 8004084:	20000a0c 	.word	0x20000a0c

08004088 <plan_get_current_block>:


// Returns address of first planner block, if available. Called by various main program functions.
plan_block_t *plan_get_current_block()
{
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 8004088:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <plan_get_current_block+0x1c>)
 800408a:	4a07      	ldr	r2, [pc, #28]	; (80040a8 <plan_get_current_block+0x20>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	7812      	ldrb	r2, [r2, #0]
 8004090:	429a      	cmp	r2, r3
  return(&block_buffer[block_buffer_tail]);
 8004092:	bf1d      	ittte	ne
 8004094:	4805      	ldrne	r0, [pc, #20]	; (80040ac <plan_get_current_block+0x24>)
 8004096:	ebc3 03c3 	rsbne	r3, r3, r3, lsl #3
 800409a:	eb00 00c3 	addne.w	r0, r0, r3, lsl #3
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 800409e:	2000      	moveq	r0, #0
}
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	200011ee 	.word	0x200011ee
 80040a8:	200011ec 	.word	0x200011ec
 80040ac:	20000a0c 	.word	0x20000a0c

080040b0 <plan_get_exec_block_exit_speed_sqr>:


float plan_get_exec_block_exit_speed_sqr()
{
  uint8_t block_index = plan_next_block_index(block_buffer_tail);
 80040b0:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <plan_get_exec_block_exit_speed_sqr+0x28>)
  if (block_index == block_buffer_head) { return( 0.0 ); }
 80040b2:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <plan_get_exec_block_exit_speed_sqr+0x2c>)
  block_index++;
 80040b4:	781b      	ldrb	r3, [r3, #0]
  if (block_index == block_buffer_head) { return( 0.0 ); }
 80040b6:	7812      	ldrb	r2, [r2, #0]
  block_index++;
 80040b8:	3301      	adds	r3, #1
 80040ba:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80040bc:	2b24      	cmp	r3, #36	; 0x24
 80040be:	bf08      	it	eq
 80040c0:	2300      	moveq	r3, #0
  if (block_index == block_buffer_head) { return( 0.0 ); }
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d006      	beq.n	80040d4 <plan_get_exec_block_exit_speed_sqr+0x24>
  return( block_buffer[block_index].entry_speed_sqr );
 80040c6:	4a06      	ldr	r2, [pc, #24]	; (80040e0 <plan_get_exec_block_exit_speed_sqr+0x30>)
 80040c8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80040cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80040d0:	6998      	ldr	r0, [r3, #24]
 80040d2:	4770      	bx	lr
  if (block_index == block_buffer_head) { return( 0.0 ); }
 80040d4:	2000      	movs	r0, #0
}
 80040d6:	4770      	bx	lr
 80040d8:	200011ee 	.word	0x200011ee
 80040dc:	200011ec 	.word	0x200011ec
 80040e0:	20000a0c 	.word	0x20000a0c

080040e4 <plan_check_full_buffer>:


// Returns the availability status of the block ring buffer. True, if full.
uint8_t plan_check_full_buffer()
{
  if (block_buffer_tail == next_buffer_head) { return(true); }
 80040e4:	4a04      	ldr	r2, [pc, #16]	; (80040f8 <plan_check_full_buffer+0x14>)
 80040e6:	4b05      	ldr	r3, [pc, #20]	; (80040fc <plan_check_full_buffer+0x18>)
 80040e8:	7810      	ldrb	r0, [r2, #0]
 80040ea:	781b      	ldrb	r3, [r3, #0]
  return(false);
}
 80040ec:	1ac0      	subs	r0, r0, r3
 80040ee:	fab0 f080 	clz	r0, r0
 80040f2:	0940      	lsrs	r0, r0, #5
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	200011ee 	.word	0x200011ee
 80040fc:	200011ef 	.word	0x200011ef

08004100 <plan_compute_profile_nominal_speed>:


// Computes and returns block nominal speed based on running condition and override values.
// NOTE: All system motion commands, such as homing/parking, are not subject to overrides.
float plan_compute_profile_nominal_speed(plan_block_t *block)
{
 8004100:	b538      	push	{r3, r4, r5, lr}
  float nominal_speed = block->programmed_rate;
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004102:	7d83      	ldrb	r3, [r0, #22]
  float nominal_speed = block->programmed_rate;
 8004104:	6b05      	ldr	r5, [r0, #48]	; 0x30
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004106:	07da      	lsls	r2, r3, #31
 8004108:	d514      	bpl.n	8004134 <plan_compute_profile_nominal_speed+0x34>
 800410a:	4b16      	ldr	r3, [pc, #88]	; (8004164 <plan_compute_profile_nominal_speed+0x64>)
 800410c:	7a58      	ldrb	r0, [r3, #9]
 800410e:	f7fc fb6d 	bl	80007ec <__aeabi_i2f>
 8004112:	4915      	ldr	r1, [pc, #84]	; (8004168 <plan_compute_profile_nominal_speed+0x68>)
 8004114:	f7fc fbbe 	bl	8000894 <__aeabi_fmul>
 8004118:	4629      	mov	r1, r5
 800411a:	f7fc fbbb 	bl	8000894 <__aeabi_fmul>
 800411e:	4604      	mov	r4, r0
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
  }
  if (nominal_speed > MINIMUM_FEED_RATE) { return(nominal_speed); }
  return(MINIMUM_FEED_RATE);
}
 8004120:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004124:	4620      	mov	r0, r4
 8004126:	f7fc fd67 	bl	8000bf8 <__aeabi_fcmpge>
 800412a:	b908      	cbnz	r0, 8004130 <plan_compute_profile_nominal_speed+0x30>
 800412c:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 8004130:	4620      	mov	r0, r4
 8004132:	bd38      	pop	{r3, r4, r5, pc}
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8004134:	075b      	lsls	r3, r3, #29
 8004136:	4604      	mov	r4, r0
 8004138:	d40b      	bmi.n	8004152 <plan_compute_profile_nominal_speed+0x52>
 800413a:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <plan_compute_profile_nominal_speed+0x64>)
 800413c:	7a18      	ldrb	r0, [r3, #8]
 800413e:	f7fc fb55 	bl	80007ec <__aeabi_i2f>
 8004142:	4909      	ldr	r1, [pc, #36]	; (8004168 <plan_compute_profile_nominal_speed+0x68>)
 8004144:	f7fc fba6 	bl	8000894 <__aeabi_fmul>
 8004148:	4601      	mov	r1, r0
 800414a:	4628      	mov	r0, r5
 800414c:	f7fc fba2 	bl	8000894 <__aeabi_fmul>
 8004150:	4605      	mov	r5, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 8004152:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8004154:	4629      	mov	r1, r5
 8004156:	4620      	mov	r0, r4
 8004158:	f7fc fd44 	bl	8000be4 <__aeabi_fcmple>
 800415c:	2800      	cmp	r0, #0
 800415e:	d1df      	bne.n	8004120 <plan_compute_profile_nominal_speed+0x20>
 8004160:	462c      	mov	r4, r5
 8004162:	e7dd      	b.n	8004120 <plan_compute_profile_nominal_speed+0x20>
 8004164:	200009d0 	.word	0x200009d0
 8004168:	3c23d70a 	.word	0x3c23d70a

0800416c <plan_update_velocity_profile_parameters>:
}


// Re-calculates buffered motions profile parameters upon a motion-based override change.
void plan_update_velocity_profile_parameters()
{
 800416c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t block_index = block_buffer_tail;
 8004170:	4a39      	ldr	r2, [pc, #228]	; (8004258 <plan_update_velocity_profile_parameters+0xec>)
  plan_block_t *block;
  float nominal_speed;
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
  while (block_index != block_buffer_head) {
 8004172:	4b3a      	ldr	r3, [pc, #232]	; (800425c <plan_update_velocity_profile_parameters+0xf0>)
  uint8_t block_index = block_buffer_tail;
 8004174:	7814      	ldrb	r4, [r2, #0]
  while (block_index != block_buffer_head) {
 8004176:	f893 a000 	ldrb.w	sl, [r3]
{
 800417a:	b083      	sub	sp, #12
  while (block_index != block_buffer_head) {
 800417c:	4554      	cmp	r4, sl
 800417e:	d064      	beq.n	800424a <plan_update_velocity_profile_parameters+0xde>
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8004180:	4d37      	ldr	r5, [pc, #220]	; (8004260 <plan_update_velocity_profile_parameters+0xf4>)
 8004182:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
 8004186:	7a28      	ldrb	r0, [r5, #8]
 8004188:	f7fc fb30 	bl	80007ec <__aeabi_i2f>
 800418c:	4935      	ldr	r1, [pc, #212]	; (8004264 <plan_update_velocity_profile_parameters+0xf8>)
 800418e:	f7fc fb81 	bl	8000894 <__aeabi_fmul>
 8004192:	4603      	mov	r3, r0
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004194:	7a68      	ldrb	r0, [r5, #9]
 8004196:	9301      	str	r3, [sp, #4]
 8004198:	f7fc fb28 	bl	80007ec <__aeabi_i2f>
 800419c:	4931      	ldr	r1, [pc, #196]	; (8004264 <plan_update_velocity_profile_parameters+0xf8>)
 800419e:	f7fc fb79 	bl	8000894 <__aeabi_fmul>
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 80041a2:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8004268 <plan_update_velocity_profile_parameters+0xfc>
 80041a6:	4683      	mov	fp, r0
 80041a8:	4f30      	ldr	r7, [pc, #192]	; (800426c <plan_update_velocity_profile_parameters+0x100>)
 80041aa:	e026      	b.n	80041fa <plan_update_velocity_profile_parameters+0x8e>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80041ac:	4658      	mov	r0, fp
 80041ae:	f7fc fb71 	bl	8000894 <__aeabi_fmul>
 80041b2:	4605      	mov	r5, r0
  if (nominal_speed > MINIMUM_FEED_RATE) { return(nominal_speed); }
 80041b4:	4649      	mov	r1, r9
 80041b6:	4628      	mov	r0, r5
 80041b8:	f7fc fd1e 	bl	8000bf8 <__aeabi_fcmpge>
 80041bc:	b900      	cbnz	r0, 80041c0 <plan_update_velocity_profile_parameters+0x54>
 80041be:	464d      	mov	r5, r9
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 80041c0:	4629      	mov	r1, r5
 80041c2:	4640      	mov	r0, r8
 80041c4:	f7fc fd04 	bl	8000bd0 <__aeabi_fcmplt>
 80041c8:	2800      	cmp	r0, #0
 80041ca:	d034      	beq.n	8004236 <plan_update_velocity_profile_parameters+0xca>
 80041cc:	4641      	mov	r1, r8
 80041ce:	4640      	mov	r0, r8
 80041d0:	f7fc fb60 	bl	8000894 <__aeabi_fmul>
 80041d4:	1b36      	subs	r6, r6, r4
 80041d6:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 80041da:	f8d6 8028 	ldr.w	r8, [r6, #40]	; 0x28
 80041de:	61f0      	str	r0, [r6, #28]
 80041e0:	4641      	mov	r1, r8
 80041e2:	f7fc fd13 	bl	8000c0c <__aeabi_fcmpgt>
 80041e6:	b108      	cbz	r0, 80041ec <plan_update_velocity_profile_parameters+0x80>
 80041e8:	f8c6 801c 	str.w	r8, [r6, #28]
  block_index++;
 80041ec:	3401      	adds	r4, #1
 80041ee:	b2e4      	uxtb	r4, r4
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80041f0:	2c24      	cmp	r4, #36	; 0x24
 80041f2:	d025      	beq.n	8004240 <plan_update_velocity_profile_parameters+0xd4>
  while (block_index != block_buffer_head) {
 80041f4:	45a2      	cmp	sl, r4
 80041f6:	d029      	beq.n	800424c <plan_update_velocity_profile_parameters+0xe0>
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 80041f8:	46a8      	mov	r8, r5
  float nominal_speed = block->programmed_rate;
 80041fa:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 80041fe:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004202:	7d9a      	ldrb	r2, [r3, #22]
  float nominal_speed = block->programmed_rate;
 8004204:	6b19      	ldr	r1, [r3, #48]	; 0x30
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004206:	07d0      	lsls	r0, r2, #31
  float nominal_speed = block->programmed_rate;
 8004208:	ea4f 06c4 	mov.w	r6, r4, lsl #3
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 800420c:	d4ce      	bmi.n	80041ac <plan_update_velocity_profile_parameters+0x40>
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 800420e:	0753      	lsls	r3, r2, #29
 8004210:	d404      	bmi.n	800421c <plan_update_velocity_profile_parameters+0xb0>
 8004212:	4608      	mov	r0, r1
 8004214:	9901      	ldr	r1, [sp, #4]
 8004216:	f7fc fb3d 	bl	8000894 <__aeabi_fmul>
 800421a:	4601      	mov	r1, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 800421c:	1b33      	subs	r3, r6, r4
 800421e:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 8004222:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8004224:	9100      	str	r1, [sp, #0]
 8004226:	4628      	mov	r0, r5
 8004228:	f7fc fcdc 	bl	8000be4 <__aeabi_fcmple>
 800422c:	2800      	cmp	r0, #0
 800422e:	d1c1      	bne.n	80041b4 <plan_update_velocity_profile_parameters+0x48>
 8004230:	9900      	ldr	r1, [sp, #0]
 8004232:	460d      	mov	r5, r1
 8004234:	e7be      	b.n	80041b4 <plan_update_velocity_profile_parameters+0x48>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8004236:	4629      	mov	r1, r5
 8004238:	4628      	mov	r0, r5
 800423a:	f7fc fb2b 	bl	8000894 <__aeabi_fmul>
 800423e:	e7c9      	b.n	80041d4 <plan_update_velocity_profile_parameters+0x68>
  while (block_index != block_buffer_head) {
 8004240:	f1ba 0f00 	cmp.w	sl, #0
 8004244:	d002      	beq.n	800424c <plan_update_velocity_profile_parameters+0xe0>
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004246:	2400      	movs	r4, #0
 8004248:	e7d6      	b.n	80041f8 <plan_update_velocity_profile_parameters+0x8c>
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 800424a:	4d07      	ldr	r5, [pc, #28]	; (8004268 <plan_update_velocity_profile_parameters+0xfc>)
    nominal_speed = plan_compute_profile_nominal_speed(block);
    plan_compute_profile_parameters(block, nominal_speed, prev_nominal_speed);
    prev_nominal_speed = nominal_speed;
    block_index = plan_next_block_index(block_index);
  }
  pl.previous_nominal_speed = prev_nominal_speed; // Update prev nominal speed for next incoming block.
 800424c:	4b08      	ldr	r3, [pc, #32]	; (8004270 <plan_update_velocity_profile_parameters+0x104>)
 800424e:	621d      	str	r5, [r3, #32]
}
 8004250:	b003      	add	sp, #12
 8004252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004256:	bf00      	nop
 8004258:	200011ee 	.word	0x200011ee
 800425c:	200011ec 	.word	0x200011ec
 8004260:	200009d0 	.word	0x200009d0
 8004264:	3c23d70a 	.word	0x3c23d70a
 8004268:	7f7fffff 	.word	0x7f7fffff
 800426c:	20000a0c 	.word	0x20000a0c
 8004270:	200011f0 	.word	0x200011f0

08004274 <plan_buffer_line>:
   The system motion condition tells the planner to plan a motion in the always unused block buffer
   head. It avoids changing the planner state and preserves the buffer to ensure subsequent gcode
   motions are still planned correctly, while the stepper module only points to the block buffer head
   to execute the special system motion. */
uint8_t plan_buffer_line(float *target, plan_line_data_t *pl_data)
{
 8004274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004278:	468a      	mov	sl, r1
 800427a:	4683      	mov	fp, r0
  // Prepare and initialize new block. Copy relevant pl_data for block execution.
  plan_block_t *block = &block_buffer[block_buffer_head];
 800427c:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004554 <plan_buffer_line+0x2e0>
 8004280:	4db5      	ldr	r5, [pc, #724]	; (8004558 <plan_buffer_line+0x2e4>)
 8004282:	f899 4000 	ldrb.w	r4, [r9]
{
 8004286:	b095      	sub	sp, #84	; 0x54
  plan_block_t *block = &block_buffer[block_buffer_head];
 8004288:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
 800428c:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
  memset(block,0,sizeof(plan_block_t)); // Zero all block values.
 8004290:	2238      	movs	r2, #56	; 0x38
 8004292:	2100      	movs	r1, #0
 8004294:	4638      	mov	r0, r7
 8004296:	f005 fc41 	bl	8009b1c <memset>
  block->condition = pl_data->condition;
 800429a:	f89a 3008 	ldrb.w	r3, [sl, #8]
  #ifdef VARIABLE_SPINDLE
    block->spindle_speed = pl_data->spindle_speed;
 800429e:	f8da 2004 	ldr.w	r2, [sl, #4]
  int32_t target_steps[N_AXIS], position_steps[N_AXIS];
  float unit_vec[N_AXIS], delta_mm;
  uint8_t idx;

  // Copy position data based on type of motion being planned.
  if (block->condition & PL_COND_FLAG_SYSTEM_MOTION) {
 80042a2:	0798      	lsls	r0, r3, #30
  block->condition = pl_data->condition;
 80042a4:	75bb      	strb	r3, [r7, #22]
    block->spindle_speed = pl_data->spindle_speed;
 80042a6:	f8d7 8010 	ldr.w	r8, [r7, #16]
#ifdef COREXY
    position_steps[X_AXIS] = system_convert_corexy_to_x_axis_steps(sys_position);
    position_steps[Y_AXIS] = system_convert_corexy_to_y_axis_steps(sys_position);
    position_steps[Z_AXIS] = sys_position[Z_AXIS];
#else
    memcpy(position_steps, sys_position, sizeof(sys_position));
 80042aa:	bf4c      	ite	mi
 80042ac:	4bab      	ldrmi	r3, [pc, #684]	; (800455c <plan_buffer_line+0x2e8>)
#endif
  }
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 80042ae:	4bac      	ldrpl	r3, [pc, #688]	; (8004560 <plan_buffer_line+0x2ec>)
    block->spindle_speed = pl_data->spindle_speed;
 80042b0:	637a      	str	r2, [r7, #52]	; 0x34
        delta_mm = (target_steps[X_AXIS]-position_steps[X_AXIS] - target_steps[Y_AXIS]+position_steps[Y_AXIS])/settings.steps_per_mm[idx];
      } else {
        delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
      }
    #else
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80042b2:	4fac      	ldr	r7, [pc, #688]	; (8004564 <plan_buffer_line+0x2f0>)
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 80042b4:	f10d 0c20 	add.w	ip, sp, #32
 80042b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042ba:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	f8db 1000 	ldr.w	r1, [fp]
 80042c4:	4618      	mov	r0, r3
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	f7fc fae4 	bl	8000894 <__aeabi_fmul>
 80042cc:	f005 fd50 	bl	8009d70 <lroundf>
 80042d0:	4601      	mov	r1, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80042d2:	9b08      	ldr	r3, [sp, #32]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80042d4:	9104      	str	r1, [sp, #16]
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80042d6:	1ac0      	subs	r0, r0, r3
 80042d8:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 80042dc:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80042e0:	4588      	cmp	r8, r1
 80042e2:	bf38      	it	cc
 80042e4:	4688      	movcc	r8, r1
  plan_block_t *block = &block_buffer[block_buffer_head];
 80042e6:	00e6      	lsls	r6, r4, #3
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80042e8:	eba6 0c04 	sub.w	ip, r6, r4
 80042ec:	eb05 02cc 	add.w	r2, r5, ip, lsl #3
 80042f0:	f845 103c 	str.w	r1, [r5, ip, lsl #3]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80042f4:	f8c2 8010 	str.w	r8, [r2, #16]
 80042f8:	9201      	str	r2, [sp, #4]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 80042fa:	f7fc fa77 	bl	80007ec <__aeabi_i2f>
 80042fe:	9b00      	ldr	r3, [sp, #0]
 8004300:	4619      	mov	r1, r3
 8004302:	f7fc fb7b 	bl	80009fc <__aeabi_fdiv>
	  #endif
    unit_vec[idx] = delta_mm; // Store unit vector numerator

    // Set direction bits. Bit enabled always means direction is negative.
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004306:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 8004308:	900c      	str	r0, [sp, #48]	; 0x30
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 800430a:	f7fc fc61 	bl	8000bd0 <__aeabi_fcmplt>
 800430e:	b128      	cbz	r0, 800431c <plan_buffer_line+0xa8>
 8004310:	9a01      	ldr	r2, [sp, #4]
 8004312:	4b95      	ldr	r3, [pc, #596]	; (8004568 <plan_buffer_line+0x2f4>)
 8004314:	8a91      	ldrh	r1, [r2, #20]
 8004316:	881b      	ldrh	r3, [r3, #0]
 8004318:	430b      	orrs	r3, r1
 800431a:	8293      	strh	r3, [r2, #20]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	f8db 1004 	ldr.w	r1, [fp, #4]
 8004322:	4610      	mov	r0, r2
 8004324:	9200      	str	r2, [sp, #0]
 8004326:	f7fc fab5 	bl	8000894 <__aeabi_fmul>
 800432a:	f005 fd21 	bl	8009d70 <lroundf>
 800432e:	4601      	mov	r1, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004330:	9a09      	ldr	r2, [sp, #36]	; 0x24
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004332:	9105      	str	r1, [sp, #20]
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004334:	1a80      	subs	r0, r0, r2
 8004336:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 800433a:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 800433e:	4588      	cmp	r8, r1
 8004340:	bf38      	it	cc
 8004342:	4688      	movcc	r8, r1
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004344:	1b33      	subs	r3, r6, r4
 8004346:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800434a:	6059      	str	r1, [r3, #4]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 800434c:	f8c3 8010 	str.w	r8, [r3, #16]
 8004350:	9301      	str	r3, [sp, #4]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 8004352:	f7fc fa4b 	bl	80007ec <__aeabi_i2f>
 8004356:	9a00      	ldr	r2, [sp, #0]
 8004358:	4611      	mov	r1, r2
 800435a:	f7fc fb4f 	bl	80009fc <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 800435e:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 8004360:	900d      	str	r0, [sp, #52]	; 0x34
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004362:	f7fc fc35 	bl	8000bd0 <__aeabi_fcmplt>
 8004366:	b128      	cbz	r0, 8004374 <plan_buffer_line+0x100>
 8004368:	4a7f      	ldr	r2, [pc, #508]	; (8004568 <plan_buffer_line+0x2f4>)
 800436a:	9b01      	ldr	r3, [sp, #4]
 800436c:	8851      	ldrh	r1, [r2, #2]
 800436e:	8a9a      	ldrh	r2, [r3, #20]
 8004370:	430a      	orrs	r2, r1
 8004372:	829a      	strh	r2, [r3, #20]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	f8db 1008 	ldr.w	r1, [fp, #8]
 800437a:	4610      	mov	r0, r2
 800437c:	9200      	str	r2, [sp, #0]
 800437e:	f7fc fa89 	bl	8000894 <__aeabi_fmul>
 8004382:	f005 fcf5 	bl	8009d70 <lroundf>
 8004386:	4601      	mov	r1, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 800438a:	9106      	str	r1, [sp, #24]
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 800438c:	1a80      	subs	r0, r0, r2
 800438e:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 8004392:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004396:	4588      	cmp	r8, r1
 8004398:	bf38      	it	cc
 800439a:	4688      	movcc	r8, r1
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 800439c:	1b33      	subs	r3, r6, r4
 800439e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80043a2:	6099      	str	r1, [r3, #8]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80043a4:	f8c3 8010 	str.w	r8, [r3, #16]
 80043a8:	9301      	str	r3, [sp, #4]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 80043aa:	f7fc fa1f 	bl	80007ec <__aeabi_i2f>
 80043ae:	9a00      	ldr	r2, [sp, #0]
 80043b0:	4611      	mov	r1, r2
 80043b2:	f7fc fb23 	bl	80009fc <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80043b6:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 80043b8:	900e      	str	r0, [sp, #56]	; 0x38
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80043ba:	f7fc fc09 	bl	8000bd0 <__aeabi_fcmplt>
 80043be:	b128      	cbz	r0, 80043cc <plan_buffer_line+0x158>
 80043c0:	4a69      	ldr	r2, [pc, #420]	; (8004568 <plan_buffer_line+0x2f4>)
 80043c2:	9b01      	ldr	r3, [sp, #4]
 80043c4:	8891      	ldrh	r1, [r2, #4]
 80043c6:	8a9a      	ldrh	r2, [r3, #20]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	829a      	strh	r2, [r3, #20]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f8db 100c 	ldr.w	r1, [fp, #12]
 80043d2:	4618      	mov	r0, r3
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	f7fc fa5d 	bl	8000894 <__aeabi_fmul>
 80043da:	f005 fcc9 	bl	8009d70 <lroundf>
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80043de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80043e0:	4601      	mov	r1, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80043e2:	1a80      	subs	r0, r0, r2
 80043e4:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
 80043e8:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80043ec:	4590      	cmp	r8, r2
 80043ee:	bf38      	it	cc
 80043f0:	4690      	movcc	r8, r2
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80043f2:	eba6 0b04 	sub.w	fp, r6, r4
 80043f6:	eb05 0bcb 	add.w	fp, r5, fp, lsl #3
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80043fa:	e9cb 2803 	strd	r2, r8, [fp, #12]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80043fe:	9107      	str	r1, [sp, #28]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 8004400:	f7fc f9f4 	bl	80007ec <__aeabi_i2f>
 8004404:	9b00      	ldr	r3, [sp, #0]
 8004406:	4619      	mov	r1, r3
 8004408:	f7fc faf8 	bl	80009fc <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 800440c:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 800440e:	900f      	str	r0, [sp, #60]	; 0x3c
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004410:	f7fc fbde 	bl	8000bd0 <__aeabi_fcmplt>
 8004414:	b930      	cbnz	r0, 8004424 <plan_buffer_line+0x1b0>
  }

  // Bail if this is a zero-length block. Highly unlikely to occur.
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 8004416:	f1b8 0f00 	cmp.w	r8, #0
 800441a:	d10d      	bne.n	8004438 <plan_buffer_line+0x1c4>
 800441c:	4640      	mov	r0, r8

    // Finish up by recalculating the plan with the new block.
    planner_recalculate();
  }
  return(PLAN_OK);
}
 800441e:	b015      	add	sp, #84	; 0x54
 8004420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004424:	4b50      	ldr	r3, [pc, #320]	; (8004568 <plan_buffer_line+0x2f4>)
 8004426:	f8bb 2014 	ldrh.w	r2, [fp, #20]
 800442a:	88db      	ldrh	r3, [r3, #6]
 800442c:	4313      	orrs	r3, r2
 800442e:	f8ab 3014 	strh.w	r3, [fp, #20]
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 8004432:	f1b8 0f00 	cmp.w	r8, #0
 8004436:	d0f1      	beq.n	800441c <plan_buffer_line+0x1a8>
  block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 8004438:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800443c:	4640      	mov	r0, r8
 800443e:	f7ff fc15 	bl	8003c6c <convert_delta_vector_to_unit_vector>
 8004442:	eba6 0b04 	sub.w	fp, r6, r4
 8004446:	eb05 0bcb 	add.w	fp, r5, fp, lsl #3
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 800444a:	4641      	mov	r1, r8
  block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 800444c:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 8004450:	4846      	ldr	r0, [pc, #280]	; (800456c <plan_buffer_line+0x2f8>)
 8004452:	f7ff fc6f 	bl	8003d34 <limit_value_by_axis_maximum>
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8004456:	4641      	mov	r1, r8
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 8004458:	f8cb 0020 	str.w	r0, [fp, #32]
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 800445c:	4844      	ldr	r0, [pc, #272]	; (8004570 <plan_buffer_line+0x2fc>)
 800445e:	f7ff fc69 	bl	8003d34 <limit_value_by_axis_maximum>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 8004462:	f89b 3016 	ldrb.w	r3, [fp, #22]
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8004466:	f8cb 002c 	str.w	r0, [fp, #44]	; 0x2c
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 800446a:	07d9      	lsls	r1, r3, #31
 800446c:	f140 808c 	bpl.w	8004588 <plan_buffer_line+0x314>
 8004470:	f8cb 0030 	str.w	r0, [fp, #48]	; 0x30
  if ((block_buffer_head == block_buffer_tail) || (block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 8004474:	4a3f      	ldr	r2, [pc, #252]	; (8004574 <plan_buffer_line+0x300>)
 8004476:	f899 1000 	ldrb.w	r1, [r9]
 800447a:	7812      	ldrb	r2, [r2, #0]
 800447c:	4291      	cmp	r1, r2
 800447e:	d002      	beq.n	8004486 <plan_buffer_line+0x212>
 8004480:	079b      	lsls	r3, r3, #30
 8004482:	f140 8095 	bpl.w	80045b0 <plan_buffer_line+0x33c>
    block->entry_speed_sqr = 0.0f;
 8004486:	2200      	movs	r2, #0
 8004488:	1b33      	subs	r3, r6, r4
 800448a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800448e:	619a      	str	r2, [r3, #24]
    block->max_junction_speed_sqr = 0.0f; // Starting from rest. Enforce start from zero velocity.
 8004490:	629a      	str	r2, [r3, #40]	; 0x28
  if (!(block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 8004492:	1b33      	subs	r3, r6, r4
 8004494:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004498:	7d9a      	ldrb	r2, [r3, #22]
 800449a:	0790      	lsls	r0, r2, #30
 800449c:	f100 8084 	bmi.w	80045a8 <plan_buffer_line+0x334>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80044a0:	07d1      	lsls	r1, r2, #31
  float nominal_speed = block->programmed_rate;
 80044a2:	f8d3 a030 	ldr.w	sl, [r3, #48]	; 0x30
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80044a6:	f100 80e8 	bmi.w	800467a <plan_buffer_line+0x406>
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 80044aa:	0753      	lsls	r3, r2, #29
 80044ac:	d40a      	bmi.n	80044c4 <plan_buffer_line+0x250>
 80044ae:	4b32      	ldr	r3, [pc, #200]	; (8004578 <plan_buffer_line+0x304>)
 80044b0:	7a18      	ldrb	r0, [r3, #8]
 80044b2:	f7fc f99b 	bl	80007ec <__aeabi_i2f>
 80044b6:	4651      	mov	r1, sl
 80044b8:	f7fc f9ec 	bl	8000894 <__aeabi_fmul>
 80044bc:	492f      	ldr	r1, [pc, #188]	; (800457c <plan_buffer_line+0x308>)
 80044be:	f7fc f9e9 	bl	8000894 <__aeabi_fmul>
 80044c2:	4682      	mov	sl, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 80044c4:	1b33      	subs	r3, r6, r4
 80044c6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80044ca:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 80044cc:	4651      	mov	r1, sl
 80044ce:	4638      	mov	r0, r7
 80044d0:	f7fc fb88 	bl	8000be4 <__aeabi_fcmple>
 80044d4:	b900      	cbnz	r0, 80044d8 <plan_buffer_line+0x264>
 80044d6:	4657      	mov	r7, sl
  if (nominal_speed > MINIMUM_FEED_RATE) { return(nominal_speed); }
 80044d8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80044dc:	4638      	mov	r0, r7
 80044de:	f7fc fb8b 	bl	8000bf8 <__aeabi_fcmpge>
 80044e2:	b908      	cbnz	r0, 80044e8 <plan_buffer_line+0x274>
 80044e4:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 80044e8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8004560 <plan_buffer_line+0x2ec>
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 80044ec:	4639      	mov	r1, r7
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 80044ee:	f8da b020 	ldr.w	fp, [sl, #32]
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 80044f2:	4658      	mov	r0, fp
 80044f4:	f7fc fb6c 	bl	8000bd0 <__aeabi_fcmplt>
 80044f8:	2800      	cmp	r0, #0
 80044fa:	f000 80ca 	beq.w	8004692 <plan_buffer_line+0x41e>
 80044fe:	4659      	mov	r1, fp
 8004500:	4658      	mov	r0, fp
 8004502:	f7fc f9c7 	bl	8000894 <__aeabi_fmul>
 8004506:	4601      	mov	r1, r0
 8004508:	1b34      	subs	r4, r6, r4
 800450a:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 800450e:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8004510:	61e9      	str	r1, [r5, #28]
 8004512:	4620      	mov	r0, r4
 8004514:	f7fc fb5c 	bl	8000bd0 <__aeabi_fcmplt>
 8004518:	b100      	cbz	r0, 800451c <plan_buffer_line+0x2a8>
 800451a:	61ec      	str	r4, [r5, #28]
    block_buffer_head = next_buffer_head;
 800451c:	4a18      	ldr	r2, [pc, #96]	; (8004580 <plan_buffer_line+0x30c>)
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 800451e:	4d19      	ldr	r5, [pc, #100]	; (8004584 <plan_buffer_line+0x310>)
    block_buffer_head = next_buffer_head;
 8004520:	7813      	ldrb	r3, [r2, #0]
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8004522:	ac04      	add	r4, sp, #16
    block_buffer_head = next_buffer_head;
 8004524:	f889 3000 	strb.w	r3, [r9]
  block_index++;
 8004528:	3301      	adds	r3, #1
 800452a:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 800452c:	2b24      	cmp	r3, #36	; 0x24
 800452e:	bf08      	it	eq
 8004530:	2300      	moveq	r3, #0
    pl.previous_nominal_speed = nominal_speed;
 8004532:	f8ca 7020 	str.w	r7, [sl, #32]
    next_buffer_head = plan_next_block_index(block_buffer_head);
 8004536:	7013      	strb	r3, [r2, #0]
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8004538:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800453c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8004540:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004544:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
    planner_recalculate();
 8004548:	f7ff fc4e 	bl	8003de8 <planner_recalculate>
  return(PLAN_OK);
 800454c:	2001      	movs	r0, #1
}
 800454e:	b015      	add	sp, #84	; 0x54
 8004550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004554:	200011ec 	.word	0x200011ec
 8004558:	20000a0c 	.word	0x20000a0c
 800455c:	200009e4 	.word	0x200009e4
 8004560:	200011f0 	.word	0x200011f0
 8004564:	200013ec 	.word	0x200013ec
 8004568:	0800af88 	.word	0x0800af88
 800456c:	2000140c 	.word	0x2000140c
 8004570:	200013fc 	.word	0x200013fc
 8004574:	200011ee 	.word	0x200011ee
 8004578:	200009d0 	.word	0x200009d0
 800457c:	3c23d70a 	.word	0x3c23d70a
 8004580:	200011ef 	.word	0x200011ef
 8004584:	20001200 	.word	0x20001200
    block->programmed_rate = pl_data->feed_rate;
 8004588:	f8da 1000 	ldr.w	r1, [sl]
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 800458c:	071a      	lsls	r2, r3, #28
    block->programmed_rate = pl_data->feed_rate;
 800458e:	f8cb 1030 	str.w	r1, [fp, #48]	; 0x30
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 8004592:	f57f af6f 	bpl.w	8004474 <plan_buffer_line+0x200>
 8004596:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	f7fc f97a 	bl	8000894 <__aeabi_fmul>
 80045a0:	9b00      	ldr	r3, [sp, #0]
 80045a2:	f8cb 0030 	str.w	r0, [fp, #48]	; 0x30
 80045a6:	e765      	b.n	8004474 <plan_buffer_line+0x200>
  return(PLAN_OK);
 80045a8:	2001      	movs	r0, #1
}
 80045aa:	b015      	add	sp, #84	; 0x54
 80045ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80045b0:	f8df a180 	ldr.w	sl, [pc, #384]	; 8004734 <plan_buffer_line+0x4c0>
 80045b4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80045b8:	f8da 3010 	ldr.w	r3, [sl, #16]
 80045bc:	4659      	mov	r1, fp
 80045be:	4618      	mov	r0, r3
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	f7fc f967 	bl	8000894 <__aeabi_fmul>
 80045c6:	4602      	mov	r2, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80045c8:	9b00      	ldr	r3, [sp, #0]
 80045ca:	4658      	mov	r0, fp
 80045cc:	4619      	mov	r1, r3
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80045ce:	9200      	str	r2, [sp, #0]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80045d0:	f7fc f856 	bl	8000680 <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80045d4:	f8da 3014 	ldr.w	r3, [sl, #20]
 80045d8:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80045dc:	4619      	mov	r1, r3
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80045de:	9010      	str	r0, [sp, #64]	; 0x40
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80045e0:	4658      	mov	r0, fp
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	f7fc f956 	bl	8000894 <__aeabi_fmul>
 80045e8:	4602      	mov	r2, r0
 80045ea:	9b00      	ldr	r3, [sp, #0]
 80045ec:	4611      	mov	r1, r2
 80045ee:	f103 4000 	add.w	r0, r3, #2147483648	; 0x80000000
 80045f2:	9203      	str	r2, [sp, #12]
 80045f4:	f7fc f844 	bl	8000680 <__aeabi_fsub>
 80045f8:	4602      	mov	r2, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80045fa:	9b01      	ldr	r3, [sp, #4]
 80045fc:	4658      	mov	r0, fp
 80045fe:	4619      	mov	r1, r3
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004600:	9202      	str	r2, [sp, #8]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004602:	f7fc f83d 	bl	8000680 <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004606:	f8da 3018 	ldr.w	r3, [sl, #24]
 800460a:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 800460e:	4619      	mov	r1, r3
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004610:	9011      	str	r0, [sp, #68]	; 0x44
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004612:	4658      	mov	r0, fp
 8004614:	9301      	str	r3, [sp, #4]
 8004616:	f7fc f93d 	bl	8000894 <__aeabi_fmul>
 800461a:	4601      	mov	r1, r0
 800461c:	9a02      	ldr	r2, [sp, #8]
 800461e:	9102      	str	r1, [sp, #8]
 8004620:	4610      	mov	r0, r2
 8004622:	f7fc f82d 	bl	8000680 <__aeabi_fsub>
 8004626:	4602      	mov	r2, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004628:	9b01      	ldr	r3, [sp, #4]
 800462a:	4658      	mov	r0, fp
 800462c:	4619      	mov	r1, r3
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 800462e:	4693      	mov	fp, r2
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004630:	f7fc f826 	bl	8000680 <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004634:	f8da 301c 	ldr.w	r3, [sl, #28]
 8004638:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 800463c:	9012      	str	r0, [sp, #72]	; 0x48
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 800463e:	4651      	mov	r1, sl
 8004640:	4618      	mov	r0, r3
 8004642:	9301      	str	r3, [sp, #4]
 8004644:	f7fc f926 	bl	8000894 <__aeabi_fmul>
 8004648:	4602      	mov	r2, r0
 800464a:	4658      	mov	r0, fp
 800464c:	4611      	mov	r1, r2
 800464e:	4693      	mov	fp, r2
 8004650:	f7fc f816 	bl	8000680 <__aeabi_fsub>
 8004654:	4602      	mov	r2, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004656:	9b01      	ldr	r3, [sp, #4]
 8004658:	4650      	mov	r0, sl
 800465a:	4619      	mov	r1, r3
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 800465c:	4692      	mov	sl, r2
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 800465e:	f7fc f80f 	bl	8000680 <__aeabi_fsub>
    if (junction_cos_theta > 0.999999f) {
 8004662:	4935      	ldr	r1, [pc, #212]	; (8004738 <plan_buffer_line+0x4c4>)
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004664:	9013      	str	r0, [sp, #76]	; 0x4c
    if (junction_cos_theta > 0.999999f) {
 8004666:	4650      	mov	r0, sl
 8004668:	f7fc fad0 	bl	8000c0c <__aeabi_fcmpgt>
 800466c:	b1b8      	cbz	r0, 800469e <plan_buffer_line+0x42a>
      block->max_junction_speed_sqr = MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED;
 800466e:	2200      	movs	r2, #0
 8004670:	1b33      	subs	r3, r6, r4
 8004672:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004676:	629a      	str	r2, [r3, #40]	; 0x28
 8004678:	e70b      	b.n	8004492 <plan_buffer_line+0x21e>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 800467a:	4b30      	ldr	r3, [pc, #192]	; (800473c <plan_buffer_line+0x4c8>)
 800467c:	7a58      	ldrb	r0, [r3, #9]
 800467e:	f7fc f8b5 	bl	80007ec <__aeabi_i2f>
 8004682:	4651      	mov	r1, sl
 8004684:	f7fc f906 	bl	8000894 <__aeabi_fmul>
 8004688:	492d      	ldr	r1, [pc, #180]	; (8004740 <plan_buffer_line+0x4cc>)
 800468a:	f7fc f903 	bl	8000894 <__aeabi_fmul>
 800468e:	4607      	mov	r7, r0
 8004690:	e722      	b.n	80044d8 <plan_buffer_line+0x264>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8004692:	4639      	mov	r1, r7
 8004694:	4638      	mov	r0, r7
 8004696:	f7fc f8fd 	bl	8000894 <__aeabi_fmul>
 800469a:	4601      	mov	r1, r0
 800469c:	e734      	b.n	8004508 <plan_buffer_line+0x294>
      if (junction_cos_theta < -0.999999f) {
 800469e:	4650      	mov	r0, sl
 80046a0:	4928      	ldr	r1, [pc, #160]	; (8004744 <plan_buffer_line+0x4d0>)
 80046a2:	f7fc fa95 	bl	8000bd0 <__aeabi_fcmplt>
 80046a6:	b128      	cbz	r0, 80046b4 <plan_buffer_line+0x440>
        block->max_junction_speed_sqr = SOME_LARGE_VALUE;
 80046a8:	4a27      	ldr	r2, [pc, #156]	; (8004748 <plan_buffer_line+0x4d4>)
 80046aa:	1b33      	subs	r3, r6, r4
 80046ac:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80046b0:	629a      	str	r2, [r3, #40]	; 0x28
 80046b2:	e6ee      	b.n	8004492 <plan_buffer_line+0x21e>
        convert_delta_vector_to_unit_vector(junction_unit_vec);
 80046b4:	a810      	add	r0, sp, #64	; 0x40
 80046b6:	f7ff fad9 	bl	8003c6c <convert_delta_vector_to_unit_vector>
        float junction_acceleration = limit_value_by_axis_maximum(settings.acceleration, junction_unit_vec);
 80046ba:	a910      	add	r1, sp, #64	; 0x40
 80046bc:	4823      	ldr	r0, [pc, #140]	; (800474c <plan_buffer_line+0x4d8>)
 80046be:	f7ff fb39 	bl	8003d34 <limit_value_by_axis_maximum>
 80046c2:	4603      	mov	r3, r0
        float sin_theta_d2 = sqrtf(0.5f*(1.0f-junction_cos_theta)); // Trig half angle identity. Always positive.
 80046c4:	9900      	ldr	r1, [sp, #0]
 80046c6:	9803      	ldr	r0, [sp, #12]
        float junction_acceleration = limit_value_by_axis_maximum(settings.acceleration, junction_unit_vec);
 80046c8:	9300      	str	r3, [sp, #0]
        float sin_theta_d2 = sqrtf(0.5f*(1.0f-junction_cos_theta)); // Trig half angle identity. Always positive.
 80046ca:	f7fb ffdb 	bl	8000684 <__addsf3>
 80046ce:	9902      	ldr	r1, [sp, #8]
 80046d0:	f7fb ffd8 	bl	8000684 <__addsf3>
 80046d4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80046d8:	4682      	mov	sl, r0
 80046da:	4658      	mov	r0, fp
 80046dc:	f7fb ffd2 	bl	8000684 <__addsf3>
 80046e0:	4601      	mov	r1, r0
 80046e2:	4650      	mov	r0, sl
 80046e4:	f7fb ffce 	bl	8000684 <__addsf3>
 80046e8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80046ec:	f7fc f8d2 	bl	8000894 <__aeabi_fmul>
 80046f0:	f005 fba6 	bl	8009e40 <sqrtf>
 80046f4:	4682      	mov	sl, r0
        block->max_junction_speed_sqr = max( MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED,
 80046f6:	9b00      	ldr	r3, [sp, #0]
 80046f8:	4651      	mov	r1, sl
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fc f8ca 	bl	8000894 <__aeabi_fmul>
 8004700:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004702:	f7fc f8c7 	bl	8000894 <__aeabi_fmul>
 8004706:	4651      	mov	r1, sl
 8004708:	4607      	mov	r7, r0
 800470a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800470e:	f7fb ffb7 	bl	8000680 <__aeabi_fsub>
 8004712:	4601      	mov	r1, r0
 8004714:	4638      	mov	r0, r7
 8004716:	f7fc f971 	bl	80009fc <__aeabi_fdiv>
 800471a:	eba6 0b04 	sub.w	fp, r6, r4
 800471e:	2100      	movs	r1, #0
 8004720:	4607      	mov	r7, r0
 8004722:	eb05 0bcb 	add.w	fp, r5, fp, lsl #3
 8004726:	f7fc fa67 	bl	8000bf8 <__aeabi_fcmpge>
 800472a:	b900      	cbnz	r0, 800472e <plan_buffer_line+0x4ba>
 800472c:	2700      	movs	r7, #0
 800472e:	f8cb 7028 	str.w	r7, [fp, #40]	; 0x28
 8004732:	e6ae      	b.n	8004492 <plan_buffer_line+0x21e>
 8004734:	200011f0 	.word	0x200011f0
 8004738:	3f7fffef 	.word	0x3f7fffef
 800473c:	200009d0 	.word	0x200009d0
 8004740:	3c23d70a 	.word	0x3c23d70a
 8004744:	bf7fffef 	.word	0xbf7fffef
 8004748:	7f7fffff 	.word	0x7f7fffff
 800474c:	2000140c 	.word	0x2000140c

08004750 <plan_sync_position>:
        pl.position[Y_AXIS] = system_convert_corexy_to_y_axis_steps(sys_position);
      } else {
        pl.position[idx] = sys_position[idx];
      }
    #else
      pl.position[idx] = sys_position[idx];
 8004750:	4a05      	ldr	r2, [pc, #20]	; (8004768 <plan_sync_position+0x18>)
 8004752:	4b06      	ldr	r3, [pc, #24]	; (800476c <plan_sync_position+0x1c>)
 8004754:	6851      	ldr	r1, [r2, #4]
 8004756:	6059      	str	r1, [r3, #4]
 8004758:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
 800475c:	6812      	ldr	r2, [r2, #0]
 800475e:	6098      	str	r0, [r3, #8]
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	60d9      	str	r1, [r3, #12]
    #endif
  }
}
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	200009e4 	.word	0x200009e4
 800476c:	200011f0 	.word	0x200011f0

08004770 <plan_get_block_buffer_available>:


// Returns the number of available blocks are in the planner buffer.
uint8_t plan_get_block_buffer_available()
{
  if (block_buffer_head >= block_buffer_tail) { return((BLOCK_BUFFER_SIZE-1)-(block_buffer_head-block_buffer_tail)); }
 8004770:	4a05      	ldr	r2, [pc, #20]	; (8004788 <plan_get_block_buffer_available+0x18>)
 8004772:	4b06      	ldr	r3, [pc, #24]	; (800478c <plan_get_block_buffer_available+0x1c>)
 8004774:	7810      	ldrb	r0, [r2, #0]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	4283      	cmp	r3, r0
 800477a:	bf2c      	ite	cs
 800477c:	3023      	addcs	r0, #35	; 0x23
  return((block_buffer_tail-block_buffer_head-1));
 800477e:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8004782:	1ac0      	subs	r0, r0, r3
 8004784:	b2c0      	uxtb	r0, r0
}
 8004786:	4770      	bx	lr
 8004788:	200011ee 	.word	0x200011ee
 800478c:	200011ec 	.word	0x200011ec

08004790 <plan_cycle_reinitialize>:


// Re-initialize buffer plan with a partially completed block, assumed to exist at the buffer tail.
// Called after a steppers have come to a complete stop for a feed hold and the cycle is stopped.
void plan_cycle_reinitialize()
{
 8004790:	b508      	push	{r3, lr}
  // Re-plan from a complete stop. Reset planner entry speeds and buffer planned pointer.
  st_update_plan_block_parameters();
 8004792:	f002 ff2b 	bl	80075ec <st_update_plan_block_parameters>
  block_buffer_planned = block_buffer_tail;
 8004796:	4a04      	ldr	r2, [pc, #16]	; (80047a8 <plan_cycle_reinitialize+0x18>)
 8004798:	4b04      	ldr	r3, [pc, #16]	; (80047ac <plan_cycle_reinitialize+0x1c>)
 800479a:	7812      	ldrb	r2, [r2, #0]
 800479c:	701a      	strb	r2, [r3, #0]
  planner_recalculate();
}
 800479e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  planner_recalculate();
 80047a2:	f7ff bb21 	b.w	8003de8 <planner_recalculate>
 80047a6:	bf00      	nop
 80047a8:	200011ee 	.word	0x200011ee
 80047ac:	200011ed 	.word	0x200011ed

080047b0 <printString>:

#include "grbl.h"


void printString(const char *s)
{
 80047b0:	b510      	push	{r4, lr}
 80047b2:	4604      	mov	r4, r0
  while (*s)
 80047b4:	7800      	ldrb	r0, [r0, #0]
 80047b6:	b128      	cbz	r0, 80047c4 <printString+0x14>
    serial_write(*s++);
 80047b8:	f001 fe14 	bl	80063e4 <serial_write>
  while (*s)
 80047bc:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80047c0:	2800      	cmp	r0, #0
 80047c2:	d1f9      	bne.n	80047b8 <printString+0x8>
}
 80047c4:	bd10      	pop	{r4, pc}
 80047c6:	bf00      	nop

080047c8 <print_uint8_base10>:
// Prints an uint8 variable in base 10.
void print_uint8_base10(uint8_t n)
{
  uint8_t digit_a = 0;
  uint8_t digit_b = 0;
  if (n >= 100) { // 100-255
 80047c8:	2863      	cmp	r0, #99	; 0x63
{
 80047ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047cc:	4604      	mov	r4, r0
  if (n >= 100) { // 100-255
 80047ce:	d91d      	bls.n	800480c <print_uint8_base10+0x44>
    digit_a = '0' + n % 10;
    n /= 10;
 80047d0:	4e1b      	ldr	r6, [pc, #108]	; (8004840 <print_uint8_base10+0x78>)
 80047d2:	fba6 3500 	umull	r3, r5, r6, r0
 80047d6:	08ef      	lsrs	r7, r5, #3
  }
  if (n >= 10) { // 10-99
    digit_b = '0' + n % 10;
    n /= 10;
 80047d8:	fba6 3607 	umull	r3, r6, r6, r7
 80047dc:	08f6      	lsrs	r6, r6, #3
  }
  serial_write('0' + n);
 80047de:	f106 0030 	add.w	r0, r6, #48	; 0x30
    digit_b = '0' + n % 10;
 80047e2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80047e6:	eba7 0646 	sub.w	r6, r7, r6, lsl #1
  serial_write('0' + n);
 80047ea:	f001 fdfb 	bl	80063e4 <serial_write>
    digit_b = '0' + n % 10;
 80047ee:	f106 0030 	add.w	r0, r6, #48	; 0x30
  if (digit_b) { serial_write(digit_b); }
 80047f2:	b2c0      	uxtb	r0, r0
 80047f4:	f001 fdf6 	bl	80063e4 <serial_write>
    digit_a = '0' + n % 10;
 80047f8:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 80047fc:	eba4 0040 	sub.w	r0, r4, r0, lsl #1
 8004800:	3030      	adds	r0, #48	; 0x30
  if (digit_a) { serial_write(digit_a); }
 8004802:	b2c0      	uxtb	r0, r0
}
 8004804:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (digit_a) { serial_write(digit_a); }
 8004808:	f001 bdec 	b.w	80063e4 <serial_write>
  if (n >= 10) { // 10-99
 800480c:	2809      	cmp	r0, #9
 800480e:	d806      	bhi.n	800481e <print_uint8_base10+0x56>
  serial_write('0' + n);
 8004810:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8004814:	b2c0      	uxtb	r0, r0
}
 8004816:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  serial_write('0' + n);
 800481a:	f001 bde3 	b.w	80063e4 <serial_write>
    n /= 10;
 800481e:	260a      	movs	r6, #10
 8004820:	fbb4 f5f6 	udiv	r5, r4, r6
  serial_write('0' + n);
 8004824:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8004828:	b2c0      	uxtb	r0, r0
 800482a:	f001 fddb 	bl	80063e4 <serial_write>
    digit_b = '0' + n % 10;
 800482e:	fb06 4015 	mls	r0, r6, r5, r4
}
 8004832:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digit_b = '0' + n % 10;
 8004836:	3030      	adds	r0, #48	; 0x30
  if (digit_b) { serial_write(digit_b); }
 8004838:	b2c0      	uxtb	r0, r0
 800483a:	f001 bdd3 	b.w	80063e4 <serial_write>
 800483e:	bf00      	nop
 8004840:	cccccccd 	.word	0xcccccccd

08004844 <printFloat>:
// more digits than a float. Number of decimal places, which are tracked by a counter,
// may be set by the user. The integer is then efficiently converted to a string.
// NOTE: AVR '%' and '/' integer operations are very efficient. Bitshifting speed-up
// techniques are actually just slightly slower. Found this out the hard way.
void printFloat(float n, uint8_t decimal_places)
{
 8004844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004846:	460d      	mov	r5, r1
 8004848:	b085      	sub	sp, #20
  if (n < 0) {
 800484a:	2100      	movs	r1, #0
{
 800484c:	4606      	mov	r6, r0
  if (n < 0) {
 800484e:	f7fc f9bf 	bl	8000bd0 <__aeabi_fcmplt>
 8004852:	2800      	cmp	r0, #0
 8004854:	f040 80e0 	bne.w	8004a18 <printFloat+0x1d4>
    serial_write('-');
    n = -n;
  }

  uint8_t decimals = decimal_places;
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004858:	2d01      	cmp	r5, #1
 800485a:	f240 80e5 	bls.w	8004a28 <printFloat+0x1e4>
 800485e:	462c      	mov	r4, r5
    n *= 100;
 8004860:	4f77      	ldr	r7, [pc, #476]	; (8004a40 <printFloat+0x1fc>)
 8004862:	4630      	mov	r0, r6
 8004864:	4639      	mov	r1, r7
 8004866:	f7fc f815 	bl	8000894 <__aeabi_fmul>
    decimals -= 2;
 800486a:	3c02      	subs	r4, #2
 800486c:	b2e4      	uxtb	r4, r4
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 800486e:	2c01      	cmp	r4, #1
    n *= 100;
 8004870:	4606      	mov	r6, r0
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004872:	d8f6      	bhi.n	8004862 <printFloat+0x1e>
    decimals -= 2;
 8004874:	f005 0301 	and.w	r3, r5, #1
  }
  if (decimals) { n *= 10; }
 8004878:	b123      	cbz	r3, 8004884 <printFloat+0x40>
 800487a:	4630      	mov	r0, r6
 800487c:	4971      	ldr	r1, [pc, #452]	; (8004a44 <printFloat+0x200>)
 800487e:	f7fc f809 	bl	8000894 <__aeabi_fmul>
 8004882:	4606      	mov	r6, r0
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004884:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004888:	4630      	mov	r0, r6
 800488a:	f7fb fefb 	bl	8000684 <__addsf3>

  // Generate digits backwards and store in string.
  unsigned char buf[13];
  uint8_t i = 0;
  uint32_t a = (long)n;
 800488e:	f7fc f9dd 	bl	8000c4c <__aeabi_f2iz>
  while(a > 0) {
 8004892:	2800      	cmp	r0, #0
 8004894:	f000 80ca 	beq.w	8004a2c <printFloat+0x1e8>
  uint8_t i = 0;
 8004898:	2400      	movs	r4, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 800489a:	4f6b      	ldr	r7, [pc, #428]	; (8004a48 <printFloat+0x204>)
 800489c:	4622      	mov	r2, r4
 800489e:	4601      	mov	r1, r0
 80048a0:	fba7 4300 	umull	r4, r3, r7, r0
 80048a4:	08db      	lsrs	r3, r3, #3
 80048a6:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 80048aa:	eba0 0046 	sub.w	r0, r0, r6, lsl #1
 80048ae:	f100 0630 	add.w	r6, r0, #48	; 0x30
    a /= 10;
 80048b2:	4618      	mov	r0, r3
    buf[i++] = (a % 10) + '0'; // Get digit
 80048b4:	f102 0310 	add.w	r3, r2, #16
 80048b8:	1c54      	adds	r4, r2, #1
  while(a > 0) {
 80048ba:	2909      	cmp	r1, #9
    buf[i++] = (a % 10) + '0'; // Get digit
 80048bc:	eb0d 0203 	add.w	r2, sp, r3
 80048c0:	b2e4      	uxtb	r4, r4
 80048c2:	f802 6c10 	strb.w	r6, [r2, #-16]
  while(a > 0) {
 80048c6:	d8e9      	bhi.n	800489c <printFloat+0x58>
  }
  while (i < decimal_places) {
 80048c8:	42a5      	cmp	r5, r4
 80048ca:	d97d      	bls.n	80049c8 <printFloat+0x184>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80048cc:	2230      	movs	r2, #48	; 0x30
 80048ce:	1c63      	adds	r3, r4, #1
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	f104 0110 	add.w	r1, r4, #16
 80048d6:	4469      	add	r1, sp
  while (i < decimal_places) {
 80048d8:	429d      	cmp	r5, r3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80048da:	f801 2c10 	strb.w	r2, [r1, #-16]
  while (i < decimal_places) {
 80048de:	d96b      	bls.n	80049b8 <printFloat+0x174>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80048e0:	1ca1      	adds	r1, r4, #2
 80048e2:	b2c9      	uxtb	r1, r1
 80048e4:	f103 0010 	add.w	r0, r3, #16
 80048e8:	4468      	add	r0, sp
  while (i < decimal_places) {
 80048ea:	428d      	cmp	r5, r1
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80048ec:	f800 2c10 	strb.w	r2, [r0, #-16]
  while (i < decimal_places) {
 80048f0:	d962      	bls.n	80049b8 <printFloat+0x174>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80048f2:	3110      	adds	r1, #16
 80048f4:	4469      	add	r1, sp
 80048f6:	f801 2c10 	strb.w	r2, [r1, #-16]
 80048fa:	1ce1      	adds	r1, r4, #3
 80048fc:	b2c9      	uxtb	r1, r1
  while (i < decimal_places) {
 80048fe:	42a9      	cmp	r1, r5
 8004900:	d25a      	bcs.n	80049b8 <printFloat+0x174>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004902:	3110      	adds	r1, #16
 8004904:	4469      	add	r1, sp
 8004906:	f801 2c10 	strb.w	r2, [r1, #-16]
 800490a:	1d21      	adds	r1, r4, #4
 800490c:	b2c9      	uxtb	r1, r1
  while (i < decimal_places) {
 800490e:	42a9      	cmp	r1, r5
 8004910:	d252      	bcs.n	80049b8 <printFloat+0x174>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004912:	3110      	adds	r1, #16
 8004914:	4469      	add	r1, sp
 8004916:	f801 2c10 	strb.w	r2, [r1, #-16]
 800491a:	1d61      	adds	r1, r4, #5
 800491c:	b2c9      	uxtb	r1, r1
  while (i < decimal_places) {
 800491e:	428d      	cmp	r5, r1
 8004920:	d94a      	bls.n	80049b8 <printFloat+0x174>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004922:	3110      	adds	r1, #16
 8004924:	4469      	add	r1, sp
 8004926:	f801 2c10 	strb.w	r2, [r1, #-16]
 800492a:	1da1      	adds	r1, r4, #6
 800492c:	b2c9      	uxtb	r1, r1
  while (i < decimal_places) {
 800492e:	428d      	cmp	r5, r1
 8004930:	d942      	bls.n	80049b8 <printFloat+0x174>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004932:	3110      	adds	r1, #16
 8004934:	4469      	add	r1, sp
 8004936:	f801 2c10 	strb.w	r2, [r1, #-16]
 800493a:	1de1      	adds	r1, r4, #7
 800493c:	b2c9      	uxtb	r1, r1
  while (i < decimal_places) {
 800493e:	428d      	cmp	r5, r1
 8004940:	d93a      	bls.n	80049b8 <printFloat+0x174>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004942:	3110      	adds	r1, #16
 8004944:	4469      	add	r1, sp
 8004946:	f801 2c10 	strb.w	r2, [r1, #-16]
 800494a:	f104 0108 	add.w	r1, r4, #8
 800494e:	b2c9      	uxtb	r1, r1
  while (i < decimal_places) {
 8004950:	428d      	cmp	r5, r1
 8004952:	d931      	bls.n	80049b8 <printFloat+0x174>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004954:	3110      	adds	r1, #16
 8004956:	4469      	add	r1, sp
 8004958:	f801 2c10 	strb.w	r2, [r1, #-16]
 800495c:	f104 0109 	add.w	r1, r4, #9
 8004960:	b2c9      	uxtb	r1, r1
  while (i < decimal_places) {
 8004962:	428d      	cmp	r5, r1
 8004964:	d928      	bls.n	80049b8 <printFloat+0x174>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004966:	3110      	adds	r1, #16
 8004968:	4469      	add	r1, sp
 800496a:	f801 2c10 	strb.w	r2, [r1, #-16]
 800496e:	f104 010a 	add.w	r1, r4, #10
 8004972:	b2c9      	uxtb	r1, r1
  while (i < decimal_places) {
 8004974:	428d      	cmp	r5, r1
 8004976:	d91f      	bls.n	80049b8 <printFloat+0x174>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004978:	2030      	movs	r0, #48	; 0x30
 800497a:	f104 020b 	add.w	r2, r4, #11
 800497e:	3110      	adds	r1, #16
 8004980:	b2d2      	uxtb	r2, r2
 8004982:	4469      	add	r1, sp
  while (i < decimal_places) {
 8004984:	4295      	cmp	r5, r2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004986:	f801 0c10 	strb.w	r0, [r1, #-16]
  while (i < decimal_places) {
 800498a:	d915      	bls.n	80049b8 <printFloat+0x174>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 800498c:	3210      	adds	r2, #16
 800498e:	446a      	add	r2, sp
 8004990:	f802 0c10 	strb.w	r0, [r2, #-16]
 8004994:	f104 020c 	add.w	r2, r4, #12
 8004998:	b2d2      	uxtb	r2, r2
  while (i < decimal_places) {
 800499a:	4295      	cmp	r5, r2
 800499c:	d90c      	bls.n	80049b8 <printFloat+0x174>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 800499e:	3210      	adds	r2, #16
 80049a0:	446a      	add	r2, sp
 80049a2:	f802 0c10 	strb.w	r0, [r2, #-16]
 80049a6:	f104 020d 	add.w	r2, r4, #13
 80049aa:	b2d2      	uxtb	r2, r2
  while (i < decimal_places) {
 80049ac:	4295      	cmp	r5, r2
 80049ae:	d903      	bls.n	80049b8 <printFloat+0x174>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80049b0:	3210      	adds	r2, #16
 80049b2:	446a      	add	r2, sp
 80049b4:	f802 0c10 	strb.w	r0, [r2, #-16]
  while (i < decimal_places) {
 80049b8:	1e6a      	subs	r2, r5, #1
 80049ba:	1b14      	subs	r4, r2, r4
 80049bc:	429d      	cmp	r5, r3
 80049be:	bf38      	it	cc
 80049c0:	2400      	movcc	r4, #0
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80049c2:	4423      	add	r3, r4
 80049c4:	f003 04ff 	and.w	r4, r3, #255	; 0xff
  }
  if (i == decimal_places) { // Fill in leading zero, if needed.
 80049c8:	42a5      	cmp	r5, r4
 80049ca:	d01c      	beq.n	8004a06 <printFloat+0x1c2>
    buf[i++] = '0';
  }

  // Print the generated string.
  for (; i > 0; i--) {
 80049cc:	b16c      	cbz	r4, 80049ea <printFloat+0x1a6>
 80049ce:	1e6f      	subs	r7, r5, #1
 80049d0:	eb0d 0604 	add.w	r6, sp, r4
 80049d4:	b2ff      	uxtb	r7, r7
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 80049d6:	42a5      	cmp	r5, r4
 80049d8:	d009      	beq.n	80049ee <printFloat+0x1aa>
    serial_write(buf[i-1]);
 80049da:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
  for (; i > 0; i--) {
 80049de:	3c01      	subs	r4, #1
    serial_write(buf[i-1]);
 80049e0:	f001 fd00 	bl	80063e4 <serial_write>
  for (; i > 0; i--) {
 80049e4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80049e8:	d1f5      	bne.n	80049d6 <printFloat+0x192>
  }
}
 80049ea:	b005      	add	sp, #20
 80049ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 80049ee:	202e      	movs	r0, #46	; 0x2e
 80049f0:	f001 fcf8 	bl	80063e4 <serial_write>
    serial_write(buf[i-1]);
 80049f4:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 80049f8:	f001 fcf4 	bl	80063e4 <serial_write>
  for (; i > 0; i--) {
 80049fc:	463c      	mov	r4, r7
 80049fe:	2f00      	cmp	r7, #0
 8004a00:	d1e9      	bne.n	80049d6 <printFloat+0x192>
}
 8004a02:	b005      	add	sp, #20
 8004a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    buf[i++] = '0';
 8004a06:	2230      	movs	r2, #48	; 0x30
 8004a08:	f105 0310 	add.w	r3, r5, #16
 8004a0c:	1c6c      	adds	r4, r5, #1
 8004a0e:	446b      	add	r3, sp
 8004a10:	b2e4      	uxtb	r4, r4
 8004a12:	f803 2c10 	strb.w	r2, [r3, #-16]
 8004a16:	e7d9      	b.n	80049cc <printFloat+0x188>
    serial_write('-');
 8004a18:	202d      	movs	r0, #45	; 0x2d
 8004a1a:	f001 fce3 	bl	80063e4 <serial_write>
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004a1e:	2d01      	cmp	r5, #1
    n = -n;
 8004a20:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004a24:	f63f af1b 	bhi.w	800485e <printFloat+0x1a>
 8004a28:	462b      	mov	r3, r5
 8004a2a:	e725      	b.n	8004878 <printFloat+0x34>
  uint8_t i = 0;
 8004a2c:	4604      	mov	r4, r0
  while (i < decimal_places) {
 8004a2e:	2d00      	cmp	r5, #0
 8004a30:	f47f af4c 	bne.w	80048cc <printFloat+0x88>
    buf[i++] = '0';
 8004a34:	2330      	movs	r3, #48	; 0x30
 8004a36:	2401      	movs	r4, #1
 8004a38:	f88d 3000 	strb.w	r3, [sp]
  for (; i > 0; i--) {
 8004a3c:	e7c7      	b.n	80049ce <printFloat+0x18a>
 8004a3e:	bf00      	nop
 8004a40:	42c80000 	.word	0x42c80000
 8004a44:	41200000 	.word	0x41200000
 8004a48:	cccccccd 	.word	0xcccccccd

08004a4c <printFloat_CoordValue>:

// Floating value printing handlers for special variables types used in Grbl and are defined
// in the config.h.
//  - CoordValue: Handles all position or coordinate values in inches or mm reporting.
//  - RateValue: Handles feed rate and current velocity in inches or mm reporting.
void printFloat_CoordValue(float n) {
 8004a4c:	b570      	push	{r4, r5, r6, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004a4e:	4b86      	ldr	r3, [pc, #536]	; (8004c68 <printFloat_CoordValue+0x21c>)
void printFloat_CoordValue(float n) {
 8004a50:	b084      	sub	sp, #16
 8004a52:	f893 4058 	ldrb.w	r4, [r3, #88]	; 0x58
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004a56:	f014 0401 	ands.w	r4, r4, #1
 8004a5a:	d078      	beq.n	8004b4e <printFloat_CoordValue+0x102>
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 8004a5c:	4983      	ldr	r1, [pc, #524]	; (8004c6c <printFloat_CoordValue+0x220>)
 8004a5e:	f7fb ff19 	bl	8000894 <__aeabi_fmul>
  if (n < 0) {
 8004a62:	2100      	movs	r1, #0
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 8004a64:	4605      	mov	r5, r0
  if (n < 0) {
 8004a66:	f7fc f8b3 	bl	8000bd0 <__aeabi_fcmplt>
 8004a6a:	2800      	cmp	r0, #0
 8004a6c:	f040 80e0 	bne.w	8004c30 <printFloat_CoordValue+0x1e4>
    n *= 100;
 8004a70:	497f      	ldr	r1, [pc, #508]	; (8004c70 <printFloat_CoordValue+0x224>)
 8004a72:	4628      	mov	r0, r5
 8004a74:	f7fb ff0e 	bl	8000894 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004a78:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004a7c:	f7fb fe02 	bl	8000684 <__addsf3>
  uint32_t a = (long)n;
 8004a80:	f7fc f8e4 	bl	8000c4c <__aeabi_f2iz>
  while(a > 0) {
 8004a84:	2800      	cmp	r0, #0
 8004a86:	f000 80df 	beq.w	8004c48 <printFloat_CoordValue+0x1fc>
  uint8_t i = 0;
 8004a8a:	2500      	movs	r5, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004a8c:	4e79      	ldr	r6, [pc, #484]	; (8004c74 <printFloat_CoordValue+0x228>)
 8004a8e:	462a      	mov	r2, r5
 8004a90:	4601      	mov	r1, r0
 8004a92:	fba6 4300 	umull	r4, r3, r6, r0
 8004a96:	08db      	lsrs	r3, r3, #3
 8004a98:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8004a9c:	eba0 0044 	sub.w	r0, r0, r4, lsl #1
 8004aa0:	f100 0430 	add.w	r4, r0, #48	; 0x30
    a /= 10;
 8004aa4:	4618      	mov	r0, r3
    buf[i++] = (a % 10) + '0'; // Get digit
 8004aa6:	f102 0310 	add.w	r3, r2, #16
 8004aaa:	3501      	adds	r5, #1
 8004aac:	446b      	add	r3, sp
  while(a > 0) {
 8004aae:	2909      	cmp	r1, #9
    buf[i++] = (a % 10) + '0'; // Get digit
 8004ab0:	b2ed      	uxtb	r5, r5
 8004ab2:	f803 4c10 	strb.w	r4, [r3, #-16]
  while(a > 0) {
 8004ab6:	d8ea      	bhi.n	8004a8e <printFloat_CoordValue+0x42>
  while (i < decimal_places) {
 8004ab8:	2d03      	cmp	r5, #3
 8004aba:	d826      	bhi.n	8004b0a <printFloat_CoordValue+0xbe>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004abc:	2130      	movs	r1, #48	; 0x30
 8004abe:	1c94      	adds	r4, r2, #2
 8004ac0:	b2e4      	uxtb	r4, r4
 8004ac2:	f105 0310 	add.w	r3, r5, #16
 8004ac6:	446b      	add	r3, sp
  while (i < decimal_places) {
 8004ac8:	2c04      	cmp	r4, #4
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004aca:	f803 1c10 	strb.w	r1, [r3, #-16]
  while (i < decimal_places) {
 8004ace:	f000 80c5 	beq.w	8004c5c <printFloat_CoordValue+0x210>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004ad2:	3203      	adds	r2, #3
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	f104 0310 	add.w	r3, r4, #16
 8004ada:	446b      	add	r3, sp
  while (i < decimal_places) {
 8004adc:	2a04      	cmp	r2, #4
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004ade:	f803 1c10 	strb.w	r1, [r3, #-16]
  while (i < decimal_places) {
 8004ae2:	f000 80bf 	beq.w	8004c64 <printFloat_CoordValue+0x218>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004ae6:	2330      	movs	r3, #48	; 0x30
 8004ae8:	f102 0110 	add.w	r1, r2, #16
 8004aec:	4469      	add	r1, sp
  while (i < decimal_places) {
 8004aee:	2a02      	cmp	r2, #2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004af0:	f801 3c10 	strb.w	r3, [r1, #-16]
  while (i < decimal_places) {
 8004af4:	d101      	bne.n	8004afa <printFloat_CoordValue+0xae>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004af6:	f88d 3003 	strb.w	r3, [sp, #3]
  while (i < decimal_places) {
 8004afa:	2c04      	cmp	r4, #4
 8004afc:	f1c5 0503 	rsb	r5, r5, #3
 8004b00:	bf88      	it	hi
 8004b02:	2500      	movhi	r5, #0
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004b04:	442c      	add	r4, r5
 8004b06:	f004 05ff 	and.w	r5, r4, #255	; 0xff
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004b0a:	2d04      	cmp	r5, #4
    buf[i++] = '0';
 8004b0c:	bf06      	itte	eq
 8004b0e:	2505      	moveq	r5, #5
 8004b10:	2330      	moveq	r3, #48	; 0x30
 8004b12:	f89d 3004 	ldrbne.w	r3, [sp, #4]
 8004b16:	1e6c      	subs	r4, r5, #1
 8004b18:	f88d 3004 	strb.w	r3, [sp, #4]
  for (; i > 0; i--) {
 8004b1c:	b2e4      	uxtb	r4, r4
 8004b1e:	e009      	b.n	8004b34 <printFloat_CoordValue+0xe8>
    serial_write(buf[i-1]);
 8004b20:	f813 0c11 	ldrb.w	r0, [r3, #-17]
 8004b24:	f001 fc5e 	bl	80063e4 <serial_write>
  for (; i > 0; i--) {
 8004b28:	2c00      	cmp	r4, #0
 8004b2a:	d078      	beq.n	8004c1e <printFloat_CoordValue+0x1d2>
 8004b2c:	3d01      	subs	r5, #1
 8004b2e:	3c01      	subs	r4, #1
 8004b30:	b2ed      	uxtb	r5, r5
 8004b32:	b2e4      	uxtb	r4, r4
    serial_write(buf[i-1]);
 8004b34:	f105 0310 	add.w	r3, r5, #16
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004b38:	2d04      	cmp	r5, #4
    serial_write(buf[i-1]);
 8004b3a:	446b      	add	r3, sp
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004b3c:	d1f0      	bne.n	8004b20 <printFloat_CoordValue+0xd4>
 8004b3e:	202e      	movs	r0, #46	; 0x2e
 8004b40:	f001 fc50 	bl	80063e4 <serial_write>
    serial_write(buf[i-1]);
 8004b44:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8004b48:	f001 fc4c 	bl	80063e4 <serial_write>
  for (; i > 0; i--) {
 8004b4c:	e7ee      	b.n	8004b2c <printFloat_CoordValue+0xe0>
  if (n < 0) {
 8004b4e:	2100      	movs	r1, #0
 8004b50:	4605      	mov	r5, r0
 8004b52:	f7fc f83d 	bl	8000bd0 <__aeabi_fcmplt>
 8004b56:	2800      	cmp	r0, #0
 8004b58:	d163      	bne.n	8004c22 <printFloat_CoordValue+0x1d6>
  if (decimals) { n *= 10; }
 8004b5a:	4947      	ldr	r1, [pc, #284]	; (8004c78 <printFloat_CoordValue+0x22c>)
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	f7fb fe99 	bl	8000894 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004b62:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004b66:	f7fb fd8d 	bl	8000684 <__addsf3>
  uint32_t a = (long)n;
 8004b6a:	f7fc f86f 	bl	8000c4c <__aeabi_f2iz>
  while(a > 0) {
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	d064      	beq.n	8004c3c <printFloat_CoordValue+0x1f0>
    buf[i++] = (a % 10) + '0'; // Get digit
 8004b72:	4e40      	ldr	r6, [pc, #256]	; (8004c74 <printFloat_CoordValue+0x228>)
 8004b74:	4622      	mov	r2, r4
 8004b76:	4601      	mov	r1, r0
 8004b78:	fba6 4300 	umull	r4, r3, r6, r0
 8004b7c:	08db      	lsrs	r3, r3, #3
 8004b7e:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8004b82:	eba0 0045 	sub.w	r0, r0, r5, lsl #1
 8004b86:	f100 0530 	add.w	r5, r0, #48	; 0x30
    a /= 10;
 8004b8a:	4618      	mov	r0, r3
    buf[i++] = (a % 10) + '0'; // Get digit
 8004b8c:	f102 0310 	add.w	r3, r2, #16
 8004b90:	1c54      	adds	r4, r2, #1
 8004b92:	446b      	add	r3, sp
  while(a > 0) {
 8004b94:	2909      	cmp	r1, #9
    buf[i++] = (a % 10) + '0'; // Get digit
 8004b96:	b2e4      	uxtb	r4, r4
 8004b98:	f803 5c10 	strb.w	r5, [r3, #-16]
  while(a > 0) {
 8004b9c:	d8ea      	bhi.n	8004b74 <printFloat_CoordValue+0x128>
  while (i < decimal_places) {
 8004b9e:	2c02      	cmp	r4, #2
 8004ba0:	d81c      	bhi.n	8004bdc <printFloat_CoordValue+0x190>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004ba2:	2130      	movs	r1, #48	; 0x30
 8004ba4:	3202      	adds	r2, #2
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	f104 0310 	add.w	r3, r4, #16
 8004bac:	446b      	add	r3, sp
  while (i < decimal_places) {
 8004bae:	2a03      	cmp	r2, #3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004bb0:	f803 1c10 	strb.w	r1, [r3, #-16]
  while (i < decimal_places) {
 8004bb4:	d050      	beq.n	8004c58 <printFloat_CoordValue+0x20c>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004bb6:	f102 0310 	add.w	r3, r2, #16
 8004bba:	446b      	add	r3, sp
  while (i < decimal_places) {
 8004bbc:	2a01      	cmp	r2, #1
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004bbe:	f803 1c10 	strb.w	r1, [r3, #-16]
  while (i < decimal_places) {
 8004bc2:	d14d      	bne.n	8004c60 <printFloat_CoordValue+0x214>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004bc4:	2330      	movs	r3, #48	; 0x30
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f88d 3002 	strb.w	r3, [sp, #2]
  while (i < decimal_places) {
 8004bcc:	2a03      	cmp	r2, #3
 8004bce:	f1c4 0402 	rsb	r4, r4, #2
 8004bd2:	bf88      	it	hi
 8004bd4:	2400      	movhi	r4, #0
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004bd6:	4422      	add	r2, r4
 8004bd8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004bdc:	2c03      	cmp	r4, #3
    buf[i++] = '0';
 8004bde:	bf06      	itte	eq
 8004be0:	2404      	moveq	r4, #4
 8004be2:	2330      	moveq	r3, #48	; 0x30
 8004be4:	f89d 3003 	ldrbne.w	r3, [sp, #3]
 8004be8:	1e65      	subs	r5, r4, #1
 8004bea:	f88d 3003 	strb.w	r3, [sp, #3]
  for (; i > 0; i--) {
 8004bee:	b2ed      	uxtb	r5, r5
 8004bf0:	e008      	b.n	8004c04 <printFloat_CoordValue+0x1b8>
    serial_write(buf[i-1]);
 8004bf2:	f813 0c11 	ldrb.w	r0, [r3, #-17]
 8004bf6:	f001 fbf5 	bl	80063e4 <serial_write>
  for (; i > 0; i--) {
 8004bfa:	b185      	cbz	r5, 8004c1e <printFloat_CoordValue+0x1d2>
 8004bfc:	3c01      	subs	r4, #1
 8004bfe:	3d01      	subs	r5, #1
 8004c00:	b2e4      	uxtb	r4, r4
 8004c02:	b2ed      	uxtb	r5, r5
    serial_write(buf[i-1]);
 8004c04:	f104 0310 	add.w	r3, r4, #16
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004c08:	2c03      	cmp	r4, #3
    serial_write(buf[i-1]);
 8004c0a:	446b      	add	r3, sp
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004c0c:	d1f1      	bne.n	8004bf2 <printFloat_CoordValue+0x1a6>
 8004c0e:	202e      	movs	r0, #46	; 0x2e
 8004c10:	f001 fbe8 	bl	80063e4 <serial_write>
    serial_write(buf[i-1]);
 8004c14:	f89d 0002 	ldrb.w	r0, [sp, #2]
 8004c18:	f001 fbe4 	bl	80063e4 <serial_write>
  for (; i > 0; i--) {
 8004c1c:	e7ee      	b.n	8004bfc <printFloat_CoordValue+0x1b0>
  } else {
    printFloat(n,N_DECIMAL_COORDVALUE_MM);
  }
}
 8004c1e:	b004      	add	sp, #16
 8004c20:	bd70      	pop	{r4, r5, r6, pc}
    serial_write('-');
 8004c22:	202d      	movs	r0, #45	; 0x2d
 8004c24:	f001 fbde 	bl	80063e4 <serial_write>
    n = -n;
 8004c28:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
 8004c2c:	4605      	mov	r5, r0
 8004c2e:	e794      	b.n	8004b5a <printFloat_CoordValue+0x10e>
    serial_write('-');
 8004c30:	202d      	movs	r0, #45	; 0x2d
 8004c32:	f001 fbd7 	bl	80063e4 <serial_write>
    n = -n;
 8004c36:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8004c3a:	e719      	b.n	8004a70 <printFloat_CoordValue+0x24>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004c3c:	2330      	movs	r3, #48	; 0x30
 8004c3e:	f88d 3000 	strb.w	r3, [sp]
 8004c42:	f88d 3001 	strb.w	r3, [sp, #1]
  while (i < decimal_places) {
 8004c46:	e7bd      	b.n	8004bc4 <printFloat_CoordValue+0x178>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004c48:	2330      	movs	r3, #48	; 0x30
  uint8_t i = 0;
 8004c4a:	4605      	mov	r5, r0
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	f88d 3000 	strb.w	r3, [sp]
 8004c52:	f88d 3001 	strb.w	r3, [sp, #1]
  while (i < decimal_places) {
 8004c56:	e746      	b.n	8004ae6 <printFloat_CoordValue+0x9a>
 8004c58:	2402      	movs	r4, #2
 8004c5a:	e7b7      	b.n	8004bcc <printFloat_CoordValue+0x180>
 8004c5c:	2503      	movs	r5, #3
 8004c5e:	e74c      	b.n	8004afa <printFloat_CoordValue+0xae>
 8004c60:	2202      	movs	r2, #2
 8004c62:	e7b3      	b.n	8004bcc <printFloat_CoordValue+0x180>
 8004c64:	2403      	movs	r4, #3
 8004c66:	e748      	b.n	8004afa <printFloat_CoordValue+0xae>
 8004c68:	200013ec 	.word	0x200013ec
 8004c6c:	3d21428b 	.word	0x3d21428b
 8004c70:	461c4000 	.word	0x461c4000
 8004c74:	cccccccd 	.word	0xcccccccd
 8004c78:	447a0000 	.word	0x447a0000

08004c7c <printFloat_RateValue>:

void printFloat_RateValue(float n) {
 8004c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004c80:	4b52      	ldr	r3, [pc, #328]	; (8004dcc <printFloat_RateValue+0x150>)
void printFloat_RateValue(float n) {
 8004c82:	b084      	sub	sp, #16
 8004c84:	f893 4058 	ldrb.w	r4, [r3, #88]	; 0x58
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004c88:	f014 0401 	ands.w	r4, r4, #1
 8004c8c:	d053      	beq.n	8004d36 <printFloat_RateValue+0xba>
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 8004c8e:	4950      	ldr	r1, [pc, #320]	; (8004dd0 <printFloat_RateValue+0x154>)
 8004c90:	f7fb fe00 	bl	8000894 <__aeabi_fmul>
  if (n < 0) {
 8004c94:	2100      	movs	r1, #0
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 8004c96:	4604      	mov	r4, r0
  if (n < 0) {
 8004c98:	f7fb ff9a 	bl	8000bd0 <__aeabi_fcmplt>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	f040 8085 	bne.w	8004dac <printFloat_RateValue+0x130>
  if (decimals) { n *= 10; }
 8004ca2:	494c      	ldr	r1, [pc, #304]	; (8004dd4 <printFloat_RateValue+0x158>)
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	f7fb fdf5 	bl	8000894 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004caa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004cae:	f7fb fce9 	bl	8000684 <__addsf3>
  uint32_t a = (long)n;
 8004cb2:	f7fb ffcb 	bl	8000c4c <__aeabi_f2iz>
  while(a > 0) {
 8004cb6:	b1c8      	cbz	r0, 8004cec <printFloat_RateValue+0x70>
  uint8_t i = 0;
 8004cb8:	2400      	movs	r4, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004cba:	4d47      	ldr	r5, [pc, #284]	; (8004dd8 <printFloat_RateValue+0x15c>)
 8004cbc:	4622      	mov	r2, r4
 8004cbe:	4601      	mov	r1, r0
 8004cc0:	fba5 4300 	umull	r4, r3, r5, r0
 8004cc4:	08db      	lsrs	r3, r3, #3
 8004cc6:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8004cca:	eba0 004c 	sub.w	r0, r0, ip, lsl #1
 8004cce:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    a /= 10;
 8004cd2:	4618      	mov	r0, r3
    buf[i++] = (a % 10) + '0'; // Get digit
 8004cd4:	f102 0310 	add.w	r3, r2, #16
 8004cd8:	1c54      	adds	r4, r2, #1
  while(a > 0) {
 8004cda:	2909      	cmp	r1, #9
    buf[i++] = (a % 10) + '0'; // Get digit
 8004cdc:	eb0d 0203 	add.w	r2, sp, r3
 8004ce0:	b2e4      	uxtb	r4, r4
 8004ce2:	f802 cc10 	strb.w	ip, [r2, #-16]
  while(a > 0) {
 8004ce6:	d8e9      	bhi.n	8004cbc <printFloat_RateValue+0x40>
  while (i < decimal_places) {
 8004ce8:	2c00      	cmp	r4, #0
 8004cea:	d168      	bne.n	8004dbe <printFloat_RateValue+0x142>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004cec:	2330      	movs	r3, #48	; 0x30
    buf[i++] = '0';
 8004cee:	2402      	movs	r4, #2
 8004cf0:	461a      	mov	r2, r3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004cf2:	f88d 3000 	strb.w	r3, [sp]
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004cf6:	466e      	mov	r6, sp
 8004cf8:	ea6f 0806 	mvn.w	r8, r6
 8004cfc:	f88d 2001 	strb.w	r2, [sp, #1]
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004d00:	4434      	add	r4, r6
 8004d02:	f10d 0701 	add.w	r7, sp, #1
    serial_write(buf[i-1]);
 8004d06:	eb08 0504 	add.w	r5, r8, r4
 8004d0a:	f814 0d01 	ldrb.w	r0, [r4, #-1]!
 8004d0e:	f001 fb69 	bl	80063e4 <serial_write>
  for (; i > 0; i--) {
 8004d12:	42a6      	cmp	r6, r4
 8004d14:	d040      	beq.n	8004d98 <printFloat_RateValue+0x11c>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004d16:	42a7      	cmp	r7, r4
 8004d18:	d1f5      	bne.n	8004d06 <printFloat_RateValue+0x8a>
 8004d1a:	202e      	movs	r0, #46	; 0x2e
 8004d1c:	f001 fb62 	bl	80063e4 <serial_write>
    serial_write(buf[i-1]);
 8004d20:	f105 0310 	add.w	r3, r5, #16
 8004d24:	eb0d 0503 	add.w	r5, sp, r3
 8004d28:	f815 0c11 	ldrb.w	r0, [r5, #-17]
  } else {
    printFloat(n,N_DECIMAL_RATEVALUE_MM);
  }
}
 8004d2c:	b004      	add	sp, #16
 8004d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    serial_write(buf[i-1]);
 8004d32:	f001 bb57 	b.w	80063e4 <serial_write>
  if (n < 0) {
 8004d36:	2100      	movs	r1, #0
 8004d38:	4605      	mov	r5, r0
 8004d3a:	f7fb ff49 	bl	8000bd0 <__aeabi_fcmplt>
 8004d3e:	bb70      	cbnz	r0, 8004d9e <printFloat_RateValue+0x122>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004d40:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004d44:	4628      	mov	r0, r5
 8004d46:	f7fb fc9d 	bl	8000684 <__addsf3>
  uint32_t a = (long)n;
 8004d4a:	f7fb ff7f 	bl	8000c4c <__aeabi_f2iz>
  while(a > 0) {
 8004d4e:	b398      	cbz	r0, 8004db8 <printFloat_RateValue+0x13c>
    buf[i++] = (a % 10) + '0'; // Get digit
 8004d50:	4d21      	ldr	r5, [pc, #132]	; (8004dd8 <printFloat_RateValue+0x15c>)
 8004d52:	4622      	mov	r2, r4
 8004d54:	4601      	mov	r1, r0
 8004d56:	fba5 4300 	umull	r4, r3, r5, r0
 8004d5a:	08db      	lsrs	r3, r3, #3
 8004d5c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8004d60:	eba0 004c 	sub.w	r0, r0, ip, lsl #1
 8004d64:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    a /= 10;
 8004d68:	4618      	mov	r0, r3
    buf[i++] = (a % 10) + '0'; // Get digit
 8004d6a:	f102 0310 	add.w	r3, r2, #16
 8004d6e:	1c54      	adds	r4, r2, #1
  while(a > 0) {
 8004d70:	2909      	cmp	r1, #9
    buf[i++] = (a % 10) + '0'; // Get digit
 8004d72:	eb0d 0203 	add.w	r2, sp, r3
 8004d76:	b2e4      	uxtb	r4, r4
 8004d78:	f802 cc10 	strb.w	ip, [r2, #-16]
  while(a > 0) {
 8004d7c:	d8e9      	bhi.n	8004d52 <printFloat_RateValue+0xd6>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004d7e:	b1dc      	cbz	r4, 8004db8 <printFloat_RateValue+0x13c>
    buf[i++] = '0';
 8004d80:	f89d 3000 	ldrb.w	r3, [sp]
 8004d84:	466d      	mov	r5, sp
 8004d86:	f88d 3000 	strb.w	r3, [sp]
  for (; i > 0; i--) {
 8004d8a:	442c      	add	r4, r5
    serial_write(buf[i-1]);
 8004d8c:	f814 0d01 	ldrb.w	r0, [r4, #-1]!
 8004d90:	f001 fb28 	bl	80063e4 <serial_write>
  for (; i > 0; i--) {
 8004d94:	42a5      	cmp	r5, r4
 8004d96:	d1f9      	bne.n	8004d8c <printFloat_RateValue+0x110>
}
 8004d98:	b004      	add	sp, #16
 8004d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    serial_write('-');
 8004d9e:	202d      	movs	r0, #45	; 0x2d
 8004da0:	f001 fb20 	bl	80063e4 <serial_write>
    n = -n;
 8004da4:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
 8004da8:	4605      	mov	r5, r0
 8004daa:	e7c9      	b.n	8004d40 <printFloat_RateValue+0xc4>
    serial_write('-');
 8004dac:	202d      	movs	r0, #45	; 0x2d
 8004dae:	f001 fb19 	bl	80063e4 <serial_write>
    n = -n;
 8004db2:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8004db6:	e774      	b.n	8004ca2 <printFloat_RateValue+0x26>
    buf[i++] = '0';
 8004db8:	2330      	movs	r3, #48	; 0x30
 8004dba:	2401      	movs	r4, #1
 8004dbc:	e7e2      	b.n	8004d84 <printFloat_RateValue+0x108>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004dbe:	2c01      	cmp	r4, #1
    buf[i++] = '0';
 8004dc0:	bf06      	itte	eq
 8004dc2:	2230      	moveq	r2, #48	; 0x30
 8004dc4:	2402      	moveq	r4, #2
 8004dc6:	f89d 2001 	ldrbne.w	r2, [sp, #1]
 8004dca:	e794      	b.n	8004cf6 <printFloat_RateValue+0x7a>
 8004dcc:	200013ec 	.word	0x200013ec
 8004dd0:	3d21428b 	.word	0x3d21428b
 8004dd4:	41200000 	.word	0x41200000
 8004dd8:	cccccccd 	.word	0xcccccccd

08004ddc <probe_init>:
uint16_t probe_invert_mask;


// Probe pin initialization routine.
void probe_init()
{
 8004ddc:	b510      	push	{r4, lr}
    PROBE_PORT |= PROBE_MASK;    // Enable internal pull-up resistors. Normal high operation.
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_PROBE_PORT, ENABLE);
 8004dde:	2101      	movs	r1, #1
{
 8004de0:	b082      	sub	sp, #8
	RCC_APB2PeriphClockCmd(RCC_PROBE_PORT, ENABLE);
 8004de2:	2008      	movs	r0, #8
 8004de4:	f7fc fade 	bl	80013a4 <RCC_APB2PeriphClockCmd>
#ifdef DISABLE_PROBE_PIN_PULL_UP
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
	GPIO_InitStructure.GPIO_Pin = PROBE_MASK;
 8004de8:	f44f 7400 	mov.w	r4, #512	; 0x200
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004dec:	f644 0303 	movw	r3, #18435	; 0x4803
	GPIO_Init(PROBE_PORT, &GPIO_InitStructure);
 8004df0:	4808      	ldr	r0, [pc, #32]	; (8004e14 <probe_init+0x38>)
 8004df2:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin = PROBE_MASK;
 8004df4:	f8ad 4004 	strh.w	r4, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004df8:	f8ad 3006 	strh.w	r3, [sp, #6]
	GPIO_Init(PROBE_PORT, &GPIO_InitStructure);
 8004dfc:	f7fc f8d8 	bl	8000fb0 <GPIO_Init>
// appropriately set the pin logic according to setting for normal-high/normal-low operation
// and the probing cycle modes for toward-workpiece/away-from-workpiece.
void probe_configure_invert_mask(uint8_t is_probe_away)
{
  probe_invert_mask = 0; // Initialize as zero.
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004e00:	4a05      	ldr	r2, [pc, #20]	; (8004e18 <probe_init+0x3c>)
  probe_invert_mask = 0; // Initialize as zero.
 8004e02:	4b06      	ldr	r3, [pc, #24]	; (8004e1c <probe_init+0x40>)
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004e04:	f992 2058 	ldrsb.w	r2, [r2, #88]	; 0x58
 8004e08:	2a00      	cmp	r2, #0
 8004e0a:	bfb8      	it	lt
 8004e0c:	2400      	movlt	r4, #0
 8004e0e:	801c      	strh	r4, [r3, #0]
}
 8004e10:	b002      	add	sp, #8
 8004e12:	bd10      	pop	{r4, pc}
 8004e14:	40010c00 	.word	0x40010c00
 8004e18:	200013ec 	.word	0x200013ec
 8004e1c:	20001214 	.word	0x20001214

08004e20 <probe_configure_invert_mask>:
  probe_invert_mask = 0; // Initialize as zero.
 8004e20:	2300      	movs	r3, #0
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004e22:	4907      	ldr	r1, [pc, #28]	; (8004e40 <probe_configure_invert_mask+0x20>)
  probe_invert_mask = 0; // Initialize as zero.
 8004e24:	4a07      	ldr	r2, [pc, #28]	; (8004e44 <probe_configure_invert_mask+0x24>)
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004e26:	f991 1058 	ldrsb.w	r1, [r1, #88]	; 0x58
  probe_invert_mask = 0; // Initialize as zero.
 8004e2a:	8013      	strh	r3, [r2, #0]
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004e2c:	4299      	cmp	r1, r3
 8004e2e:	bfaa      	itet	ge
 8004e30:	f44f 7100 	movge.w	r1, #512	; 0x200
 8004e34:	f44f 7300 	movlt.w	r3, #512	; 0x200
 8004e38:	8011      	strhge	r1, [r2, #0]
  if (is_probe_away) { probe_invert_mask ^= PROBE_MASK; }
 8004e3a:	b100      	cbz	r0, 8004e3e <probe_configure_invert_mask+0x1e>
 8004e3c:	8013      	strh	r3, [r2, #0]
}
 8004e3e:	4770      	bx	lr
 8004e40:	200013ec 	.word	0x200013ec
 8004e44:	20001214 	.word	0x20001214

08004e48 <probe_get_state>:


// Returns the probe pin state. Triggered = true. Called by gcode parser and probe state monitor.
uint8_t probe_get_state() 
{ 
 8004e48:	b508      	push	{r3, lr}
#endif
#ifdef WIN32
	return 0;
#endif
#ifdef STM32F103C8
	return ((GPIO_ReadInputData(PROBE_PORT) & PROBE_MASK) ^ probe_invert_mask) != 0;
 8004e4a:	4805      	ldr	r0, [pc, #20]	; (8004e60 <probe_get_state+0x18>)
 8004e4c:	f7fc fa44 	bl	80012d8 <GPIO_ReadInputData>
 8004e50:	4b04      	ldr	r3, [pc, #16]	; (8004e64 <probe_get_state+0x1c>)
 8004e52:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8004e56:	881b      	ldrh	r3, [r3, #0]
#endif
}
 8004e58:	1a18      	subs	r0, r3, r0
 8004e5a:	bf18      	it	ne
 8004e5c:	2001      	movne	r0, #1
 8004e5e:	bd08      	pop	{r3, pc}
 8004e60:	40010c00 	.word	0x40010c00
 8004e64:	20001214 	.word	0x20001214

08004e68 <probe_state_monitor>:

// Monitors probe pin state and records the system position when detected. Called by the
// stepper ISR per ISR tick.
// NOTE: This function must be extremely efficient as to not bog down the stepper ISR.
void probe_state_monitor()
{
 8004e68:	b510      	push	{r4, lr}
	return ((GPIO_ReadInputData(PROBE_PORT) & PROBE_MASK) ^ probe_invert_mask) != 0;
 8004e6a:	480b      	ldr	r0, [pc, #44]	; (8004e98 <probe_state_monitor+0x30>)
 8004e6c:	f7fc fa34 	bl	80012d8 <GPIO_ReadInputData>
 8004e70:	4b0a      	ldr	r3, [pc, #40]	; (8004e9c <probe_state_monitor+0x34>)
  if (probe_get_state()) {
 8004e72:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	4283      	cmp	r3, r0
 8004e7a:	d00c      	beq.n	8004e96 <probe_state_monitor+0x2e>
    sys_probe_state = PROBE_OFF;
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	4a08      	ldr	r2, [pc, #32]	; (8004ea0 <probe_state_monitor+0x38>)
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 8004e80:	4908      	ldr	r1, [pc, #32]	; (8004ea4 <probe_state_monitor+0x3c>)
    sys_probe_state = PROBE_OFF;
 8004e82:	7010      	strb	r0, [r2, #0]
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 8004e84:	780a      	ldrb	r2, [r1, #0]
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 8004e86:	4c08      	ldr	r4, [pc, #32]	; (8004ea8 <probe_state_monitor+0x40>)
 8004e88:	4b08      	ldr	r3, [pc, #32]	; (8004eac <probe_state_monitor+0x44>)
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 8004e8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e8e:	700a      	strb	r2, [r1, #0]
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 8004e90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }
}
 8004e96:	bd10      	pop	{r4, pc}
 8004e98:	40010c00 	.word	0x40010c00
 8004e9c:	20001214 	.word	0x20001214
 8004ea0:	20000a04 	.word	0x20000a04
 8004ea4:	20000a08 	.word	0x20000a08
 8004ea8:	200009f4 	.word	0x200009f4
 8004eac:	200009e4 	.word	0x200009e4

08004eb0 <protocol_auto_cycle_start>:
// NOTE: This function is called from the main loop, buffer sync, and mc_line() only and executes
// when one of these conditions exist respectively: There are no more blocks sent (i.e. streaming
// is finished, single commands), a command that needs to wait for the motions in the buffer to
// execute calls a buffer sync, or the planner buffer is full and ready to go.
void protocol_auto_cycle_start()
{
 8004eb0:	b508      	push	{r3, lr}
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 8004eb2:	f7ff f8e9 	bl	8004088 <plan_get_current_block>
 8004eb6:	b120      	cbz	r0, 8004ec2 <protocol_auto_cycle_start+0x12>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
  }
}
 8004eb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8004ebc:	2002      	movs	r0, #2
 8004ebe:	f003 bb5b 	b.w	8008578 <system_set_exec_state_flag>
}
 8004ec2:	bd08      	pop	{r3, pc}

08004ec4 <protocol_exec_rt_system>:

// Executes run-time commands, when required. This function primarily operates as Grbl's state
// machine and controls the various real-time features Grbl has to offer.
// NOTE: Do not alter this unless you know exactly what you are doing!
void protocol_exec_rt_system()
{
 8004ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t rt_exec; // Temp variable to avoid calling volatile multiple times.
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 8004ec6:	4b98      	ldr	r3, [pc, #608]	; (8005128 <protocol_exec_rt_system+0x264>)
 8004ec8:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f040 8083 	bne.w	8004fd6 <protocol_exec_rt_system+0x112>
 8004ed0:	4c96      	ldr	r4, [pc, #600]	; (800512c <protocol_exec_rt_system+0x268>)
 8004ed2:	4d97      	ldr	r5, [pc, #604]	; (8005130 <protocol_exec_rt_system+0x26c>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
    }
    system_clear_exec_alarm(); // Clear alarm
  }

  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 8004ed4:	782b      	ldrb	r3, [r5, #0]
  if (rt_exec) {
 8004ed6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8004eda:	b393      	cbz	r3, 8004f42 <protocol_exec_rt_system+0x7e>

    // Execute system abort.
    if (rt_exec & EXEC_RESET) {
 8004edc:	06ea      	lsls	r2, r5, #27
 8004ede:	f100 80e2 	bmi.w	80050a6 <protocol_exec_rt_system+0x1e2>
      sys.abort = true;  // Only place this is set true.
      return; // Nothing else to do but exit.
    }

    // Execute and serial print status
    if (rt_exec & EXEC_STATUS_REPORT) {
 8004ee2:	07eb      	lsls	r3, r5, #31
 8004ee4:	f100 80fc 	bmi.w	80050e0 <protocol_exec_rt_system+0x21c>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
    }

    // NOTE: Once hold is initiated, the system immediately enters a suspend state to block all
    // main program processes until either reset or resumed. This ensures a hold completes safely.
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 8004ee8:	f015 0fe8 	tst.w	r5, #232	; 0xe8
 8004eec:	d00a      	beq.n	8004f04 <protocol_exec_rt_system+0x40>

      // State check for allowable states for hold methods.
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 8004eee:	7823      	ldrb	r3, [r4, #0]
 8004ef0:	079f      	lsls	r7, r3, #30
 8004ef2:	f000 8106 	beq.w	8005102 <protocol_exec_rt_system+0x23e>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8004ef6:	b26e      	sxtb	r6, r5
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
        }
        
      }

      if (rt_exec & EXEC_SLEEP) {
 8004ef8:	2e00      	cmp	r6, #0
 8004efa:	f2c0 814a 	blt.w	8005192 <protocol_exec_rt_system+0x2ce>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
        sys.state = STATE_SLEEP; 
      }

      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8004efe:	20e8      	movs	r0, #232	; 0xe8
 8004f00:	f003 fb44 	bl	800858c <system_clear_exec_state_flag>
    }

    // Execute a cycle start by starting the stepper interrupt to begin executing the blocks in queue.
    if (rt_exec & EXEC_CYCLE_START) {
 8004f04:	07ae      	lsls	r6, r5, #30
 8004f06:	d519      	bpl.n	8004f3c <protocol_exec_rt_system+0x78>
      // Block if called at same time as the hold commands: feed hold, motion cancel, and safety door.
      // Ensures auto-cycle-start doesn't resume a hold without an explicit user-input.
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 8004f08:	f015 0f68 	tst.w	r5, #104	; 0x68
 8004f0c:	d113      	bne.n	8004f36 <protocol_exec_rt_system+0x72>
        // Resume door state when parking motion has retracted and door has been closed.
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8004f0e:	7823      	ldrb	r3, [r4, #0]
 8004f10:	2b40      	cmp	r3, #64	; 0x40
 8004f12:	f000 8170 	beq.w	80051f6 <protocol_exec_rt_system+0x332>
            // they are complete, it will call CYCLE_START automatically to resume and exit the suspend.
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
          }
        }
        // Cycle start only when IDLE or when a hold is complete and ready to resume.
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f040 8156 	bne.w	80051c8 <protocol_exec_rt_system+0x304>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
          } else {
            // Start cycle only if queued motions exist in planner buffer and the motion is not canceled.
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 8004f20:	f7ff f8b2 	bl	8004088 <plan_get_current_block>
 8004f24:	b120      	cbz	r0, 8004f30 <protocol_exec_rt_system+0x6c>
 8004f26:	78a3      	ldrb	r3, [r4, #2]
 8004f28:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8004f2c:	f000 8198 	beq.w	8005260 <protocol_exec_rt_system+0x39c>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
              sys.state = STATE_CYCLE;
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
              st_wake_up();
            } else { // Otherwise, do nothing. Set and resume IDLE state.
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8004f30:	2300      	movs	r3, #0
 8004f32:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 8004f34:	7023      	strb	r3, [r4, #0]
            }
          }
        }
      }
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8004f36:	2002      	movs	r0, #2
 8004f38:	f003 fb28 	bl	800858c <system_clear_exec_state_flag>
    }

    if (rt_exec & EXEC_CYCLE_STOP) {
 8004f3c:	076b      	lsls	r3, r5, #29
 8004f3e:	f100 80b5 	bmi.w	80050ac <protocol_exec_rt_system+0x1e8>
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
    }
  }

  // Execute overrides.
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8004f42:	4b7c      	ldr	r3, [pc, #496]	; (8005134 <protocol_exec_rt_system+0x270>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8004f46:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d170      	bne.n	8005030 <protocol_exec_rt_system+0x16c>
      plan_update_velocity_profile_parameters();
      plan_cycle_reinitialize();
    }
  }

  rt_exec = sys_rt_exec_accessory_override;
 8004f4e:	4b7a      	ldr	r3, [pc, #488]	; (8005138 <protocol_exec_rt_system+0x274>)
 8004f50:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8004f52:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8004f56:	b923      	cbnz	r3, 8004f62 <protocol_exec_rt_system+0x9e>
      sys_rt_exec_debug = 0;
    }
  #endif

  // Reload step segment buffer
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 8004f58:	7823      	ldrb	r3, [r4, #0]
 8004f5a:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 8004f5e:	d136      	bne.n	8004fce <protocol_exec_rt_system+0x10a>
    st_prep_buffer();
  }

}
 8004f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 8004f62:	f003 fb49 	bl	80085f8 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 8004f66:	7aa2      	ldrb	r2, [r4, #10]
    if (rt_exec & EXEC_SPINDLE_OVR_RESET) { last_s_override = DEFAULT_SPINDLE_SPEED_OVERRIDE; }
 8004f68:	f015 0f01 	tst.w	r5, #1
 8004f6c:	bf0c      	ite	eq
 8004f6e:	4613      	moveq	r3, r2
 8004f70:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8004f72:	07a8      	lsls	r0, r5, #30
 8004f74:	bf44      	itt	mi
 8004f76:	330a      	addmi	r3, #10
 8004f78:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8004f7a:	0769      	lsls	r1, r5, #29
 8004f7c:	bf44      	itt	mi
 8004f7e:	3b0a      	submi	r3, #10
 8004f80:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8004f82:	072f      	lsls	r7, r5, #28
 8004f84:	bf44      	itt	mi
 8004f86:	3301      	addmi	r3, #1
 8004f88:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8004f8a:	06ee      	lsls	r6, r5, #27
 8004f8c:	bf44      	itt	mi
 8004f8e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8004f92:	b2db      	uxtbmi	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 8004f94:	2bc8      	cmp	r3, #200	; 0xc8
 8004f96:	bf28      	it	cs
 8004f98:	23c8      	movcs	r3, #200	; 0xc8
 8004f9a:	2b0a      	cmp	r3, #10
 8004f9c:	bf38      	it	cc
 8004f9e:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d006      	beq.n	8004fb2 <protocol_exec_rt_system+0xee>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8004fa4:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8004fa6:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 8004fa8:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8004faa:	f042 0308 	orr.w	r3, r2, #8
 8004fae:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8004fb0:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8004fb2:	06a8      	lsls	r0, r5, #26
      if (sys.state == STATE_HOLD) {
 8004fb4:	7823      	ldrb	r3, [r4, #0]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8004fb6:	d51d      	bpl.n	8004ff4 <protocol_exec_rt_system+0x130>
      if (sys.state == STATE_HOLD) {
 8004fb8:	2b10      	cmp	r3, #16
 8004fba:	d11b      	bne.n	8004ff4 <protocol_exec_rt_system+0x130>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8004fbc:	7ae3      	ldrb	r3, [r4, #11]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f040 8122 	bne.w	8005208 <protocol_exec_rt_system+0x344>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8004fc8:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8004fcc:	d118      	bne.n	8005000 <protocol_exec_rt_system+0x13c>
}
 8004fce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    st_prep_buffer();
 8004fd2:	f002 bb21 	b.w	8007618 <st_prep_buffer>
    sys.state = STATE_ALARM; // Set system alarm state
 8004fd6:	2601      	movs	r6, #1
 8004fd8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8004fdc:	4c53      	ldr	r4, [pc, #332]	; (800512c <protocol_exec_rt_system+0x268>)
    report_alarm_message(rt_exec);
 8004fde:	4628      	mov	r0, r5
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8004fe0:	3d01      	subs	r5, #1
    sys.state = STATE_ALARM; // Set system alarm state
 8004fe2:	7026      	strb	r6, [r4, #0]
    report_alarm_message(rt_exec);
 8004fe4:	f000 fb7a 	bl	80056dc <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8004fe8:	42b5      	cmp	r5, r6
 8004fea:	d97f      	bls.n	80050ec <protocol_exec_rt_system+0x228>
 8004fec:	4d50      	ldr	r5, [pc, #320]	; (8005130 <protocol_exec_rt_system+0x26c>)
    system_clear_exec_alarm(); // Clear alarm
 8004fee:	f003 fadf 	bl	80085b0 <system_clear_exec_alarm>
 8004ff2:	e76f      	b.n	8004ed4 <protocol_exec_rt_system+0x10>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8004ff4:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8004ff8:	d0af      	beq.n	8004f5a <protocol_exec_rt_system+0x96>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f040 80f6 	bne.w	80051ec <protocol_exec_rt_system+0x328>
        uint8_t coolant_state = gc_state.modal.coolant;
 8005000:	4f4e      	ldr	r7, [pc, #312]	; (800513c <protocol_exec_rt_system+0x278>)
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005002:	062a      	lsls	r2, r5, #24
        uint8_t coolant_state = gc_state.modal.coolant;
 8005004:	7a3e      	ldrb	r6, [r7, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005006:	d505      	bpl.n	8005014 <protocol_exec_rt_system+0x150>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 8005008:	0633      	lsls	r3, r6, #24
 800500a:	bf4c      	ite	mi
 800500c:	f006 067f 	andmi.w	r6, r6, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 8005010:	f046 0680 	orrpl.w	r6, r6, #128	; 0x80
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 8005014:	0668      	lsls	r0, r5, #25
 8005016:	d505      	bpl.n	8005024 <protocol_exec_rt_system+0x160>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 8005018:	0671      	lsls	r1, r6, #25
 800501a:	bf4c      	ite	mi
 800501c:	f006 06bf 	andmi.w	r6, r6, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 8005020:	f046 0640 	orrpl.w	r6, r6, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 8005024:	4630      	mov	r0, r6
 8005026:	f7fc fb01 	bl	800162c <coolant_set_state>
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 800502a:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 800502c:	723e      	strb	r6, [r7, #8]
 800502e:	e794      	b.n	8004f5a <protocol_exec_rt_system+0x96>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8005030:	f003 fada 	bl	80085e8 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 8005034:	7a21      	ldrb	r1, [r4, #8]
    if (rt_exec & EXEC_FEED_OVR_RESET) { new_f_override = DEFAULT_FEED_OVERRIDE; }
 8005036:	f015 0f01 	tst.w	r5, #1
 800503a:	bf0c      	ite	eq
 800503c:	460b      	moveq	r3, r1
 800503e:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 8005040:	07ae      	lsls	r6, r5, #30
 8005042:	bf44      	itt	mi
 8005044:	330a      	addmi	r3, #10
 8005046:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 8005048:	0768      	lsls	r0, r5, #29
 800504a:	bf44      	itt	mi
 800504c:	3b0a      	submi	r3, #10
 800504e:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 8005050:	072f      	lsls	r7, r5, #28
 8005052:	bf44      	itt	mi
 8005054:	3301      	addmi	r3, #1
 8005056:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 8005058:	06ee      	lsls	r6, r5, #27
 800505a:	bf44      	itt	mi
 800505c:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005060:	b2db      	uxtbmi	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 8005062:	2bc8      	cmp	r3, #200	; 0xc8
 8005064:	bf28      	it	cs
 8005066:	23c8      	movcs	r3, #200	; 0xc8
 8005068:	2b0a      	cmp	r3, #10
 800506a:	bf38      	it	cc
 800506c:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 800506e:	7a60      	ldrb	r0, [r4, #9]
    if (rt_exec & EXEC_RAPID_OVR_RESET) { new_r_override = DEFAULT_RAPID_OVERRIDE; }
 8005070:	f015 0f20 	tst.w	r5, #32
 8005074:	bf14      	ite	ne
 8005076:	2264      	movne	r2, #100	; 0x64
 8005078:	4602      	moveq	r2, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 800507a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800507e:	bf18      	it	ne
 8005080:	2232      	movne	r2, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 8005082:	f015 0f80 	tst.w	r5, #128	; 0x80
 8005086:	bf18      	it	ne
 8005088:	2219      	movne	r2, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 800508a:	4299      	cmp	r1, r3
 800508c:	d102      	bne.n	8005094 <protocol_exec_rt_system+0x1d0>
 800508e:	4282      	cmp	r2, r0
 8005090:	f43f af5d 	beq.w	8004f4e <protocol_exec_rt_system+0x8a>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005094:	2100      	movs	r1, #0
      sys.f_override = new_f_override;
 8005096:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 8005098:	7262      	strb	r2, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 800509a:	7321      	strb	r1, [r4, #12]
      plan_update_velocity_profile_parameters();
 800509c:	f7ff f866 	bl	800416c <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 80050a0:	f7ff fb76 	bl	8004790 <plan_cycle_reinitialize>
 80050a4:	e753      	b.n	8004f4e <protocol_exec_rt_system+0x8a>
      sys.abort = true;  // Only place this is set true.
 80050a6:	2301      	movs	r3, #1
 80050a8:	7063      	strb	r3, [r4, #1]
}
 80050aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80050ac:	7823      	ldrb	r3, [r4, #0]
 80050ae:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 80050b2:	d002      	beq.n	80050ba <protocol_exec_rt_system+0x1f6>
 80050b4:	78e3      	ldrb	r3, [r4, #3]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d071      	beq.n	800519e <protocol_exec_rt_system+0x2da>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 80050ba:	f994 2002 	ldrsb.w	r2, [r4, #2]
 80050be:	78a3      	ldrb	r3, [r4, #2]
 80050c0:	2a00      	cmp	r2, #0
 80050c2:	db70      	blt.n	80051a6 <protocol_exec_rt_system+0x2e2>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 80050c4:	f013 0220 	ands.w	r2, r3, #32
 80050c8:	d060      	beq.n	800518c <protocol_exec_rt_system+0x2c8>
          sys.state = STATE_SAFETY_DOOR;
 80050ca:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 80050cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 80050d0:	f043 0301 	orr.w	r3, r3, #1
 80050d4:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 80050d6:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 80050d8:	2004      	movs	r0, #4
 80050da:	f003 fa57 	bl	800858c <system_clear_exec_state_flag>
 80050de:	e730      	b.n	8004f42 <protocol_exec_rt_system+0x7e>
      report_realtime_status();
 80050e0:	f000 ff76 	bl	8005fd0 <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 80050e4:	2001      	movs	r0, #1
 80050e6:	f003 fa51 	bl	800858c <system_clear_exec_state_flag>
 80050ea:	e6fd      	b.n	8004ee8 <protocol_exec_rt_system+0x24>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 80050ec:	4630      	mov	r0, r6
 80050ee:	f000 fb0b 	bl	8005708 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 80050f2:	2010      	movs	r0, #16
 80050f4:	f003 fa4a 	bl	800858c <system_clear_exec_state_flag>
 80050f8:	4d0d      	ldr	r5, [pc, #52]	; (8005130 <protocol_exec_rt_system+0x26c>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 80050fa:	782b      	ldrb	r3, [r5, #0]
 80050fc:	06d9      	lsls	r1, r3, #27
 80050fe:	d5fc      	bpl.n	80050fa <protocol_exec_rt_system+0x236>
 8005100:	e775      	b.n	8004fee <protocol_exec_rt_system+0x12a>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 8005102:	f013 0f28 	tst.w	r3, #40	; 0x28
 8005106:	d01b      	beq.n	8005140 <protocol_exec_rt_system+0x27c>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 8005108:	78a2      	ldrb	r2, [r4, #2]
 800510a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800510e:	f000 8095 	beq.w	800523c <protocol_exec_rt_system+0x378>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8005112:	b26a      	sxtb	r2, r5
 8005114:	4616      	mov	r6, r2
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005116:	0668      	lsls	r0, r5, #25
 8005118:	d51c      	bpl.n	8005154 <protocol_exec_rt_system+0x290>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 800511a:	0699      	lsls	r1, r3, #26
 800511c:	d41a      	bmi.n	8005154 <protocol_exec_rt_system+0x290>
 800511e:	78a1      	ldrb	r1, [r4, #2]
 8005120:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005124:	e014      	b.n	8005150 <protocol_exec_rt_system+0x28c>
 8005126:	bf00      	nop
 8005128:	20000a06 	.word	0x20000a06
 800512c:	200009d0 	.word	0x200009d0
 8005130:	20000a08 	.word	0x20000a08
 8005134:	20000a07 	.word	0x20000a07
 8005138:	20000a05 	.word	0x20000a05
 800513c:	20000980 	.word	0x20000980
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1e6      	bne.n	8005112 <protocol_exec_rt_system+0x24e>
 8005144:	2201      	movs	r2, #1
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005146:	066e      	lsls	r6, r5, #25
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8005148:	70a2      	strb	r2, [r4, #2]
        if (rt_exec & EXEC_MOTION_CANCEL) {
 800514a:	d564      	bpl.n	8005216 <protocol_exec_rt_system+0x352>
 800514c:	2141      	movs	r1, #65	; 0x41
 800514e:	b26a      	sxtb	r2, r5
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8005150:	4616      	mov	r6, r2
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005152:	70a1      	strb	r1, [r4, #2]
        if (rt_exec & EXEC_FEED_HOLD) {
 8005154:	072a      	lsls	r2, r5, #28
 8005156:	d502      	bpl.n	800515e <protocol_exec_rt_system+0x29a>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005158:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 800515c:	d05e      	beq.n	800521c <protocol_exec_rt_system+0x358>
        if (rt_exec & EXEC_SAFETY_DOOR) {
 800515e:	06ab      	lsls	r3, r5, #26
 8005160:	f57f aeca 	bpl.w	8004ef8 <protocol_exec_rt_system+0x34>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 8005164:	2006      	movs	r0, #6
 8005166:	f000 facf 	bl	8005708 <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 800516a:	f994 2002 	ldrsb.w	r2, [r4, #2]
 800516e:	78a3      	ldrb	r3, [r4, #2]
 8005170:	2a00      	cmp	r2, #0
 8005172:	db07      	blt.n	8005184 <protocol_exec_rt_system+0x2c0>
            if (sys.state == STATE_SAFETY_DOOR) {
 8005174:	7822      	ldrb	r2, [r4, #0]
 8005176:	2a40      	cmp	r2, #64	; 0x40
 8005178:	f000 8081 	beq.w	800527e <protocol_exec_rt_system+0x3ba>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 800517c:	2a80      	cmp	r2, #128	; 0x80
 800517e:	d001      	beq.n	8005184 <protocol_exec_rt_system+0x2c0>
 8005180:	2240      	movs	r2, #64	; 0x40
 8005182:	7022      	strb	r2, [r4, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8005184:	f043 0320 	orr.w	r3, r3, #32
 8005188:	70a3      	strb	r3, [r4, #2]
 800518a:	e6b5      	b.n	8004ef8 <protocol_exec_rt_system+0x34>
          sys.suspend = SUSPEND_DISABLE;
 800518c:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 800518e:	7022      	strb	r2, [r4, #0]
 8005190:	e7a2      	b.n	80050d8 <protocol_exec_rt_system+0x214>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8005192:	7823      	ldrb	r3, [r4, #0]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d012      	beq.n	80051be <protocol_exec_rt_system+0x2fa>
        sys.state = STATE_SLEEP; 
 8005198:	2380      	movs	r3, #128	; 0x80
 800519a:	7023      	strb	r3, [r4, #0]
 800519c:	e6af      	b.n	8004efe <protocol_exec_rt_system+0x3a>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 800519e:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	da3d      	bge.n	8005222 <protocol_exec_rt_system+0x35e>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 80051a6:	2300      	movs	r3, #0
 80051a8:	7123      	strb	r3, [r4, #4]
          plan_reset();
 80051aa:	f7fe ff2b 	bl	8004004 <plan_reset>
          st_reset();
 80051ae:	f002 f8f5 	bl	800739c <st_reset>
          gc_sync_position();
 80051b2:	f7fc fb3f 	bl	8001834 <gc_sync_position>
          plan_sync_position();
 80051b6:	f7ff facb 	bl	8004750 <plan_sync_position>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 80051ba:	78a3      	ldrb	r3, [r4, #2]
 80051bc:	e782      	b.n	80050c4 <protocol_exec_rt_system+0x200>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 80051be:	78a3      	ldrb	r3, [r4, #2]
 80051c0:	f043 0305 	orr.w	r3, r3, #5
 80051c4:	70a3      	strb	r3, [r4, #2]
 80051c6:	e7e7      	b.n	8005198 <protocol_exec_rt_system+0x2d4>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 80051c8:	06da      	lsls	r2, r3, #27
 80051ca:	f57f aeb4 	bpl.w	8004f36 <protocol_exec_rt_system+0x72>
 80051ce:	78a2      	ldrb	r2, [r4, #2]
 80051d0:	07d2      	lsls	r2, r2, #31
 80051d2:	f57f aeb0 	bpl.w	8004f36 <protocol_exec_rt_system+0x72>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 80051d6:	2b10      	cmp	r3, #16
 80051d8:	f47f aea0 	bne.w	8004f1c <protocol_exec_rt_system+0x58>
 80051dc:	7ae3      	ldrb	r3, [r4, #11]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f43f ae9c 	beq.w	8004f1c <protocol_exec_rt_system+0x58>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 80051e4:	f043 0308 	orr.w	r3, r3, #8
 80051e8:	72e3      	strb	r3, [r4, #11]
 80051ea:	e6a4      	b.n	8004f36 <protocol_exec_rt_system+0x72>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 80051ec:	f013 0f18 	tst.w	r3, #24
 80051f0:	f43f aeb3 	beq.w	8004f5a <protocol_exec_rt_system+0x96>
 80051f4:	e704      	b.n	8005000 <protocol_exec_rt_system+0x13c>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 80051f6:	78a3      	ldrb	r3, [r4, #2]
 80051f8:	f013 0220 	ands.w	r2, r3, #32
 80051fc:	f47f ae9b 	bne.w	8004f36 <protocol_exec_rt_system+0x72>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 8005200:	06d8      	lsls	r0, r3, #27
 8005202:	d535      	bpl.n	8005270 <protocol_exec_rt_system+0x3ac>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8005204:	7022      	strb	r2, [r4, #0]
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005206:	e689      	b.n	8004f1c <protocol_exec_rt_system+0x58>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 8005208:	07d9      	lsls	r1, r3, #31
 800520a:	f57f aedd 	bpl.w	8004fc8 <protocol_exec_rt_system+0x104>
 800520e:	f043 0304 	orr.w	r3, r3, #4
 8005212:	72e3      	strb	r3, [r4, #11]
 8005214:	e6d8      	b.n	8004fc8 <protocol_exec_rt_system+0x104>
        if (rt_exec & EXEC_FEED_HOLD) {
 8005216:	072b      	lsls	r3, r5, #28
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8005218:	b26e      	sxtb	r6, r5
        if (rt_exec & EXEC_FEED_HOLD) {
 800521a:	d5a0      	bpl.n	800515e <protocol_exec_rt_system+0x29a>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 800521c:	2310      	movs	r3, #16
 800521e:	7023      	strb	r3, [r4, #0]
 8005220:	e79d      	b.n	800515e <protocol_exec_rt_system+0x29a>
        plan_cycle_reinitialize();
 8005222:	f7ff fab5 	bl	8004790 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 8005226:	7923      	ldrb	r3, [r4, #4]
 8005228:	079f      	lsls	r7, r3, #30
 800522a:	d503      	bpl.n	8005234 <protocol_exec_rt_system+0x370>
 800522c:	78a2      	ldrb	r2, [r4, #2]
 800522e:	f042 0201 	orr.w	r2, r2, #1
 8005232:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8005234:	f023 0306 	bic.w	r3, r3, #6
 8005238:	7123      	strb	r3, [r4, #4]
 800523a:	e74d      	b.n	80050d8 <protocol_exec_rt_system+0x214>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 800523c:	f002 f9d6 	bl	80075ec <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005240:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005242:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005244:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005246:	2b20      	cmp	r3, #32
 8005248:	f47f af7a 	bne.w	8005140 <protocol_exec_rt_system+0x27c>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 800524c:	b26a      	sxtb	r2, r5
 800524e:	2a00      	cmp	r2, #0
 8005250:	4616      	mov	r6, r2
 8005252:	f6ff af60 	blt.w	8005116 <protocol_exec_rt_system+0x252>
 8005256:	78a1      	ldrb	r1, [r4, #2]
 8005258:	f061 017f 	orn	r1, r1, #127	; 0x7f
 800525c:	70a1      	strb	r1, [r4, #2]
 800525e:	e75a      	b.n	8005116 <protocol_exec_rt_system+0x252>
              sys.state = STATE_CYCLE;
 8005260:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005262:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 8005264:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 8005266:	f002 f9d7 	bl	8007618 <st_prep_buffer>
              st_wake_up();
 800526a:	f001 fea1 	bl	8006fb0 <st_wake_up>
 800526e:	e662      	b.n	8004f36 <protocol_exec_rt_system+0x72>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8005270:	0759      	lsls	r1, r3, #29
 8005272:	f57f ae60 	bpl.w	8004f36 <protocol_exec_rt_system+0x72>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 8005276:	f043 0308 	orr.w	r3, r3, #8
 800527a:	70a3      	strb	r3, [r4, #2]
 800527c:	e65b      	b.n	8004f36 <protocol_exec_rt_system+0x72>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 800527e:	071f      	lsls	r7, r3, #28
 8005280:	f57f af7e 	bpl.w	8005180 <protocol_exec_rt_system+0x2bc>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 8005284:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 8005288:	f043 0302 	orr.w	r3, r3, #2
 800528c:	e778      	b.n	8005180 <protocol_exec_rt_system+0x2bc>
 800528e:	bf00      	nop

08005290 <protocol_exec_rt_suspend>:
// The system will enter this loop, create local variables for suspend tasks, and return to
// whatever function that invoked the suspend, such that Grbl resumes normal operation.
// This function is written in a way to promote custom parking motions. Simply use this as a
// template
static void protocol_exec_rt_suspend()
{
 8005290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005294:	b083      	sub	sp, #12
    #ifdef USE_LINE_NUMBERS
      pl_data->line_number = PARKING_MOTION_LINE_NUMBER;
    #endif
  #endif

  plan_block_t *block = plan_get_current_block();
 8005296:	f7fe fef7 	bl	8004088 <plan_get_current_block>
  uint8_t restore_condition;
  #ifdef VARIABLE_SPINDLE
    float restore_spindle_speed;
    if (block == NULL) {
 800529a:	2800      	cmp	r0, #0
 800529c:	f000 80e3 	beq.w	8005466 <protocol_exec_rt_suspend+0x1d6>
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
      restore_spindle_speed = gc_state.spindle_speed;
    } else {
      restore_condition = block->condition;
 80052a0:	7d86      	ldrb	r6, [r0, #22]
      restore_spindle_speed = block->spindle_speed;
 80052a2:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
    }
    #ifdef DISABLE_LASER_DURING_HOLD
      if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 80052a6:	4f8d      	ldr	r7, [pc, #564]	; (80054dc <protocol_exec_rt_suspend+0x24c>)
 80052a8:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80052ac:	079a      	lsls	r2, r3, #30
 80052ae:	f100 80c8 	bmi.w	8005442 <protocol_exec_rt_suspend+0x1b2>
  #else
    if (block == NULL) { restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant); }
    else { restore_condition = block->condition; }
  #endif

  while (sys.suspend) {
 80052b2:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80054e0 <protocol_exec_rt_suspend+0x250>
 80052b6:	f89b 4002 	ldrb.w	r4, [fp, #2]
 80052ba:	2c00      	cmp	r4, #0
 80052bc:	d049      	beq.n	8005352 <protocol_exec_rt_suspend+0xc2>
        // NOTE: Hold ensured as completed by condition check at the beginning of suspend routine.
        if (sys.spindle_stop_ovr) {
          // Handles beginning of spindle stop
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
              spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 80052be:	2500      	movs	r5, #0
                delay_sec(SAFETY_DOOR_COOLANT_DELAY, DELAY_MODE_SYS_SUSPEND);
 80052c0:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
                  delay_sec(SAFETY_DOOR_SPINDLE_DELAY, DELAY_MODE_SYS_SUSPEND);
 80052c4:	f04f 4a81 	mov.w	sl, #1082130432	; 0x40800000
    if (sys.abort) { return; }
 80052c8:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80052cc:	2a00      	cmp	r2, #0
 80052ce:	d140      	bne.n	8005352 <protocol_exec_rt_suspend+0xc2>
    if (sys.suspend & SUSPEND_HOLD_COMPLETE) {
 80052d0:	07e3      	lsls	r3, r4, #31
 80052d2:	d538      	bpl.n	8005346 <protocol_exec_rt_suspend+0xb6>
      if (sys.state & (STATE_SAFETY_DOOR | STATE_SLEEP)) {
 80052d4:	f89b 1000 	ldrb.w	r1, [fp]
 80052d8:	f011 00c0 	ands.w	r0, r1, #192	; 0xc0
 80052dc:	d03c      	beq.n	8005358 <protocol_exec_rt_suspend+0xc8>
        if (bit_isfalse(sys.suspend,SUSPEND_RETRACT_COMPLETE)) {
 80052de:	f014 0404 	ands.w	r4, r4, #4
 80052e2:	d062      	beq.n	80053aa <protocol_exec_rt_suspend+0x11a>
          if (sys.state == STATE_SLEEP) {
 80052e4:	2980      	cmp	r1, #128	; 0x80
 80052e6:	f000 80d5 	beq.w	8005494 <protocol_exec_rt_suspend+0x204>
          if (sys.state == STATE_SAFETY_DOOR) {
 80052ea:	2940      	cmp	r1, #64	; 0x40
 80052ec:	f000 809d 	beq.w	800542a <protocol_exec_rt_suspend+0x19a>
          if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 80052f0:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80052f4:	0718      	lsls	r0, r3, #28
 80052f6:	d526      	bpl.n	8005346 <protocol_exec_rt_suspend+0xb6>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 80052f8:	4c7a      	ldr	r4, [pc, #488]	; (80054e4 <protocol_exec_rt_suspend+0x254>)
 80052fa:	7a62      	ldrb	r2, [r4, #9]
 80052fc:	2a00      	cmp	r2, #0
 80052fe:	f000 8085 	beq.w	800540c <protocol_exec_rt_suspend+0x17c>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 8005302:	0799      	lsls	r1, r3, #30
 8005304:	d41f      	bmi.n	8005346 <protocol_exec_rt_suspend+0xb6>
                if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 8005306:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800530a:	0792      	lsls	r2, r2, #30
 800530c:	d573      	bpl.n	80053f6 <protocol_exec_rt_suspend+0x166>
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800530e:	f89b 2004 	ldrb.w	r2, [fp, #4]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8005312:	7a21      	ldrb	r1, [r4, #8]
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005314:	f042 0208 	orr.w	r2, r2, #8
 8005318:	f88b 2004 	strb.w	r2, [fp, #4]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 800531c:	b161      	cbz	r1, 8005338 <protocol_exec_rt_suspend+0xa8>
                coolant_set_state((restore_condition & (PL_COND_FLAG_COOLANT_FLOOD | PL_COND_FLAG_COOLANT_FLOOD)));
 800531e:	f006 0040 	and.w	r0, r6, #64	; 0x40
 8005322:	f7fc f983 	bl	800162c <coolant_set_state>
                delay_sec(SAFETY_DOOR_COOLANT_DELAY, DELAY_MODE_SYS_SUSPEND);
 8005326:	2101      	movs	r1, #1
 8005328:	4648      	mov	r0, r9
 800532a:	f7fe fc47 	bl	8003bbc <delay_sec>
            if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 800532e:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8005332:	f003 0202 	and.w	r2, r3, #2
 8005336:	b932      	cbnz	r2, 8005346 <protocol_exec_rt_suspend+0xb6>
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 8005338:	f043 0310 	orr.w	r3, r3, #16
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 800533c:	2002      	movs	r0, #2
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 800533e:	f88b 3002 	strb.w	r3, [fp, #2]
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 8005342:	f003 f919 	bl	8008578 <system_set_exec_state_flag>
        }

      }
    }

    protocol_exec_rt_system();
 8005346:	f7ff fdbd 	bl	8004ec4 <protocol_exec_rt_system>
  while (sys.suspend) {
 800534a:	f89b 4002 	ldrb.w	r4, [fp, #2]
 800534e:	2c00      	cmp	r4, #0
 8005350:	d1ba      	bne.n	80052c8 <protocol_exec_rt_suspend+0x38>

  }
}
 8005352:	b003      	add	sp, #12
 8005354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (sys.spindle_stop_ovr) {
 8005358:	f89b 300b 	ldrb.w	r3, [fp, #11]
 800535c:	b17b      	cbz	r3, 800537e <protocol_exec_rt_suspend+0xee>
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
 800535e:	079c      	lsls	r4, r3, #30
 8005360:	d53c      	bpl.n	80053dc <protocol_exec_rt_suspend+0x14c>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8005362:	4b60      	ldr	r3, [pc, #384]	; (80054e4 <protocol_exec_rt_suspend+0x254>)
 8005364:	7a5b      	ldrb	r3, [r3, #9]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d16f      	bne.n	800544a <protocol_exec_rt_suspend+0x1ba>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 800536a:	2300      	movs	r3, #0
 800536c:	f88b 300b 	strb.w	r3, [fp, #11]
    protocol_exec_rt_system();
 8005370:	f7ff fda8 	bl	8004ec4 <protocol_exec_rt_system>
  while (sys.suspend) {
 8005374:	f89b 4002 	ldrb.w	r4, [fp, #2]
 8005378:	2c00      	cmp	r4, #0
 800537a:	d1a5      	bne.n	80052c8 <protocol_exec_rt_suspend+0x38>
 800537c:	e7e9      	b.n	8005352 <protocol_exec_rt_suspend+0xc2>
          if (bit_istrue(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 800537e:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8005382:	071b      	lsls	r3, r3, #28
 8005384:	d5df      	bpl.n	8005346 <protocol_exec_rt_suspend+0xb6>
            spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 8005386:	4641      	mov	r1, r8
 8005388:	f006 0030 	and.w	r0, r6, #48	; 0x30
 800538c:	f001 fccc 	bl	8006d28 <spindle_set_state>
            bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005390:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8005394:	f023 0308 	bic.w	r3, r3, #8
 8005398:	f88b 3004 	strb.w	r3, [fp, #4]
    protocol_exec_rt_system();
 800539c:	f7ff fd92 	bl	8004ec4 <protocol_exec_rt_system>
  while (sys.suspend) {
 80053a0:	f89b 4002 	ldrb.w	r4, [fp, #2]
 80053a4:	2c00      	cmp	r4, #0
 80053a6:	d18f      	bne.n	80052c8 <protocol_exec_rt_suspend+0x38>
 80053a8:	e7d3      	b.n	8005352 <protocol_exec_rt_suspend+0xc2>
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 80053aa:	4629      	mov	r1, r5
 80053ac:	4620      	mov	r0, r4
          sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED;
 80053ae:	f88b 400b 	strb.w	r4, [fp, #11]
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 80053b2:	f001 fcb9 	bl	8006d28 <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE);     // De-energize
 80053b6:	4620      	mov	r0, r4
 80053b8:	f7fc f938 	bl	800162c <coolant_set_state>
          sys.suspend &= ~(SUSPEND_RESTART_RETRACT);
 80053bc:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80053c0:	f023 0302 	bic.w	r3, r3, #2
          sys.suspend |= SUSPEND_RETRACT_COMPLETE;
 80053c4:	f043 0304 	orr.w	r3, r3, #4
 80053c8:	f88b 3002 	strb.w	r3, [fp, #2]
    protocol_exec_rt_system();
 80053cc:	f7ff fd7a 	bl	8004ec4 <protocol_exec_rt_system>
  while (sys.suspend) {
 80053d0:	f89b 4002 	ldrb.w	r4, [fp, #2]
 80053d4:	2c00      	cmp	r4, #0
 80053d6:	f47f af77 	bne.w	80052c8 <protocol_exec_rt_suspend+0x38>
 80053da:	e7ba      	b.n	8005352 <protocol_exec_rt_suspend+0xc2>
          } else if (sys.spindle_stop_ovr & (SPINDLE_STOP_OVR_RESTORE | SPINDLE_STOP_OVR_RESTORE_CYCLE)) {
 80053dc:	f013 0f0c 	tst.w	r3, #12
 80053e0:	d0b1      	beq.n	8005346 <protocol_exec_rt_suspend+0xb6>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 80053e2:	4a40      	ldr	r2, [pc, #256]	; (80054e4 <protocol_exec_rt_suspend+0x254>)
 80053e4:	7a52      	ldrb	r2, [r2, #9]
 80053e6:	2a00      	cmp	r2, #0
 80053e8:	d144      	bne.n	8005474 <protocol_exec_rt_suspend+0x1e4>
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 80053ea:	071a      	lsls	r2, r3, #28
 80053ec:	d5bd      	bpl.n	800536a <protocol_exec_rt_suspend+0xda>
              system_set_exec_state_flag(EXEC_CYCLE_START);  // Set to resume program.
 80053ee:	2002      	movs	r0, #2
 80053f0:	f003 f8c2 	bl	8008578 <system_set_exec_state_flag>
 80053f4:	e7b9      	b.n	800536a <protocol_exec_rt_suspend+0xda>
                  spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 80053f6:	4641      	mov	r1, r8
 80053f8:	f006 0030 	and.w	r0, r6, #48	; 0x30
 80053fc:	f001 fc94 	bl	8006d28 <spindle_set_state>
                  delay_sec(SAFETY_DOOR_SPINDLE_DELAY, DELAY_MODE_SYS_SUSPEND);
 8005400:	2101      	movs	r1, #1
 8005402:	4650      	mov	r0, sl
 8005404:	f7fe fbda 	bl	8003bbc <delay_sec>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 8005408:	f89b 3002 	ldrb.w	r3, [fp, #2]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 800540c:	7a21      	ldrb	r1, [r4, #8]
 800540e:	f003 0202 	and.w	r2, r3, #2
 8005412:	2900      	cmp	r1, #0
 8005414:	d08f      	beq.n	8005336 <protocol_exec_rt_suspend+0xa6>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 8005416:	2a00      	cmp	r2, #0
 8005418:	d081      	beq.n	800531e <protocol_exec_rt_suspend+0x8e>
    protocol_exec_rt_system();
 800541a:	f7ff fd53 	bl	8004ec4 <protocol_exec_rt_system>
  while (sys.suspend) {
 800541e:	f89b 4002 	ldrb.w	r4, [fp, #2]
 8005422:	2c00      	cmp	r4, #0
 8005424:	f47f af50 	bne.w	80052c8 <protocol_exec_rt_suspend+0x38>
 8005428:	e793      	b.n	8005352 <protocol_exec_rt_suspend+0xc2>
            if (!(system_check_safety_door_ajar())) {
 800542a:	f002 fe71 	bl	8008110 <system_check_safety_door_ajar>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 800542e:	f89b 3002 	ldrb.w	r3, [fp, #2]
            if (!(system_check_safety_door_ajar())) {
 8005432:	2800      	cmp	r0, #0
 8005434:	f47f af5e 	bne.w	80052f4 <protocol_exec_rt_suspend+0x64>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 8005438:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800543c:	f88b 3002 	strb.w	r3, [fp, #2]
 8005440:	e758      	b.n	80052f4 <protocol_exec_rt_suspend+0x64>
        system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP);
 8005442:	2020      	movs	r0, #32
 8005444:	f003 f8c6 	bl	80085d4 <system_set_exec_accessory_override_flag>
 8005448:	e733      	b.n	80052b2 <protocol_exec_rt_suspend+0x22>
              spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 800544a:	4629      	mov	r1, r5
 800544c:	f001 fc6c 	bl	8006d28 <spindle_set_state>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_ENABLED; // Set stop override state to enabled, if de-energized.
 8005450:	2301      	movs	r3, #1
 8005452:	f88b 300b 	strb.w	r3, [fp, #11]
    protocol_exec_rt_system();
 8005456:	f7ff fd35 	bl	8004ec4 <protocol_exec_rt_system>
  while (sys.suspend) {
 800545a:	f89b 4002 	ldrb.w	r4, [fp, #2]
 800545e:	2c00      	cmp	r4, #0
 8005460:	f47f af32 	bne.w	80052c8 <protocol_exec_rt_suspend+0x38>
 8005464:	e775      	b.n	8005352 <protocol_exec_rt_suspend+0xc2>
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8005466:	4b1f      	ldr	r3, [pc, #124]	; (80054e4 <protocol_exec_rt_suspend+0x254>)
 8005468:	7a5e      	ldrb	r6, [r3, #9]
 800546a:	7a1a      	ldrb	r2, [r3, #8]
      restore_spindle_speed = gc_state.spindle_speed;
 800546c:	f8d3 800c 	ldr.w	r8, [r3, #12]
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8005470:	4316      	orrs	r6, r2
      restore_spindle_speed = gc_state.spindle_speed;
 8005472:	e718      	b.n	80052a6 <protocol_exec_rt_suspend+0x16>
              report_feedback_message(MESSAGE_SPINDLE_RESTORE);
 8005474:	200a      	movs	r0, #10
 8005476:	f000 f947 	bl	8005708 <report_feedback_message>
              if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 800547a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800547e:	0799      	lsls	r1, r3, #30
 8005480:	d523      	bpl.n	80054ca <protocol_exec_rt_suspend+0x23a>
                bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005482:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8005486:	f043 0308 	orr.w	r3, r3, #8
 800548a:	f88b 3004 	strb.w	r3, [fp, #4]
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 800548e:	f89b 300b 	ldrb.w	r3, [fp, #11]
 8005492:	e7aa      	b.n	80053ea <protocol_exec_rt_suspend+0x15a>
            report_feedback_message(MESSAGE_SLEEP_MODE);
 8005494:	200b      	movs	r0, #11
 8005496:	9201      	str	r2, [sp, #4]
 8005498:	f000 f936 	bl	8005708 <report_feedback_message>
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 800549c:	9a01      	ldr	r2, [sp, #4]
 800549e:	2100      	movs	r1, #0
 80054a0:	4610      	mov	r0, r2
 80054a2:	f001 fc41 	bl	8006d28 <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE); // De-energize
 80054a6:	9a01      	ldr	r2, [sp, #4]
 80054a8:	4610      	mov	r0, r2
 80054aa:	f7fc f8bf 	bl	800162c <coolant_set_state>
            st_go_idle(); // Disable steppers
 80054ae:	f001 fdc5 	bl	800703c <st_go_idle>
            while (!(sys.abort)) { protocol_exec_rt_system(); } // Do nothing until reset.
 80054b2:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f47f af4b 	bne.w	8005352 <protocol_exec_rt_suspend+0xc2>
 80054bc:	f7ff fd02 	bl	8004ec4 <protocol_exec_rt_system>
 80054c0:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0f9      	beq.n	80054bc <protocol_exec_rt_suspend+0x22c>
 80054c8:	e743      	b.n	8005352 <protocol_exec_rt_suspend+0xc2>
                spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 80054ca:	4641      	mov	r1, r8
 80054cc:	f006 0030 	and.w	r0, r6, #48	; 0x30
 80054d0:	f001 fc2a 	bl	8006d28 <spindle_set_state>
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 80054d4:	f89b 300b 	ldrb.w	r3, [fp, #11]
 80054d8:	e787      	b.n	80053ea <protocol_exec_rt_suspend+0x15a>
 80054da:	bf00      	nop
 80054dc:	200013ec 	.word	0x200013ec
 80054e0:	200009d0 	.word	0x200009d0
 80054e4:	20000980 	.word	0x20000980

080054e8 <protocol_execute_realtime>:
{
 80054e8:	b508      	push	{r3, lr}
  protocol_exec_rt_system();
 80054ea:	f7ff fceb 	bl	8004ec4 <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80054ee:	4b04      	ldr	r3, [pc, #16]	; (8005500 <protocol_execute_realtime+0x18>)
 80054f0:	789b      	ldrb	r3, [r3, #2]
 80054f2:	b903      	cbnz	r3, 80054f6 <protocol_execute_realtime+0xe>
}
 80054f4:	bd08      	pop	{r3, pc}
 80054f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80054fa:	f7ff bec9 	b.w	8005290 <protocol_exec_rt_suspend>
 80054fe:	bf00      	nop
 8005500:	200009d0 	.word	0x200009d0

08005504 <protocol_main_loop>:
{
 8005504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE)) {
 8005508:	4b56      	ldr	r3, [pc, #344]	; (8005664 <protocol_main_loop+0x160>)
 800550a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800550e:	071a      	lsls	r2, r3, #28
 8005510:	f100 808e 	bmi.w	8005630 <protocol_main_loop+0x12c>
 8005514:	4e54      	ldr	r6, [pc, #336]	; (8005668 <protocol_main_loop+0x164>)
  if (sys.state & (STATE_ALARM | STATE_SLEEP)) {
 8005516:	7833      	ldrb	r3, [r6, #0]
 8005518:	f013 0381 	ands.w	r3, r3, #129	; 0x81
 800551c:	d073      	beq.n	8005606 <protocol_main_loop+0x102>
    report_feedback_message(MESSAGE_ALARM_LOCK);
 800551e:	2002      	movs	r0, #2
 8005520:	f000 f8f2 	bl	8005708 <report_feedback_message>
    sys.state = STATE_ALARM; // Ensure alarm state is set.
 8005524:	2301      	movs	r3, #1
 8005526:	7033      	strb	r3, [r6, #0]
        line_flags = 0;
 8005528:	2400      	movs	r4, #0
 800552a:	4625      	mov	r5, r4
        line[char_counter] = 0; // Set string termination character.
 800552c:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800566c <protocol_main_loop+0x168>
    while((c = serial_read()) != SERIAL_NO_DATA) {
 8005530:	f000 ff84 	bl	800643c <serial_read>
 8005534:	28ff      	cmp	r0, #255	; 0xff
 8005536:	d00f      	beq.n	8005558 <protocol_main_loop+0x54>
      if ((c == '\n') || (c == '\r')) { // End of line reached
 8005538:	280a      	cmp	r0, #10
 800553a:	d01d      	beq.n	8005578 <protocol_main_loop+0x74>
 800553c:	280d      	cmp	r0, #13
 800553e:	d01b      	beq.n	8005578 <protocol_main_loop+0x74>
        if (line_flags) {
 8005540:	2d00      	cmp	r5, #0
 8005542:	d035      	beq.n	80055b0 <protocol_main_loop+0xac>
          if (c == ')') {
 8005544:	2829      	cmp	r0, #41	; 0x29
 8005546:	d1f3      	bne.n	8005530 <protocol_main_loop+0x2c>
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 8005548:	07ab      	lsls	r3, r5, #30
 800554a:	d5f1      	bpl.n	8005530 <protocol_main_loop+0x2c>
    while((c = serial_read()) != SERIAL_NO_DATA) {
 800554c:	f000 ff76 	bl	800643c <serial_read>
 8005550:	28ff      	cmp	r0, #255	; 0xff
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 8005552:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    while((c = serial_read()) != SERIAL_NO_DATA) {
 8005556:	d1ef      	bne.n	8005538 <protocol_main_loop+0x34>
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 8005558:	f7fe fd96 	bl	8004088 <plan_get_current_block>
 800555c:	b110      	cbz	r0, 8005564 <protocol_main_loop+0x60>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 800555e:	2002      	movs	r0, #2
 8005560:	f003 f80a 	bl	8008578 <system_set_exec_state_flag>
  protocol_exec_rt_system();
 8005564:	f7ff fcae 	bl	8004ec4 <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005568:	78b3      	ldrb	r3, [r6, #2]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d139      	bne.n	80055e2 <protocol_main_loop+0xde>
    if (sys.abort) { return; } // Bail to main() program loop to reset system.
 800556e:	7873      	ldrb	r3, [r6, #1]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0dd      	beq.n	8005530 <protocol_main_loop+0x2c>
}
 8005574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  protocol_exec_rt_system();
 8005578:	f7ff fca4 	bl	8004ec4 <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 800557c:	78b3      	ldrb	r3, [r6, #2]
 800557e:	bb1b      	cbnz	r3, 80055c8 <protocol_main_loop+0xc4>
        if (sys.abort) { return; } // Bail to calling function upon system abort
 8005580:	7877      	ldrb	r7, [r6, #1]
 8005582:	2f00      	cmp	r7, #0
 8005584:	d1f6      	bne.n	8005574 <protocol_main_loop+0x70>
        line[char_counter] = 0; // Set string termination character.
 8005586:	f808 7004 	strb.w	r7, [r8, r4]
				LedBlink();
 800558a:	f7fd ffb5 	bl	80034f8 <LedBlink>
        if (line_flags & LINE_FLAG_OVERFLOW) {
 800558e:	f015 0501 	ands.w	r5, r5, #1
 8005592:	d11c      	bne.n	80055ce <protocol_main_loop+0xca>
        } else if (line[0] == 0) {
 8005594:	f898 4000 	ldrb.w	r4, [r8]
 8005598:	b1fc      	cbz	r4, 80055da <protocol_main_loop+0xd6>
        } else if (line[0] == '$') {
 800559a:	2c24      	cmp	r4, #36	; 0x24
 800559c:	d02a      	beq.n	80055f4 <protocol_main_loop+0xf0>
        } else if (sys.state & (STATE_ALARM | STATE_JOG)) {
 800559e:	7834      	ldrb	r4, [r6, #0]
 80055a0:	f014 0421 	ands.w	r4, r4, #33	; 0x21
 80055a4:	d020      	beq.n	80055e8 <protocol_main_loop+0xe4>
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 80055a6:	2009      	movs	r0, #9
 80055a8:	f000 f880 	bl	80056ac <report_status_message>
        char_counter = 0;
 80055ac:	462c      	mov	r4, r5
 80055ae:	e7bf      	b.n	8005530 <protocol_main_loop+0x2c>
          if (c <= ' ') {
 80055b0:	2820      	cmp	r0, #32
 80055b2:	d9bd      	bls.n	8005530 <protocol_main_loop+0x2c>
          } else if (c == '/') {
 80055b4:	282f      	cmp	r0, #47	; 0x2f
 80055b6:	d0bb      	beq.n	8005530 <protocol_main_loop+0x2c>
          } else if (c == '(') {
 80055b8:	2828      	cmp	r0, #40	; 0x28
 80055ba:	d022      	beq.n	8005602 <protocol_main_loop+0xfe>
          } else if (c == ';') {
 80055bc:	283b      	cmp	r0, #59	; 0x3b
 80055be:	d035      	beq.n	800562c <protocol_main_loop+0x128>
          } else if (char_counter >= (LINE_BUFFER_SIZE-1)) {
 80055c0:	2c4e      	cmp	r4, #78	; 0x4e
 80055c2:	d928      	bls.n	8005616 <protocol_main_loop+0x112>
            line_flags |= LINE_FLAG_OVERFLOW;
 80055c4:	2501      	movs	r5, #1
 80055c6:	e7b3      	b.n	8005530 <protocol_main_loop+0x2c>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80055c8:	f7ff fe62 	bl	8005290 <protocol_exec_rt_suspend>
 80055cc:	e7d8      	b.n	8005580 <protocol_main_loop+0x7c>
          report_status_message(STATUS_OVERFLOW);
 80055ce:	200b      	movs	r0, #11
        char_counter = 0;
 80055d0:	463c      	mov	r4, r7
          report_status_message(STATUS_OVERFLOW);
 80055d2:	f000 f86b 	bl	80056ac <report_status_message>
        line_flags = 0;
 80055d6:	463d      	mov	r5, r7
 80055d8:	e7aa      	b.n	8005530 <protocol_main_loop+0x2c>
          report_status_message(STATUS_OK);
 80055da:	4620      	mov	r0, r4
 80055dc:	f000 f866 	bl	80056ac <report_status_message>
 80055e0:	e7a6      	b.n	8005530 <protocol_main_loop+0x2c>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80055e2:	f7ff fe55 	bl	8005290 <protocol_exec_rt_suspend>
 80055e6:	e7c2      	b.n	800556e <protocol_main_loop+0x6a>
          report_status_message(gc_execute_line(line));
 80055e8:	4640      	mov	r0, r8
 80055ea:	f7fc f92b 	bl	8001844 <gc_execute_line>
 80055ee:	f000 f85d 	bl	80056ac <report_status_message>
 80055f2:	e79d      	b.n	8005530 <protocol_main_loop+0x2c>
          report_status_message(system_execute_line(line));
 80055f4:	4640      	mov	r0, r8
 80055f6:	f002 fdb1 	bl	800815c <system_execute_line>
 80055fa:	f000 f857 	bl	80056ac <report_status_message>
        char_counter = 0;
 80055fe:	462c      	mov	r4, r5
 8005600:	e796      	b.n	8005530 <protocol_main_loop+0x2c>
            line_flags |= LINE_FLAG_COMMENT_PARENTHESES;
 8005602:	2502      	movs	r5, #2
 8005604:	e794      	b.n	8005530 <protocol_main_loop+0x2c>
    sys.state = STATE_IDLE;
 8005606:	7033      	strb	r3, [r6, #0]
    if (system_check_safety_door_ajar()) {
 8005608:	f002 fd82 	bl	8008110 <system_check_safety_door_ajar>
 800560c:	b9e0      	cbnz	r0, 8005648 <protocol_main_loop+0x144>
    system_execute_startup(line); // Execute startup script.
 800560e:	4817      	ldr	r0, [pc, #92]	; (800566c <protocol_main_loop+0x168>)
 8005610:	f002 fd80 	bl	8008114 <system_execute_startup>
 8005614:	e788      	b.n	8005528 <protocol_main_loop+0x24>
          } else if (c >= 'a' && c <= 'z') { // Upcase lowercase
 8005616:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b19      	cmp	r3, #25
            line[char_counter++] = c-'a'+'A';
 800561e:	bf98      	it	ls
 8005620:	3820      	subls	r0, #32
            line[char_counter++] = c;
 8005622:	f808 0004 	strb.w	r0, [r8, r4]
 8005626:	3401      	adds	r4, #1
 8005628:	b2e4      	uxtb	r4, r4
 800562a:	e781      	b.n	8005530 <protocol_main_loop+0x2c>
            line_flags |= LINE_FLAG_COMMENT_SEMICOLON;
 800562c:	2504      	movs	r5, #4
 800562e:	e77f      	b.n	8005530 <protocol_main_loop+0x2c>
      if (limits_get_state()) {
 8005630:	f7fd fbda 	bl	8002de8 <limits_get_state>
 8005634:	2800      	cmp	r0, #0
 8005636:	f43f af6d 	beq.w	8005514 <protocol_main_loop+0x10>
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 800563a:	2301      	movs	r3, #1
 800563c:	4e0a      	ldr	r6, [pc, #40]	; (8005668 <protocol_main_loop+0x164>)
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 800563e:	2007      	movs	r0, #7
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 8005640:	7033      	strb	r3, [r6, #0]
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 8005642:	f000 f861 	bl	8005708 <report_feedback_message>
 8005646:	e766      	b.n	8005516 <protocol_main_loop+0x12>
      bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 8005648:	4a09      	ldr	r2, [pc, #36]	; (8005670 <protocol_main_loop+0x16c>)
 800564a:	7813      	ldrb	r3, [r2, #0]
 800564c:	f043 0320 	orr.w	r3, r3, #32
 8005650:	7013      	strb	r3, [r2, #0]
  protocol_exec_rt_system();
 8005652:	f7ff fc37 	bl	8004ec4 <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005656:	78b3      	ldrb	r3, [r6, #2]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0d8      	beq.n	800560e <protocol_main_loop+0x10a>
 800565c:	f7ff fe18 	bl	8005290 <protocol_exec_rt_suspend>
 8005660:	e7d5      	b.n	800560e <protocol_main_loop+0x10a>
 8005662:	bf00      	nop
 8005664:	200013ec 	.word	0x200013ec
 8005668:	200009d0 	.word	0x200009d0
 800566c:	20001218 	.word	0x20001218
 8005670:	20000a08 	.word	0x20000a08

08005674 <protocol_buffer_synchronize>:
{
 8005674:	b510      	push	{r4, lr}
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 8005676:	f7fe fd07 	bl	8004088 <plan_get_current_block>
 800567a:	b110      	cbz	r0, 8005682 <protocol_buffer_synchronize+0xe>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 800567c:	2002      	movs	r0, #2
 800567e:	f002 ff7b 	bl	8008578 <system_set_exec_state_flag>
 8005682:	4c09      	ldr	r4, [pc, #36]	; (80056a8 <protocol_buffer_synchronize+0x34>)
  protocol_exec_rt_system();
 8005684:	f7ff fc1e 	bl	8004ec4 <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005688:	78a3      	ldrb	r3, [r4, #2]
 800568a:	b94b      	cbnz	r3, 80056a0 <protocol_buffer_synchronize+0x2c>
    if (sys.abort) { return; } // Check for system abort
 800568c:	7863      	ldrb	r3, [r4, #1]
 800568e:	b933      	cbnz	r3, 800569e <protocol_buffer_synchronize+0x2a>
  } while (plan_get_current_block() || (sys.state == STATE_CYCLE));
 8005690:	f7fe fcfa 	bl	8004088 <plan_get_current_block>
 8005694:	2800      	cmp	r0, #0
 8005696:	d1f5      	bne.n	8005684 <protocol_buffer_synchronize+0x10>
 8005698:	7823      	ldrb	r3, [r4, #0]
 800569a:	2b08      	cmp	r3, #8
 800569c:	d0f2      	beq.n	8005684 <protocol_buffer_synchronize+0x10>
}
 800569e:	bd10      	pop	{r4, pc}
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80056a0:	f7ff fdf6 	bl	8005290 <protocol_exec_rt_suspend>
 80056a4:	e7f2      	b.n	800568c <protocol_buffer_synchronize+0x18>
 80056a6:	bf00      	nop
 80056a8:	200009d0 	.word	0x200009d0

080056ac <report_status_message>:
// operation. Errors events can originate from the g-code parser, settings module, or asynchronously
// from a critical error, such as a triggered hard limit. Interface should always monitor for these
// responses.
void report_status_message(uint8_t status_code)
{
  switch(status_code) {
 80056ac:	b910      	cbnz	r0, 80056b4 <report_status_message+0x8>
    case STATUS_OK: // STATUS_OK
      printPgmString(PSTR("ok\r\n")); break;
 80056ae:	4808      	ldr	r0, [pc, #32]	; (80056d0 <report_status_message+0x24>)
 80056b0:	f7ff b87e 	b.w	80047b0 <printString>
{
 80056b4:	b510      	push	{r4, lr}
 80056b6:	4604      	mov	r4, r0
    default:
      printPgmString(PSTR("error:"));
 80056b8:	4806      	ldr	r0, [pc, #24]	; (80056d4 <report_status_message+0x28>)
 80056ba:	f7ff f879 	bl	80047b0 <printString>
      print_uint8_base10(status_code);
 80056be:	4620      	mov	r0, r4
 80056c0:	f7ff f882 	bl	80047c8 <print_uint8_base10>
      report_util_line_feed();
  }
}
 80056c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80056c8:	4803      	ldr	r0, [pc, #12]	; (80056d8 <report_status_message+0x2c>)
 80056ca:	f7ff b871 	b.w	80047b0 <printString>
 80056ce:	bf00      	nop
 80056d0:	0800ad0c 	.word	0x0800ad0c
 80056d4:	0800ad14 	.word	0x0800ad14
 80056d8:	0800ad1c 	.word	0x0800ad1c

080056dc <report_alarm_message>:

// Prints alarm messages.
void report_alarm_message(uint8_t alarm_code)
{
 80056dc:	b510      	push	{r4, lr}
 80056de:	4604      	mov	r4, r0
  printPgmString(PSTR("ALARM:"));
 80056e0:	4807      	ldr	r0, [pc, #28]	; (8005700 <report_alarm_message+0x24>)
 80056e2:	f7ff f865 	bl	80047b0 <printString>
  print_uint8_base10(alarm_code);
 80056e6:	4620      	mov	r0, r4
 80056e8:	f7ff f86e 	bl	80047c8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80056ec:	4805      	ldr	r0, [pc, #20]	; (8005704 <report_alarm_message+0x28>)
 80056ee:	f7ff f85f 	bl	80047b0 <printString>
  report_util_line_feed();
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
}
 80056f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
 80056f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80056fa:	f7fe ba95 	b.w	8003c28 <delay_ms>
 80056fe:	bf00      	nop
 8005700:	0800ad20 	.word	0x0800ad20
 8005704:	0800ad1c 	.word	0x0800ad1c

08005708 <report_feedback_message>:
// user feedback for things that are not of the status/alarm message protocol. These are
// messages such as setup warnings, switch toggling, and how to exit alarms.
// NOTE: For interfaces, messages are always placed within brackets. And if silent mode
// is installed, the message number codes are less than zero.
void report_feedback_message(uint8_t message_code)
{
 8005708:	b510      	push	{r4, lr}
 800570a:	4604      	mov	r4, r0
  printPgmString(PSTR("[MSG:"));
 800570c:	4820      	ldr	r0, [pc, #128]	; (8005790 <report_feedback_message+0x88>)
 800570e:	f7ff f84f 	bl	80047b0 <printString>
  switch(message_code) {
 8005712:	1e60      	subs	r0, r4, #1
 8005714:	280a      	cmp	r0, #10
 8005716:	d80a      	bhi.n	800572e <report_feedback_message+0x26>
 8005718:	e8df f000 	tbb	[pc, r0]
 800571c:	1d191511 	.word	0x1d191511
 8005720:	2d292521 	.word	0x2d292521
 8005724:	3531      	.short	0x3531
 8005726:	06          	.byte	0x06
 8005727:	00          	.byte	0x00
    case MESSAGE_RESTORE_DEFAULTS:
      printPgmString(PSTR("Restoring defaults")); break;
    case MESSAGE_SPINDLE_RESTORE:
      printPgmString(PSTR("Restoring spindle")); break;
    case MESSAGE_SLEEP_MODE:
      printPgmString(PSTR("Sleeping")); break;
 8005728:	481a      	ldr	r0, [pc, #104]	; (8005794 <report_feedback_message+0x8c>)
 800572a:	f7ff f841 	bl	80047b0 <printString>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 800572e:	205d      	movs	r0, #93	; 0x5d
 8005730:	f000 fe58 	bl	80063e4 <serial_write>
  }
  report_util_feedback_line_feed();
}
 8005734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005738:	4817      	ldr	r0, [pc, #92]	; (8005798 <report_feedback_message+0x90>)
 800573a:	f7ff b839 	b.w	80047b0 <printString>
      printPgmString(PSTR("Reset to continue")); break;
 800573e:	4817      	ldr	r0, [pc, #92]	; (800579c <report_feedback_message+0x94>)
 8005740:	f7ff f836 	bl	80047b0 <printString>
 8005744:	e7f3      	b.n	800572e <report_feedback_message+0x26>
      printPgmString(PSTR("'$H'|'$X' to unlock")); break;
 8005746:	4816      	ldr	r0, [pc, #88]	; (80057a0 <report_feedback_message+0x98>)
 8005748:	f7ff f832 	bl	80047b0 <printString>
 800574c:	e7ef      	b.n	800572e <report_feedback_message+0x26>
      printPgmString(PSTR("Caution: Unlocked")); break;
 800574e:	4815      	ldr	r0, [pc, #84]	; (80057a4 <report_feedback_message+0x9c>)
 8005750:	f7ff f82e 	bl	80047b0 <printString>
 8005754:	e7eb      	b.n	800572e <report_feedback_message+0x26>
      printPgmString(PSTR("Enabled")); break;
 8005756:	4814      	ldr	r0, [pc, #80]	; (80057a8 <report_feedback_message+0xa0>)
 8005758:	f7ff f82a 	bl	80047b0 <printString>
 800575c:	e7e7      	b.n	800572e <report_feedback_message+0x26>
      printPgmString(PSTR("Disabled")); break;
 800575e:	4813      	ldr	r0, [pc, #76]	; (80057ac <report_feedback_message+0xa4>)
 8005760:	f7ff f826 	bl	80047b0 <printString>
 8005764:	e7e3      	b.n	800572e <report_feedback_message+0x26>
      printPgmString(PSTR("Check Door")); break;
 8005766:	4812      	ldr	r0, [pc, #72]	; (80057b0 <report_feedback_message+0xa8>)
 8005768:	f7ff f822 	bl	80047b0 <printString>
 800576c:	e7df      	b.n	800572e <report_feedback_message+0x26>
      printPgmString(PSTR("Check Limits")); break;
 800576e:	4811      	ldr	r0, [pc, #68]	; (80057b4 <report_feedback_message+0xac>)
 8005770:	f7ff f81e 	bl	80047b0 <printString>
 8005774:	e7db      	b.n	800572e <report_feedback_message+0x26>
      printPgmString(PSTR("Pgm End")); break;
 8005776:	4810      	ldr	r0, [pc, #64]	; (80057b8 <report_feedback_message+0xb0>)
 8005778:	f7ff f81a 	bl	80047b0 <printString>
 800577c:	e7d7      	b.n	800572e <report_feedback_message+0x26>
      printPgmString(PSTR("Restoring defaults")); break;
 800577e:	480f      	ldr	r0, [pc, #60]	; (80057bc <report_feedback_message+0xb4>)
 8005780:	f7ff f816 	bl	80047b0 <printString>
 8005784:	e7d3      	b.n	800572e <report_feedback_message+0x26>
      printPgmString(PSTR("Restoring spindle")); break;
 8005786:	480e      	ldr	r0, [pc, #56]	; (80057c0 <report_feedback_message+0xb8>)
 8005788:	f7ff f812 	bl	80047b0 <printString>
 800578c:	e7cf      	b.n	800572e <report_feedback_message+0x26>
 800578e:	bf00      	nop
 8005790:	0800ad28 	.word	0x0800ad28
 8005794:	0800adcc 	.word	0x0800adcc
 8005798:	0800ad1c 	.word	0x0800ad1c
 800579c:	0800ad30 	.word	0x0800ad30
 80057a0:	0800ad44 	.word	0x0800ad44
 80057a4:	0800ad58 	.word	0x0800ad58
 80057a8:	0800ad6c 	.word	0x0800ad6c
 80057ac:	0800ad74 	.word	0x0800ad74
 80057b0:	0800ad80 	.word	0x0800ad80
 80057b4:	0800ad8c 	.word	0x0800ad8c
 80057b8:	0800ad9c 	.word	0x0800ad9c
 80057bc:	0800ada4 	.word	0x0800ada4
 80057c0:	0800adb8 	.word	0x0800adb8

080057c4 <report_init_message>:


// Welcome message
void report_init_message()
{
  printPgmString(PSTR("\r\nGrbl " GRBL_VERSION " ['$' for help]\r\n"));
 80057c4:	4801      	ldr	r0, [pc, #4]	; (80057cc <report_init_message+0x8>)
 80057c6:	f7fe bff3 	b.w	80047b0 <printString>
 80057ca:	bf00      	nop
 80057cc:	0800add8 	.word	0x0800add8

080057d0 <report_grbl_help>:
}

// Grbl help message
void report_grbl_help() {
 80057d0:	b508      	push	{r3, lr}

#ifdef SileliSMod
  printPgmString("GRBL mod for Bsmce04u-pp CNC board by SileliS.\nFirmware based on 6-AXIS-USBCNC-GRBL by robomechs.\n");	//SileliS				//SileliS
 80057d2:	4804      	ldr	r0, [pc, #16]	; (80057e4 <report_grbl_help+0x14>)
 80057d4:	f7fe ffec 	bl	80047b0 <printString>
#endif

  printPgmString(PSTR("[HLP:$$ $# $G $I $N $x=val $Nx=line $J=line $SLP $C $X $H ~ ! ? ctrl-x]\r\n"));    
}
 80057d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printPgmString(PSTR("[HLP:$$ $# $G $I $N $x=val $Nx=line $J=line $SLP $C $X $H ~ ! ? ctrl-x]\r\n"));    
 80057dc:	4802      	ldr	r0, [pc, #8]	; (80057e8 <report_grbl_help+0x18>)
 80057de:	f7fe bfe7 	b.w	80047b0 <printString>
 80057e2:	bf00      	nop
 80057e4:	0800adf8 	.word	0x0800adf8
 80057e8:	0800ae5c 	.word	0x0800ae5c

080057ec <report_grbl_settings>:


// Grbl global settings print out.
// NOTE: The numbering scheme here must correlate to storing in settings.c
void report_grbl_settings() {
 80057ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Print Grbl settings.
  report_util_uint8_setting(0,settings.pulse_microseconds);
 80057f0:	4cde      	ldr	r4, [pc, #888]	; (8005b6c <report_grbl_settings+0x380>)
void report_grbl_settings() {
 80057f2:	b083      	sub	sp, #12
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80057f4:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(0,settings.pulse_microseconds);
 80057f6:	f894 5040 	ldrb.w	r5, [r4, #64]	; 0x40
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80057fa:	f000 fdf3 	bl	80063e4 <serial_write>
 80057fe:	2000      	movs	r0, #0
 8005800:	f7fe ffe2 	bl	80047c8 <print_uint8_base10>
 8005804:	203d      	movs	r0, #61	; 0x3d
 8005806:	f000 fded 	bl	80063e4 <serial_write>
  print_uint8_base10(val);
 800580a:	4628      	mov	r0, r5
 800580c:	f7fe ffdc 	bl	80047c8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005810:	48d7      	ldr	r0, [pc, #860]	; (8005b70 <report_grbl_settings+0x384>)
 8005812:	f7fe ffcd 	bl	80047b0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005816:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(1,settings.stepper_idle_lock_time);
 8005818:	f894 5046 	ldrb.w	r5, [r4, #70]	; 0x46
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800581c:	f000 fde2 	bl	80063e4 <serial_write>
 8005820:	2001      	movs	r0, #1
 8005822:	f7fe ffd1 	bl	80047c8 <print_uint8_base10>
 8005826:	203d      	movs	r0, #61	; 0x3d
 8005828:	f000 fddc 	bl	80063e4 <serial_write>
  print_uint8_base10(val);
 800582c:	4628      	mov	r0, r5
 800582e:	f7fe ffcb 	bl	80047c8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005832:	48cf      	ldr	r0, [pc, #828]	; (8005b70 <report_grbl_settings+0x384>)
 8005834:	f7fe ffbc 	bl	80047b0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005838:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(2,settings.step_invert_mask);
 800583a:	f8b4 5042 	ldrh.w	r5, [r4, #66]	; 0x42
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800583e:	f000 fdd1 	bl	80063e4 <serial_write>
 8005842:	2002      	movs	r0, #2
 8005844:	f7fe ffc0 	bl	80047c8 <print_uint8_base10>
 8005848:	203d      	movs	r0, #61	; 0x3d
 800584a:	f000 fdcb 	bl	80063e4 <serial_write>
  print_uint8_base10(val);
 800584e:	b2e8      	uxtb	r0, r5
 8005850:	f7fe ffba 	bl	80047c8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005854:	48c6      	ldr	r0, [pc, #792]	; (8005b70 <report_grbl_settings+0x384>)
 8005856:	f7fe ffab 	bl	80047b0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800585a:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(3,settings.dir_invert_mask);
 800585c:	f8b4 5044 	ldrh.w	r5, [r4, #68]	; 0x44
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005860:	f000 fdc0 	bl	80063e4 <serial_write>
 8005864:	2003      	movs	r0, #3
 8005866:	f7fe ffaf 	bl	80047c8 <print_uint8_base10>
 800586a:	203d      	movs	r0, #61	; 0x3d
 800586c:	f000 fdba 	bl	80063e4 <serial_write>
  print_uint8_base10(val);
 8005870:	b2e8      	uxtb	r0, r5
 8005872:	f7fe ffa9 	bl	80047c8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005876:	48be      	ldr	r0, [pc, #760]	; (8005b70 <report_grbl_settings+0x384>)
 8005878:	f7fe ff9a 	bl	80047b0 <printString>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 800587c:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005880:	2024      	movs	r0, #36	; 0x24
 8005882:	f000 fdaf 	bl	80063e4 <serial_write>
 8005886:	2004      	movs	r0, #4
 8005888:	f7fe ff9e 	bl	80047c8 <print_uint8_base10>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 800588c:	f3c5 0580 	ubfx	r5, r5, #2, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005890:	203d      	movs	r0, #61	; 0x3d
 8005892:	f000 fda7 	bl	80063e4 <serial_write>
  print_uint8_base10(val);
 8005896:	4628      	mov	r0, r5
 8005898:	f7fe ff96 	bl	80047c8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800589c:	48b4      	ldr	r0, [pc, #720]	; (8005b70 <report_grbl_settings+0x384>)
 800589e:	f7fe ff87 	bl	80047b0 <printString>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 80058a2:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80058a6:	2024      	movs	r0, #36	; 0x24
 80058a8:	f000 fd9c 	bl	80063e4 <serial_write>
 80058ac:	2005      	movs	r0, #5
 80058ae:	f7fe ff8b 	bl	80047c8 <print_uint8_base10>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 80058b2:	f3c5 1580 	ubfx	r5, r5, #6, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80058b6:	203d      	movs	r0, #61	; 0x3d
 80058b8:	f000 fd94 	bl	80063e4 <serial_write>
  print_uint8_base10(val);
 80058bc:	4628      	mov	r0, r5
 80058be:	f7fe ff83 	bl	80047c8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80058c2:	48ab      	ldr	r0, [pc, #684]	; (8005b70 <report_grbl_settings+0x384>)
 80058c4:	f7fe ff74 	bl	80047b0 <printString>
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 80058c8:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80058cc:	2024      	movs	r0, #36	; 0x24
 80058ce:	f000 fd89 	bl	80063e4 <serial_write>
 80058d2:	2006      	movs	r0, #6
 80058d4:	f7fe ff78 	bl	80047c8 <print_uint8_base10>
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 80058d8:	09ed      	lsrs	r5, r5, #7
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80058da:	203d      	movs	r0, #61	; 0x3d
 80058dc:	f000 fd82 	bl	80063e4 <serial_write>
  print_uint8_base10(val);
 80058e0:	4628      	mov	r0, r5
 80058e2:	f7fe ff71 	bl	80047c8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80058e6:	48a2      	ldr	r0, [pc, #648]	; (8005b70 <report_grbl_settings+0x384>)
 80058e8:	f7fe ff62 	bl	80047b0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80058ec:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(10,settings.status_report_mask);
 80058ee:	f894 5047 	ldrb.w	r5, [r4, #71]	; 0x47
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80058f2:	f000 fd77 	bl	80063e4 <serial_write>
 80058f6:	200a      	movs	r0, #10
 80058f8:	f7fe ff66 	bl	80047c8 <print_uint8_base10>
 80058fc:	203d      	movs	r0, #61	; 0x3d
 80058fe:	f000 fd71 	bl	80063e4 <serial_write>
  print_uint8_base10(val);
 8005902:	4628      	mov	r0, r5
 8005904:	f7fe ff60 	bl	80047c8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005908:	4899      	ldr	r0, [pc, #612]	; (8005b70 <report_grbl_settings+0x384>)
 800590a:	f7fe ff51 	bl	80047b0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800590e:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(11,settings.junction_deviation,N_DECIMAL_SETTINGVALUE);
 8005910:	6ca5      	ldr	r5, [r4, #72]	; 0x48
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005912:	f000 fd67 	bl	80063e4 <serial_write>
 8005916:	200b      	movs	r0, #11
 8005918:	f7fe ff56 	bl	80047c8 <print_uint8_base10>
 800591c:	203d      	movs	r0, #61	; 0x3d
 800591e:	f000 fd61 	bl	80063e4 <serial_write>
  printFloat(val, n_decimal);
 8005922:	2103      	movs	r1, #3
 8005924:	4628      	mov	r0, r5
 8005926:	f7fe ff8d 	bl	8004844 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800592a:	4891      	ldr	r0, [pc, #580]	; (8005b70 <report_grbl_settings+0x384>)
 800592c:	f7fe ff40 	bl	80047b0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005930:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(12,settings.arc_tolerance,N_DECIMAL_SETTINGVALUE);
 8005932:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005934:	f000 fd56 	bl	80063e4 <serial_write>
 8005938:	200c      	movs	r0, #12
 800593a:	f7fe ff45 	bl	80047c8 <print_uint8_base10>
 800593e:	203d      	movs	r0, #61	; 0x3d
 8005940:	f000 fd50 	bl	80063e4 <serial_write>
  printFloat(val, n_decimal);
 8005944:	2103      	movs	r1, #3
 8005946:	4628      	mov	r0, r5
 8005948:	f7fe ff7c 	bl	8004844 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800594c:	4888      	ldr	r0, [pc, #544]	; (8005b70 <report_grbl_settings+0x384>)
 800594e:	f7fe ff2f 	bl	80047b0 <printString>
  report_util_uint8_setting(13,bit_istrue(settings.flags,BITFLAG_REPORT_INCHES));
 8005952:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005956:	2024      	movs	r0, #36	; 0x24
 8005958:	f000 fd44 	bl	80063e4 <serial_write>
 800595c:	200d      	movs	r0, #13
 800595e:	f7fe ff33 	bl	80047c8 <print_uint8_base10>
 8005962:	f005 0501 	and.w	r5, r5, #1
 8005966:	203d      	movs	r0, #61	; 0x3d
 8005968:	f000 fd3c 	bl	80063e4 <serial_write>
  print_uint8_base10(val);
 800596c:	4628      	mov	r0, r5
 800596e:	f7fe ff2b 	bl	80047c8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005972:	487f      	ldr	r0, [pc, #508]	; (8005b70 <report_grbl_settings+0x384>)
 8005974:	f7fe ff1c 	bl	80047b0 <printString>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 8005978:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800597c:	2024      	movs	r0, #36	; 0x24
 800597e:	f000 fd31 	bl	80063e4 <serial_write>
 8005982:	2014      	movs	r0, #20
 8005984:	f7fe ff20 	bl	80047c8 <print_uint8_base10>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 8005988:	f3c5 1540 	ubfx	r5, r5, #5, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800598c:	203d      	movs	r0, #61	; 0x3d
 800598e:	f000 fd29 	bl	80063e4 <serial_write>
  print_uint8_base10(val);
 8005992:	4628      	mov	r0, r5
 8005994:	f7fe ff18 	bl	80047c8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005998:	4875      	ldr	r0, [pc, #468]	; (8005b70 <report_grbl_settings+0x384>)
 800599a:	f7fe ff09 	bl	80047b0 <printString>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 800599e:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80059a2:	2024      	movs	r0, #36	; 0x24
 80059a4:	f000 fd1e 	bl	80063e4 <serial_write>
 80059a8:	2015      	movs	r0, #21
 80059aa:	f7fe ff0d 	bl	80047c8 <print_uint8_base10>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 80059ae:	f3c5 05c0 	ubfx	r5, r5, #3, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80059b2:	203d      	movs	r0, #61	; 0x3d
 80059b4:	f000 fd16 	bl	80063e4 <serial_write>
  print_uint8_base10(val);
 80059b8:	4628      	mov	r0, r5
 80059ba:	f7fe ff05 	bl	80047c8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80059be:	486c      	ldr	r0, [pc, #432]	; (8005b70 <report_grbl_settings+0x384>)
 80059c0:	f7fe fef6 	bl	80047b0 <printString>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 80059c4:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80059c8:	2024      	movs	r0, #36	; 0x24
 80059ca:	f000 fd0b 	bl	80063e4 <serial_write>
 80059ce:	2016      	movs	r0, #22
 80059d0:	f7fe fefa 	bl	80047c8 <print_uint8_base10>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 80059d4:	f3c5 1500 	ubfx	r5, r5, #4, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80059d8:	203d      	movs	r0, #61	; 0x3d
 80059da:	f000 fd03 	bl	80063e4 <serial_write>
  print_uint8_base10(val);
 80059de:	4628      	mov	r0, r5
 80059e0:	f7fe fef2 	bl	80047c8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80059e4:	4862      	ldr	r0, [pc, #392]	; (8005b70 <report_grbl_settings+0x384>)
 80059e6:	f7fe fee3 	bl	80047b0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80059ea:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(23,settings.homing_dir_mask);
 80059ec:	f8b4 505a 	ldrh.w	r5, [r4, #90]	; 0x5a
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80059f0:	f000 fcf8 	bl	80063e4 <serial_write>
 80059f4:	2017      	movs	r0, #23
 80059f6:	f7fe fee7 	bl	80047c8 <print_uint8_base10>
 80059fa:	203d      	movs	r0, #61	; 0x3d
 80059fc:	f000 fcf2 	bl	80063e4 <serial_write>
  print_uint8_base10(val);
 8005a00:	b2e8      	uxtb	r0, r5
 8005a02:	f7fe fee1 	bl	80047c8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005a06:	485a      	ldr	r0, [pc, #360]	; (8005b70 <report_grbl_settings+0x384>)
 8005a08:	f7fe fed2 	bl	80047b0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005a0c:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(24,settings.homing_feed_rate,N_DECIMAL_SETTINGVALUE);
 8005a0e:	6de5      	ldr	r5, [r4, #92]	; 0x5c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005a10:	f000 fce8 	bl	80063e4 <serial_write>
 8005a14:	2018      	movs	r0, #24
 8005a16:	f7fe fed7 	bl	80047c8 <print_uint8_base10>
 8005a1a:	203d      	movs	r0, #61	; 0x3d
 8005a1c:	f000 fce2 	bl	80063e4 <serial_write>
  printFloat(val, n_decimal);
 8005a20:	2103      	movs	r1, #3
 8005a22:	4628      	mov	r0, r5
 8005a24:	f7fe ff0e 	bl	8004844 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005a28:	4851      	ldr	r0, [pc, #324]	; (8005b70 <report_grbl_settings+0x384>)
 8005a2a:	f7fe fec1 	bl	80047b0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005a2e:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(25,settings.homing_seek_rate,N_DECIMAL_SETTINGVALUE);
 8005a30:	6e25      	ldr	r5, [r4, #96]	; 0x60
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005a32:	f000 fcd7 	bl	80063e4 <serial_write>
 8005a36:	2019      	movs	r0, #25
 8005a38:	f7fe fec6 	bl	80047c8 <print_uint8_base10>
 8005a3c:	203d      	movs	r0, #61	; 0x3d
 8005a3e:	f000 fcd1 	bl	80063e4 <serial_write>
  printFloat(val, n_decimal);
 8005a42:	2103      	movs	r1, #3
 8005a44:	4628      	mov	r0, r5
 8005a46:	f7fe fefd 	bl	8004844 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005a4a:	4849      	ldr	r0, [pc, #292]	; (8005b70 <report_grbl_settings+0x384>)
 8005a4c:	f7fe feb0 	bl	80047b0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005a50:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(26,settings.homing_debounce_delay);
 8005a52:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005a56:	f000 fcc5 	bl	80063e4 <serial_write>
 8005a5a:	201a      	movs	r0, #26
 8005a5c:	f7fe feb4 	bl	80047c8 <print_uint8_base10>
 8005a60:	203d      	movs	r0, #61	; 0x3d
 8005a62:	f000 fcbf 	bl	80063e4 <serial_write>
  print_uint8_base10(val);
 8005a66:	b2e8      	uxtb	r0, r5
 8005a68:	f7fe feae 	bl	80047c8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005a6c:	4840      	ldr	r0, [pc, #256]	; (8005b70 <report_grbl_settings+0x384>)
 8005a6e:	f7fe fe9f 	bl	80047b0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005a72:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(27,settings.homing_pulloff,N_DECIMAL_SETTINGVALUE);
 8005a74:	6ea5      	ldr	r5, [r4, #104]	; 0x68
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005a76:	f000 fcb5 	bl	80063e4 <serial_write>
 8005a7a:	201b      	movs	r0, #27
 8005a7c:	f7fe fea4 	bl	80047c8 <print_uint8_base10>
 8005a80:	203d      	movs	r0, #61	; 0x3d
 8005a82:	f000 fcaf 	bl	80063e4 <serial_write>
  printFloat(val, n_decimal);
 8005a86:	2103      	movs	r1, #3
 8005a88:	4628      	mov	r0, r5
 8005a8a:	f7fe fedb 	bl	8004844 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005a8e:	4838      	ldr	r0, [pc, #224]	; (8005b70 <report_grbl_settings+0x384>)
 8005a90:	f7fe fe8e 	bl	80047b0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005a94:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(30,settings.rpm_max,N_DECIMAL_RPMVALUE);
 8005a96:	6d25      	ldr	r5, [r4, #80]	; 0x50
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005a98:	f000 fca4 	bl	80063e4 <serial_write>
 8005a9c:	201e      	movs	r0, #30
 8005a9e:	f7fe fe93 	bl	80047c8 <print_uint8_base10>
 8005aa2:	203d      	movs	r0, #61	; 0x3d
 8005aa4:	f000 fc9e 	bl	80063e4 <serial_write>
  printFloat(val, n_decimal);
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	4628      	mov	r0, r5
 8005aac:	f7fe feca 	bl	8004844 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005ab0:	482f      	ldr	r0, [pc, #188]	; (8005b70 <report_grbl_settings+0x384>)
 8005ab2:	f7fe fe7d 	bl	80047b0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005ab6:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(31,settings.rpm_min,N_DECIMAL_RPMVALUE);
 8005ab8:	6d65      	ldr	r5, [r4, #84]	; 0x54
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005aba:	f000 fc93 	bl	80063e4 <serial_write>
 8005abe:	201f      	movs	r0, #31
 8005ac0:	f7fe fe82 	bl	80047c8 <print_uint8_base10>
 8005ac4:	203d      	movs	r0, #61	; 0x3d
 8005ac6:	f000 fc8d 	bl	80063e4 <serial_write>
  printFloat(val, n_decimal);
 8005aca:	2100      	movs	r1, #0
 8005acc:	4628      	mov	r0, r5
 8005ace:	f7fe feb9 	bl	8004844 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005ad2:	4827      	ldr	r0, [pc, #156]	; (8005b70 <report_grbl_settings+0x384>)
 8005ad4:	f7fe fe6c 	bl	80047b0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005ad8:	2024      	movs	r0, #36	; 0x24
  #ifdef VARIABLE_SPINDLE
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
 8005ada:	f894 4058 	ldrb.w	r4, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005ade:	f000 fc81 	bl	80063e4 <serial_write>
 8005ae2:	2020      	movs	r0, #32
 8005ae4:	f7fe fe70 	bl	80047c8 <print_uint8_base10>
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
 8005ae8:	f3c4 0440 	ubfx	r4, r4, #1, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005aec:	203d      	movs	r0, #61	; 0x3d
 8005aee:	f000 fc79 	bl	80063e4 <serial_write>
  print_uint8_base10(val);
 8005af2:	4620      	mov	r0, r4
 8005af4:	f7fe fe68 	bl	80047c8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005af8:	481d      	ldr	r0, [pc, #116]	; (8005b70 <report_grbl_settings+0x384>)
 8005afa:	f7fe fe59 	bl	80047b0 <printString>
 8005afe:	2600      	movs	r6, #0
  #else
    report_util_uint8_setting(32,0);
  #endif
  // Print axis settings
  uint8_t idx, set_idx;
  uint8_t val = AXIS_SETTINGS_START_VAL;
 8005b00:	2764      	movs	r7, #100	; 0x64
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
    for (idx=0; idx<N_AXIS; idx++) {
      switch (set_idx) {
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8005b02:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8005b74 <report_grbl_settings+0x388>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005b06:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8005b70 <report_grbl_settings+0x384>
      switch (set_idx) {
 8005b0a:	2e02      	cmp	r6, #2
void report_grbl_settings() {
 8005b0c:	463d      	mov	r5, r7
 8005b0e:	f04f 0401 	mov.w	r4, #1
 8005b12:	f8df a058 	ldr.w	sl, [pc, #88]	; 8005b6c <report_grbl_settings+0x380>
 8005b16:	fa5f fb86 	uxtb.w	fp, r6
      switch (set_idx) {
 8005b1a:	d02d      	beq.n	8005b78 <report_grbl_settings+0x38c>
 8005b1c:	f1bb 0f03 	cmp.w	fp, #3
 8005b20:	d032      	beq.n	8005b88 <report_grbl_settings+0x39c>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005b22:	2024      	movs	r0, #36	; 0x24
      switch (set_idx) {
 8005b24:	f1bb 0f01 	cmp.w	fp, #1
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8005b28:	bf14      	ite	ne
 8005b2a:	f8da 3000 	ldrne.w	r3, [sl]
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8005b2e:	f8da 3010 	ldreq.w	r3, [sl, #16]
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8005b32:	9301      	str	r3, [sp, #4]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005b34:	f000 fc56 	bl	80063e4 <serial_write>
 8005b38:	4628      	mov	r0, r5
 8005b3a:	f7fe fe45 	bl	80047c8 <print_uint8_base10>
 8005b3e:	203d      	movs	r0, #61	; 0x3d
 8005b40:	f000 fc50 	bl	80063e4 <serial_write>
  printFloat(val, n_decimal);
 8005b44:	9b01      	ldr	r3, [sp, #4]
 8005b46:	2103      	movs	r1, #3
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7fe fe7b 	bl	8004844 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005b4e:	4640      	mov	r0, r8
 8005b50:	f7fe fe2e 	bl	80047b0 <printString>
    for (idx=0; idx<N_AXIS; idx++) {
 8005b54:	2c04      	cmp	r4, #4
 8005b56:	d032      	beq.n	8005bbe <report_grbl_settings+0x3d2>
 8005b58:	3401      	adds	r4, #1
 8005b5a:	1c68      	adds	r0, r5, #1
      switch (set_idx) {
 8005b5c:	2e02      	cmp	r6, #2
 8005b5e:	b2e4      	uxtb	r4, r4
 8005b60:	f10a 0a04 	add.w	sl, sl, #4
 8005b64:	b2c5      	uxtb	r5, r0
 8005b66:	d1d9      	bne.n	8005b1c <report_grbl_settings+0x330>
 8005b68:	e006      	b.n	8005b78 <report_grbl_settings+0x38c>
 8005b6a:	bf00      	nop
 8005b6c:	200013ec 	.word	0x200013ec
 8005b70:	0800ad1c 	.word	0x0800ad1c
 8005b74:	3991a2b4 	.word	0x3991a2b4
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8005b78:	4649      	mov	r1, r9
 8005b7a:	f8da 0020 	ldr.w	r0, [sl, #32]
 8005b7e:	f7fa fe89 	bl	8000894 <__aeabi_fmul>
 8005b82:	4603      	mov	r3, r0
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005b84:	2024      	movs	r0, #36	; 0x24
 8005b86:	e7d4      	b.n	8005b32 <report_grbl_settings+0x346>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8005b88:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005b8c:	2024      	movs	r0, #36	; 0x24
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8005b8e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005b92:	9301      	str	r3, [sp, #4]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005b94:	f000 fc26 	bl	80063e4 <serial_write>
 8005b98:	4628      	mov	r0, r5
 8005b9a:	f7fe fe15 	bl	80047c8 <print_uint8_base10>
 8005b9e:	203d      	movs	r0, #61	; 0x3d
 8005ba0:	f000 fc20 	bl	80063e4 <serial_write>
  printFloat(val, n_decimal);
 8005ba4:	9b01      	ldr	r3, [sp, #4]
 8005ba6:	4659      	mov	r1, fp
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fe fe4b 	bl	8004844 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005bae:	4640      	mov	r0, r8
 8005bb0:	f7fe fdfe 	bl	80047b0 <printString>
    for (idx=0; idx<N_AXIS; idx++) {
 8005bb4:	2c04      	cmp	r4, #4
 8005bb6:	d1cf      	bne.n	8005b58 <report_grbl_settings+0x36c>
      }
    }
    val += AXIS_SETTINGS_INCREMENT;
  }
}
 8005bb8:	b003      	add	sp, #12
 8005bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    val += AXIS_SETTINGS_INCREMENT;
 8005bbe:	370a      	adds	r7, #10
 8005bc0:	b2ff      	uxtb	r7, r7
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
 8005bc2:	2f8c      	cmp	r7, #140	; 0x8c
 8005bc4:	f106 0601 	add.w	r6, r6, #1
 8005bc8:	d19f      	bne.n	8005b0a <report_grbl_settings+0x31e>
 8005bca:	e7f5      	b.n	8005bb8 <report_grbl_settings+0x3cc>

08005bcc <report_probe_parameters>:

// Prints current probe parameters. Upon a probe command, these parameters are updated upon a
// successful probe or upon a failed probe with the G38.3 without errors command (if supported).
// These values are retained until Grbl is power-cycled, whereby they will be re-zeroed.
void report_probe_parameters()
{
 8005bcc:	b530      	push	{r4, r5, lr}
  // Report in terms of machine position.
  printPgmString(PSTR("[PRB:"));
 8005bce:	4812      	ldr	r0, [pc, #72]	; (8005c18 <report_probe_parameters+0x4c>)
{
 8005bd0:	b085      	sub	sp, #20
  printPgmString(PSTR("[PRB:"));
 8005bd2:	f7fe fded 	bl	80047b0 <printString>
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 8005bd6:	4668      	mov	r0, sp
 8005bd8:	4910      	ldr	r1, [pc, #64]	; (8005c1c <report_probe_parameters+0x50>)
 8005bda:	f002 fc71 	bl	80084c0 <system_convert_array_steps_to_mpos>
    printFloat_CoordValue(axis_value[idx]);
 8005bde:	9800      	ldr	r0, [sp, #0]
 8005be0:	f7fe ff34 	bl	8004a4c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8005be4:	466c      	mov	r4, sp
 8005be6:	ad03      	add	r5, sp, #12
 8005be8:	202c      	movs	r0, #44	; 0x2c
 8005bea:	f000 fbfb 	bl	80063e4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8005bee:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8005bf2:	f7fe ff2b 	bl	8004a4c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8005bf6:	42ac      	cmp	r4, r5
 8005bf8:	d1f6      	bne.n	8005be8 <report_probe_parameters+0x1c>
  report_util_axis_values(print_position);
  serial_write(':');
 8005bfa:	203a      	movs	r0, #58	; 0x3a
 8005bfc:	f000 fbf2 	bl	80063e4 <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 8005c00:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <report_probe_parameters+0x54>)
 8005c02:	7958      	ldrb	r0, [r3, #5]
 8005c04:	f7fe fde0 	bl	80047c8 <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8005c08:	205d      	movs	r0, #93	; 0x5d
 8005c0a:	f000 fbeb 	bl	80063e4 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005c0e:	4805      	ldr	r0, [pc, #20]	; (8005c24 <report_probe_parameters+0x58>)
 8005c10:	f7fe fdce 	bl	80047b0 <printString>
  report_util_feedback_line_feed();
}
 8005c14:	b005      	add	sp, #20
 8005c16:	bd30      	pop	{r4, r5, pc}
 8005c18:	0800aea8 	.word	0x0800aea8
 8005c1c:	200009f4 	.word	0x200009f4
 8005c20:	200009d0 	.word	0x200009d0
 8005c24:	0800ad1c 	.word	0x0800ad1c

08005c28 <report_ngc_parameters>:


// Prints Grbl NGC parameters (coordinate offsets, probing)
void report_ngc_parameters()
{
 8005c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c2c:	2500      	movs	r5, #0
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
    if (!(settings_read_coord_data(coord_select,coord_data))) {
      report_status_message(STATUS_SETTING_READ_FAIL);
      return;
    }
    printPgmString(PSTR("[G"));
 8005c2e:	4f49      	ldr	r7, [pc, #292]	; (8005d54 <report_ngc_parameters+0x12c>)
    switch (coord_select) {
      case 6: printPgmString(PSTR("28")); break;
 8005c30:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8005d58 <report_ngc_parameters+0x130>
      case 7: printPgmString(PSTR("30")); break;
 8005c34:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8005d5c <report_ngc_parameters+0x134>
{
 8005c38:	b089      	sub	sp, #36	; 0x24
 8005c3a:	e01e      	b.n	8005c7a <report_ngc_parameters+0x52>
      default: print_uint8_base10(coord_select+54); break; // G54-G59
 8005c3c:	f104 0036 	add.w	r0, r4, #54	; 0x36
 8005c40:	b2c0      	uxtb	r0, r0
 8005c42:	f7fe fdc1 	bl	80047c8 <print_uint8_base10>
    }
    serial_write(':');
 8005c46:	203a      	movs	r0, #58	; 0x3a
 8005c48:	f000 fbcc 	bl	80063e4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8005c4c:	9800      	ldr	r0, [sp, #0]
 8005c4e:	f7fe fefd 	bl	8004a4c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8005c52:	466c      	mov	r4, sp
 8005c54:	ae03      	add	r6, sp, #12
 8005c56:	202c      	movs	r0, #44	; 0x2c
 8005c58:	f000 fbc4 	bl	80063e4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8005c5c:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8005c60:	f7fe fef4 	bl	8004a4c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8005c64:	42b4      	cmp	r4, r6
 8005c66:	d1f6      	bne.n	8005c56 <report_ngc_parameters+0x2e>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8005c68:	205d      	movs	r0, #93	; 0x5d
 8005c6a:	f000 fbbb 	bl	80063e4 <serial_write>
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
 8005c6e:	3501      	adds	r5, #1
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005c70:	483b      	ldr	r0, [pc, #236]	; (8005d60 <report_ngc_parameters+0x138>)
 8005c72:	f7fe fd9d 	bl	80047b0 <printString>
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
 8005c76:	2d08      	cmp	r5, #8
 8005c78:	d015      	beq.n	8005ca6 <report_ngc_parameters+0x7e>
 8005c7a:	b2ec      	uxtb	r4, r5
    if (!(settings_read_coord_data(coord_select,coord_data))) {
 8005c7c:	4669      	mov	r1, sp
 8005c7e:	4620      	mov	r0, r4
 8005c80:	f000 fdc0 	bl	8006804 <settings_read_coord_data>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	d059      	beq.n	8005d3c <report_ngc_parameters+0x114>
    printPgmString(PSTR("[G"));
 8005c88:	4638      	mov	r0, r7
 8005c8a:	f7fe fd91 	bl	80047b0 <printString>
    switch (coord_select) {
 8005c8e:	2d06      	cmp	r5, #6
 8005c90:	d005      	beq.n	8005c9e <report_ngc_parameters+0x76>
 8005c92:	2c07      	cmp	r4, #7
 8005c94:	d1d2      	bne.n	8005c3c <report_ngc_parameters+0x14>
      case 7: printPgmString(PSTR("30")); break;
 8005c96:	4640      	mov	r0, r8
 8005c98:	f7fe fd8a 	bl	80047b0 <printString>
 8005c9c:	e7d3      	b.n	8005c46 <report_ngc_parameters+0x1e>
      case 6: printPgmString(PSTR("28")); break;
 8005c9e:	4648      	mov	r0, r9
 8005ca0:	f7fe fd86 	bl	80047b0 <printString>
 8005ca4:	e7cf      	b.n	8005c46 <report_ngc_parameters+0x1e>
    printFloat_CoordValue(axis_value[idx]);
 8005ca6:	4d2f      	ldr	r5, [pc, #188]	; (8005d64 <report_ngc_parameters+0x13c>)
    report_util_axis_values(coord_data);
    report_util_feedback_line_feed();
  }
  printPgmString(PSTR("[G92:")); // Print G92,G92.1 which are not persistent in memory
 8005ca8:	482f      	ldr	r0, [pc, #188]	; (8005d68 <report_ngc_parameters+0x140>)
 8005caa:	f7fe fd81 	bl	80047b0 <printString>
    printFloat_CoordValue(axis_value[idx]);
 8005cae:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8005cb0:	f7fe fecc 	bl	8004a4c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8005cb4:	f105 0440 	add.w	r4, r5, #64	; 0x40
 8005cb8:	f105 064c 	add.w	r6, r5, #76	; 0x4c
 8005cbc:	202c      	movs	r0, #44	; 0x2c
 8005cbe:	f000 fb91 	bl	80063e4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8005cc2:	f854 0b04 	ldr.w	r0, [r4], #4
 8005cc6:	f7fe fec1 	bl	8004a4c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8005cca:	42a6      	cmp	r6, r4
 8005ccc:	d1f6      	bne.n	8005cbc <report_ngc_parameters+0x94>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8005cce:	205d      	movs	r0, #93	; 0x5d
 8005cd0:	f000 fb88 	bl	80063e4 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005cd4:	4822      	ldr	r0, [pc, #136]	; (8005d60 <report_ngc_parameters+0x138>)
 8005cd6:	f7fe fd6b 	bl	80047b0 <printString>
  report_util_axis_values(gc_state.coord_offset);
  report_util_feedback_line_feed();
  printPgmString(PSTR("[TLO:")); // Print tool length offset value
 8005cda:	4824      	ldr	r0, [pc, #144]	; (8005d6c <report_ngc_parameters+0x144>)
 8005cdc:	f7fe fd68 	bl	80047b0 <printString>
  printFloat_CoordValue(gc_state.tool_length_offset);
 8005ce0:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8005ce2:	f7fe feb3 	bl	8004a4c <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8005ce6:	205d      	movs	r0, #93	; 0x5d
 8005ce8:	f000 fb7c 	bl	80063e4 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005cec:	481c      	ldr	r0, [pc, #112]	; (8005d60 <report_ngc_parameters+0x138>)
 8005cee:	f7fe fd5f 	bl	80047b0 <printString>
  printPgmString(PSTR("[PRB:"));
 8005cf2:	481f      	ldr	r0, [pc, #124]	; (8005d70 <report_ngc_parameters+0x148>)
 8005cf4:	f7fe fd5c 	bl	80047b0 <printString>
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 8005cf8:	491e      	ldr	r1, [pc, #120]	; (8005d74 <report_ngc_parameters+0x14c>)
 8005cfa:	a804      	add	r0, sp, #16
 8005cfc:	f002 fbe0 	bl	80084c0 <system_convert_array_steps_to_mpos>
    printFloat_CoordValue(axis_value[idx]);
 8005d00:	9804      	ldr	r0, [sp, #16]
 8005d02:	f7fe fea3 	bl	8004a4c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8005d06:	ac04      	add	r4, sp, #16
 8005d08:	ad07      	add	r5, sp, #28
 8005d0a:	202c      	movs	r0, #44	; 0x2c
 8005d0c:	f000 fb6a 	bl	80063e4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8005d10:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8005d14:	f7fe fe9a 	bl	8004a4c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8005d18:	42ac      	cmp	r4, r5
 8005d1a:	d1f6      	bne.n	8005d0a <report_ngc_parameters+0xe2>
  serial_write(':');
 8005d1c:	203a      	movs	r0, #58	; 0x3a
 8005d1e:	f000 fb61 	bl	80063e4 <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 8005d22:	4b15      	ldr	r3, [pc, #84]	; (8005d78 <report_ngc_parameters+0x150>)
 8005d24:	7958      	ldrb	r0, [r3, #5]
 8005d26:	f7fe fd4f 	bl	80047c8 <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8005d2a:	205d      	movs	r0, #93	; 0x5d
 8005d2c:	f000 fb5a 	bl	80063e4 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005d30:	480b      	ldr	r0, [pc, #44]	; (8005d60 <report_ngc_parameters+0x138>)
 8005d32:	f7fe fd3d 	bl	80047b0 <printString>
  report_util_feedback_line_feed();
  report_probe_parameters(); // Print probe parameters. Not persistent in memory.
}
 8005d36:	b009      	add	sp, #36	; 0x24
 8005d38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      printPgmString(PSTR("error:"));
 8005d3c:	480f      	ldr	r0, [pc, #60]	; (8005d7c <report_ngc_parameters+0x154>)
 8005d3e:	f7fe fd37 	bl	80047b0 <printString>
      print_uint8_base10(status_code);
 8005d42:	2007      	movs	r0, #7
 8005d44:	f7fe fd40 	bl	80047c8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005d48:	4805      	ldr	r0, [pc, #20]	; (8005d60 <report_ngc_parameters+0x138>)
 8005d4a:	f7fe fd31 	bl	80047b0 <printString>
}
 8005d4e:	b009      	add	sp, #36	; 0x24
 8005d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d54:	0800aeb0 	.word	0x0800aeb0
 8005d58:	0800aeb4 	.word	0x0800aeb4
 8005d5c:	0800aeb8 	.word	0x0800aeb8
 8005d60:	0800ad1c 	.word	0x0800ad1c
 8005d64:	20000980 	.word	0x20000980
 8005d68:	0800aebc 	.word	0x0800aebc
 8005d6c:	0800aec4 	.word	0x0800aec4
 8005d70:	0800aea8 	.word	0x0800aea8
 8005d74:	200009f4 	.word	0x200009f4
 8005d78:	200009d0 	.word	0x200009d0
 8005d7c:	0800ad14 	.word	0x0800ad14

08005d80 <report_gcode_modes>:



// Print current gcode parser mode state
void report_gcode_modes()
{
 8005d80:	b510      	push	{r4, lr}

  printPgmString(PSTR("[GC:G"));
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 8005d82:	4c53      	ldr	r4, [pc, #332]	; (8005ed0 <report_gcode_modes+0x150>)
  printPgmString(PSTR("[GC:G"));
 8005d84:	4853      	ldr	r0, [pc, #332]	; (8005ed4 <report_gcode_modes+0x154>)
 8005d86:	f7fe fd13 	bl	80047b0 <printString>
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 8005d8a:	7820      	ldrb	r0, [r4, #0]
 8005d8c:	288b      	cmp	r0, #139	; 0x8b
 8005d8e:	d967      	bls.n	8005e60 <report_gcode_modes+0xe0>
    printPgmString(PSTR("38."));
 8005d90:	4851      	ldr	r0, [pc, #324]	; (8005ed8 <report_gcode_modes+0x158>)
 8005d92:	f7fe fd0d 	bl	80047b0 <printString>
    print_uint8_base10(gc_state.modal.motion - (MOTION_MODE_PROBE_TOWARD-2));
 8005d96:	7820      	ldrb	r0, [r4, #0]
 8005d98:	3076      	adds	r0, #118	; 0x76
 8005d9a:	b2c0      	uxtb	r0, r0
 8005d9c:	f7fe fd14 	bl	80047c8 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8005da0:	484e      	ldr	r0, [pc, #312]	; (8005edc <report_gcode_modes+0x15c>)
 8005da2:	f7fe fd05 	bl	80047b0 <printString>
  } else {
    print_uint8_base10(gc_state.modal.motion);
  }

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.coord_select+54);
 8005da6:	79a0      	ldrb	r0, [r4, #6]
 8005da8:	3036      	adds	r0, #54	; 0x36
 8005daa:	b2c0      	uxtb	r0, r0
 8005dac:	f7fe fd0c 	bl	80047c8 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8005db0:	484a      	ldr	r0, [pc, #296]	; (8005edc <report_gcode_modes+0x15c>)
 8005db2:	f7fe fcfd 	bl	80047b0 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.plane_select+17);
 8005db6:	7920      	ldrb	r0, [r4, #4]
 8005db8:	3011      	adds	r0, #17
 8005dba:	b2c0      	uxtb	r0, r0
 8005dbc:	f7fe fd04 	bl	80047c8 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8005dc0:	4846      	ldr	r0, [pc, #280]	; (8005edc <report_gcode_modes+0x15c>)
 8005dc2:	f7fe fcf5 	bl	80047b0 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(21-gc_state.modal.units);
 8005dc6:	78a0      	ldrb	r0, [r4, #2]
 8005dc8:	f1c0 0015 	rsb	r0, r0, #21
 8005dcc:	b2c0      	uxtb	r0, r0
 8005dce:	f7fe fcfb 	bl	80047c8 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8005dd2:	4842      	ldr	r0, [pc, #264]	; (8005edc <report_gcode_modes+0x15c>)
 8005dd4:	f7fe fcec 	bl	80047b0 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.distance+90);
 8005dd8:	78e0      	ldrb	r0, [r4, #3]
 8005dda:	305a      	adds	r0, #90	; 0x5a
 8005ddc:	b2c0      	uxtb	r0, r0
 8005dde:	f7fe fcf3 	bl	80047c8 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8005de2:	483e      	ldr	r0, [pc, #248]	; (8005edc <report_gcode_modes+0x15c>)
 8005de4:	f7fe fce4 	bl	80047b0 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(94-gc_state.modal.feed_rate);
 8005de8:	7860      	ldrb	r0, [r4, #1]
 8005dea:	f1c0 005e 	rsb	r0, r0, #94	; 0x5e
 8005dee:	b2c0      	uxtb	r0, r0
 8005df0:	f7fe fcea 	bl	80047c8 <print_uint8_base10>

  if (gc_state.modal.program_flow) {
 8005df4:	79e3      	ldrb	r3, [r4, #7]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d135      	bne.n	8005e66 <report_gcode_modes+0xe6>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8005dfa:	4839      	ldr	r0, [pc, #228]	; (8005ee0 <report_gcode_modes+0x160>)
 8005dfc:	f7fe fcd8 	bl	80047b0 <printString>
        break;
    }
  }

  report_util_gcode_modes_M();
  switch (gc_state.modal.spindle) {
 8005e00:	7a63      	ldrb	r3, [r4, #9]
 8005e02:	2b10      	cmp	r3, #16
 8005e04:	d041      	beq.n	8005e8a <report_gcode_modes+0x10a>
 8005e06:	2b20      	cmp	r3, #32
 8005e08:	d050      	beq.n	8005eac <report_gcode_modes+0x12c>
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d04a      	beq.n	8005ea4 <report_gcode_modes+0x124>
    case SPINDLE_DISABLE : serial_write('5'); break;
  }

  //report_util_gcode_modes_M();
  #ifdef ENABLE_M7
    if (gc_state.modal.coolant) { // Note: Multiple coolant states may be active at the same time.
 8005e0e:	7a23      	ldrb	r3, [r4, #8]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d040      	beq.n	8005e96 <report_gcode_modes+0x116>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 8005e14:	061a      	lsls	r2, r3, #24
 8005e16:	d44d      	bmi.n	8005eb4 <report_gcode_modes+0x134>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 8005e18:	065b      	lsls	r3, r3, #25
 8005e1a:	d41a      	bmi.n	8005e52 <report_gcode_modes+0xd2>
			report_util_gcode_modes_M();
			print_uint8_base10(56);
		}
	#endif

  printPgmString(PSTR(" T"));
 8005e1c:	4831      	ldr	r0, [pc, #196]	; (8005ee4 <report_gcode_modes+0x164>)
 8005e1e:	f7fe fcc7 	bl	80047b0 <printString>
  print_uint8_base10(gc_state.tool);
 8005e22:	7d20      	ldrb	r0, [r4, #20]
 8005e24:	f7fe fcd0 	bl	80047c8 <print_uint8_base10>

  printPgmString(PSTR(" F"));
 8005e28:	482f      	ldr	r0, [pc, #188]	; (8005ee8 <report_gcode_modes+0x168>)
 8005e2a:	f7fe fcc1 	bl	80047b0 <printString>
  printFloat_RateValue(gc_state.feed_rate);
 8005e2e:	6920      	ldr	r0, [r4, #16]
 8005e30:	f7fe ff24 	bl	8004c7c <printFloat_RateValue>

  #ifdef VARIABLE_SPINDLE
    printPgmString(PSTR(" S"));
 8005e34:	482d      	ldr	r0, [pc, #180]	; (8005eec <report_gcode_modes+0x16c>)
 8005e36:	f7fe fcbb 	bl	80047b0 <printString>
    printFloat(gc_state.spindle_speed,N_DECIMAL_RPMVALUE);
 8005e3a:	68e0      	ldr	r0, [r4, #12]
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	f7fe fd01 	bl	8004844 <printFloat>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8005e42:	205d      	movs	r0, #93	; 0x5d
 8005e44:	f000 face 	bl	80063e4 <serial_write>
  #endif

  report_util_feedback_line_feed();
}
 8005e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005e4c:	4828      	ldr	r0, [pc, #160]	; (8005ef0 <report_gcode_modes+0x170>)
 8005e4e:	f7fe bcaf 	b.w	80047b0 <printString>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8005e52:	4823      	ldr	r0, [pc, #140]	; (8005ee0 <report_gcode_modes+0x160>)
 8005e54:	f7fe fcac 	bl	80047b0 <printString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 8005e58:	2038      	movs	r0, #56	; 0x38
 8005e5a:	f000 fac3 	bl	80063e4 <serial_write>
 8005e5e:	e7dd      	b.n	8005e1c <report_gcode_modes+0x9c>
    print_uint8_base10(gc_state.modal.motion);
 8005e60:	f7fe fcb2 	bl	80047c8 <print_uint8_base10>
 8005e64:	e79c      	b.n	8005da0 <report_gcode_modes+0x20>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8005e66:	481e      	ldr	r0, [pc, #120]	; (8005ee0 <report_gcode_modes+0x160>)
 8005e68:	f7fe fca2 	bl	80047b0 <printString>
    switch (gc_state.modal.program_flow) {
 8005e6c:	79e0      	ldrb	r0, [r4, #7]
 8005e6e:	2803      	cmp	r0, #3
 8005e70:	d02a      	beq.n	8005ec8 <report_gcode_modes+0x148>
 8005e72:	281e      	cmp	r0, #30
 8005e74:	d001      	beq.n	8005e7a <report_gcode_modes+0xfa>
 8005e76:	2802      	cmp	r0, #2
 8005e78:	d1bf      	bne.n	8005dfa <report_gcode_modes+0x7a>
        print_uint8_base10(gc_state.modal.program_flow);
 8005e7a:	f7fe fca5 	bl	80047c8 <print_uint8_base10>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8005e7e:	4818      	ldr	r0, [pc, #96]	; (8005ee0 <report_gcode_modes+0x160>)
 8005e80:	f7fe fc96 	bl	80047b0 <printString>
  switch (gc_state.modal.spindle) {
 8005e84:	7a63      	ldrb	r3, [r4, #9]
 8005e86:	2b10      	cmp	r3, #16
 8005e88:	d1bd      	bne.n	8005e06 <report_gcode_modes+0x86>
    case SPINDLE_ENABLE_CW : serial_write('3'); break;
 8005e8a:	2033      	movs	r0, #51	; 0x33
 8005e8c:	f000 faaa 	bl	80063e4 <serial_write>
    if (gc_state.modal.coolant) { // Note: Multiple coolant states may be active at the same time.
 8005e90:	7a23      	ldrb	r3, [r4, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1be      	bne.n	8005e14 <report_gcode_modes+0x94>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8005e96:	4812      	ldr	r0, [pc, #72]	; (8005ee0 <report_gcode_modes+0x160>)
 8005e98:	f7fe fc8a 	bl	80047b0 <printString>
    } else { report_util_gcode_modes_M(); serial_write('9'); }
 8005e9c:	2039      	movs	r0, #57	; 0x39
 8005e9e:	f000 faa1 	bl	80063e4 <serial_write>
 8005ea2:	e7bb      	b.n	8005e1c <report_gcode_modes+0x9c>
    case SPINDLE_DISABLE : serial_write('5'); break;
 8005ea4:	2035      	movs	r0, #53	; 0x35
 8005ea6:	f000 fa9d 	bl	80063e4 <serial_write>
 8005eaa:	e7b0      	b.n	8005e0e <report_gcode_modes+0x8e>
    case SPINDLE_ENABLE_CCW : serial_write('4'); break;
 8005eac:	2034      	movs	r0, #52	; 0x34
 8005eae:	f000 fa99 	bl	80063e4 <serial_write>
 8005eb2:	e7ac      	b.n	8005e0e <report_gcode_modes+0x8e>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8005eb4:	480a      	ldr	r0, [pc, #40]	; (8005ee0 <report_gcode_modes+0x160>)
 8005eb6:	f7fe fc7b 	bl	80047b0 <printString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 8005eba:	2037      	movs	r0, #55	; 0x37
 8005ebc:	f000 fa92 	bl	80063e4 <serial_write>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 8005ec0:	7a23      	ldrb	r3, [r4, #8]
 8005ec2:	065b      	lsls	r3, r3, #25
 8005ec4:	d5aa      	bpl.n	8005e1c <report_gcode_modes+0x9c>
 8005ec6:	e7c4      	b.n	8005e52 <report_gcode_modes+0xd2>
      case PROGRAM_FLOW_PAUSED : serial_write('0'); break;
 8005ec8:	2030      	movs	r0, #48	; 0x30
 8005eca:	f000 fa8b 	bl	80063e4 <serial_write>
 8005ece:	e794      	b.n	8005dfa <report_gcode_modes+0x7a>
 8005ed0:	20000980 	.word	0x20000980
 8005ed4:	0800aecc 	.word	0x0800aecc
 8005ed8:	0800aed4 	.word	0x0800aed4
 8005edc:	0800aed8 	.word	0x0800aed8
 8005ee0:	0800aedc 	.word	0x0800aedc
 8005ee4:	0800aee0 	.word	0x0800aee0
 8005ee8:	0800aee4 	.word	0x0800aee4
 8005eec:	0800aee8 	.word	0x0800aee8
 8005ef0:	0800ad1c 	.word	0x0800ad1c

08005ef4 <report_startup_line>:

// Prints specified startup line
void report_startup_line(uint8_t n, char *line)
{
 8005ef4:	b538      	push	{r3, r4, r5, lr}
 8005ef6:	4605      	mov	r5, r0
 8005ef8:	460c      	mov	r4, r1
  printPgmString(PSTR("$N"));
 8005efa:	4808      	ldr	r0, [pc, #32]	; (8005f1c <report_startup_line+0x28>)
 8005efc:	f7fe fc58 	bl	80047b0 <printString>
  print_uint8_base10(n);
 8005f00:	4628      	mov	r0, r5
 8005f02:	f7fe fc61 	bl	80047c8 <print_uint8_base10>
  serial_write('=');
 8005f06:	203d      	movs	r0, #61	; 0x3d
 8005f08:	f000 fa6c 	bl	80063e4 <serial_write>
  printString(line);
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	f7fe fc4f 	bl	80047b0 <printString>
  report_util_line_feed();
}
 8005f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005f16:	4802      	ldr	r0, [pc, #8]	; (8005f20 <report_startup_line+0x2c>)
 8005f18:	f7fe bc4a 	b.w	80047b0 <printString>
 8005f1c:	0800aeec 	.word	0x0800aeec
 8005f20:	0800ad1c 	.word	0x0800ad1c

08005f24 <report_execute_startup_message>:

void report_execute_startup_message(char *line, uint8_t status_code)
{
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	4605      	mov	r5, r0
 8005f28:	460c      	mov	r4, r1
  serial_write('>');
 8005f2a:	203e      	movs	r0, #62	; 0x3e
 8005f2c:	f000 fa5a 	bl	80063e4 <serial_write>
  printString(line);
 8005f30:	4628      	mov	r0, r5
 8005f32:	f7fe fc3d 	bl	80047b0 <printString>
  serial_write(':');
 8005f36:	203a      	movs	r0, #58	; 0x3a
 8005f38:	f000 fa54 	bl	80063e4 <serial_write>
  switch(status_code) {
 8005f3c:	b924      	cbnz	r4, 8005f48 <report_execute_startup_message+0x24>
  report_status_message(status_code);
}
 8005f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      printPgmString(PSTR("ok\r\n")); break;
 8005f42:	4807      	ldr	r0, [pc, #28]	; (8005f60 <report_execute_startup_message+0x3c>)
 8005f44:	f7fe bc34 	b.w	80047b0 <printString>
      printPgmString(PSTR("error:"));
 8005f48:	4806      	ldr	r0, [pc, #24]	; (8005f64 <report_execute_startup_message+0x40>)
 8005f4a:	f7fe fc31 	bl	80047b0 <printString>
      print_uint8_base10(status_code);
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f7fe fc3a 	bl	80047c8 <print_uint8_base10>
}
 8005f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005f58:	4803      	ldr	r0, [pc, #12]	; (8005f68 <report_execute_startup_message+0x44>)
 8005f5a:	f7fe bc29 	b.w	80047b0 <printString>
 8005f5e:	bf00      	nop
 8005f60:	0800ad0c 	.word	0x0800ad0c
 8005f64:	0800ad14 	.word	0x0800ad14
 8005f68:	0800ad1c 	.word	0x0800ad1c

08005f6c <report_build_info>:

// Prints build info line
void report_build_info(char *line)
{
 8005f6c:	b538      	push	{r3, r4, r5, lr}
 8005f6e:	4604      	mov	r4, r0
  printPgmString(PSTR("[VER:" GRBL_VERSION "." GRBL_VERSION_BUILD ":"));
 8005f70:	4814      	ldr	r0, [pc, #80]	; (8005fc4 <report_build_info+0x58>)
 8005f72:	f7fe fc1d 	bl	80047b0 <printString>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005f76:	4d14      	ldr	r5, [pc, #80]	; (8005fc8 <report_build_info+0x5c>)
  printString(line);
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f7fe fc19 	bl	80047b0 <printString>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8005f7e:	205d      	movs	r0, #93	; 0x5d
 8005f80:	f000 fa30 	bl	80063e4 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005f84:	4628      	mov	r0, r5
 8005f86:	f7fe fc13 	bl	80047b0 <printString>
  report_util_feedback_line_feed();
  printPgmString(PSTR("[OPT:")); // Generate compile-time build option list
 8005f8a:	4810      	ldr	r0, [pc, #64]	; (8005fcc <report_build_info+0x60>)
 8005f8c:	f7fe fc10 	bl	80047b0 <printString>
  #ifdef VARIABLE_SPINDLE
    serial_write('V');
 8005f90:	2056      	movs	r0, #86	; 0x56
 8005f92:	f000 fa27 	bl	80063e4 <serial_write>
  #endif
  #ifdef USE_LINE_NUMBERS
    serial_write('N');
  #endif
  #ifdef ENABLE_M7
    serial_write('M');
 8005f96:	204d      	movs	r0, #77	; 0x4d
 8005f98:	f000 fa24 	bl	80063e4 <serial_write>
	#ifndef HOMING_INIT_LOCK
		serial_write('L');
	#endif

  // NOTE: Compiled values, like override increments/max/min values, may be added at some point later.
	serial_write(',');
 8005f9c:	202c      	movs	r0, #44	; 0x2c
 8005f9e:	f000 fa21 	bl	80063e4 <serial_write>
	print_uint8_base10(BLOCK_BUFFER_SIZE - 1);
 8005fa2:	2023      	movs	r0, #35	; 0x23
 8005fa4:	f7fe fc10 	bl	80047c8 <print_uint8_base10>
	serial_write(',');
 8005fa8:	202c      	movs	r0, #44	; 0x2c
 8005faa:	f000 fa1b 	bl	80063e4 <serial_write>
	print_uint8_base10(RX_BUFFER_SIZE);
 8005fae:	20fe      	movs	r0, #254	; 0xfe
 8005fb0:	f7fe fc0a 	bl	80047c8 <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8005fb4:	205d      	movs	r0, #93	; 0x5d
 8005fb6:	f000 fa15 	bl	80063e4 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005fba:	4628      	mov	r0, r5

	report_util_feedback_line_feed();
}
 8005fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005fc0:	f7fe bbf6 	b.w	80047b0 <printString>
 8005fc4:	0800aef0 	.word	0x0800aef0
 8005fc8:	0800ad1c 	.word	0x0800ad1c
 8005fcc:	0800af04 	.word	0x0800af04

08005fd0 <report_realtime_status>:
 // and the actual location of the CNC machine. Users may change the following function to their
 // specific needs, but the desired real-time data report must be as short as possible. This is
 // requires as it minimizes the computational overhead and allows grbl to keep running smoothly,
 // especially during g-code programs with fast, short line segments and high frequency reports (5-20Hz).
void report_realtime_status()
{
 8005fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fd2:	b08d      	sub	sp, #52	; 0x34
  uint8_t idx;
  int32_t current_position[N_AXIS]; // Copy current state of the system position variable
  memcpy(current_position, sys_position, sizeof(sys_position));
 8005fd4:	466c      	mov	r4, sp
 8005fd6:	4ba2      	ldr	r3, [pc, #648]	; (8006260 <report_realtime_status+0x290>)
 8005fd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005fda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position, current_position);
 8005fde:	4621      	mov	r1, r4
 8005fe0:	a804      	add	r0, sp, #16

  // Report current machine state and sub-states
  serial_write('<');
  switch (sys.state) {
 8005fe2:	4ca0      	ldr	r4, [pc, #640]	; (8006264 <report_realtime_status+0x294>)
  system_convert_array_steps_to_mpos(print_position, current_position);
 8005fe4:	f002 fa6c 	bl	80084c0 <system_convert_array_steps_to_mpos>
  serial_write('<');
 8005fe8:	203c      	movs	r0, #60	; 0x3c
 8005fea:	f000 f9fb 	bl	80063e4 <serial_write>
  switch (sys.state) {
 8005fee:	7823      	ldrb	r3, [r4, #0]
 8005ff0:	2b20      	cmp	r3, #32
 8005ff2:	d87b      	bhi.n	80060ec <report_realtime_status+0x11c>
 8005ff4:	2b20      	cmp	r3, #32
 8005ff6:	d82a      	bhi.n	800604e <report_realtime_status+0x7e>
 8005ff8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005ffc:	01910185 	.word	0x01910185
 8006000:	00290181 	.word	0x00290181
 8006004:	00290189 	.word	0x00290189
 8006008:	00290029 	.word	0x00290029
 800600c:	0029018d 	.word	0x0029018d
 8006010:	00290029 	.word	0x00290029
 8006014:	00290029 	.word	0x00290029
 8006018:	00290029 	.word	0x00290029
 800601c:	00290021 	.word	0x00290021
 8006020:	00290029 	.word	0x00290029
 8006024:	00290029 	.word	0x00290029
 8006028:	00290029 	.word	0x00290029
 800602c:	00290029 	.word	0x00290029
 8006030:	00290029 	.word	0x00290029
 8006034:	00290029 	.word	0x00290029
 8006038:	00290029 	.word	0x00290029
 800603c:	0026      	.short	0x0026
  case STATE_IDLE: printPgmString(PSTR("Idle")); break;
  case STATE_CYCLE: printPgmString(PSTR("Run")); break;
  case STATE_HOLD:
    if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 800603e:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8006042:	2b00      	cmp	r3, #0
 8006044:	f280 8195 	bge.w	8006372 <report_realtime_status+0x3a2>
      printPgmString(PSTR("Hold:"));
      if (sys.suspend & SUSPEND_HOLD_COMPLETE) { serial_write('0'); } // Ready to resume
      else { serial_write('1'); } // Actively holding
      break;
    } // Continues to print jog state during jog cancel.
  case STATE_JOG: printPgmString(PSTR("Jog")); break;
 8006048:	4887      	ldr	r0, [pc, #540]	; (8006268 <report_realtime_status+0x298>)
 800604a:	f7fe fbb1 	bl	80047b0 <printString>
    break;
  case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
  }

  float wco[N_AXIS];
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 800604e:	4f87      	ldr	r7, [pc, #540]	; (800626c <report_realtime_status+0x29c>)
 8006050:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006054:	07dd      	lsls	r5, r3, #31
 8006056:	d556      	bpl.n	8006106 <report_realtime_status+0x136>
 8006058:	7b63      	ldrb	r3, [r4, #13]
 800605a:	2b00      	cmp	r3, #0
 800605c:	f000 80d2 	beq.w	8006204 <report_realtime_status+0x234>
    }
  }

  // Report machine position
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE)) {
    printPgmString(PSTR("|MPos:"));
 8006060:	4883      	ldr	r0, [pc, #524]	; (8006270 <report_realtime_status+0x2a0>)
 8006062:	f7fe fba5 	bl	80047b0 <printString>
    printFloat_CoordValue(axis_value[idx]);
 8006066:	9804      	ldr	r0, [sp, #16]
 8006068:	f7fe fcf0 	bl	8004a4c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 800606c:	ad04      	add	r5, sp, #16
 800606e:	ae07      	add	r6, sp, #28
 8006070:	202c      	movs	r0, #44	; 0x2c
 8006072:	f000 f9b7 	bl	80063e4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006076:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800607a:	f7fe fce7 	bl	8004a4c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 800607e:	42ae      	cmp	r6, r5
 8006080:	d1f6      	bne.n	8006070 <report_realtime_status+0xa0>
  }
  report_util_axis_values(print_position);

  // Returns planner and serial read buffer states.
#ifdef REPORT_FIELD_BUFFER_STATE
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_BUFFER_STATE)) {
 8006082:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006086:	0798      	lsls	r0, r3, #30
 8006088:	f100 80db 	bmi.w	8006242 <report_realtime_status+0x272>
#endif

  // Report realtime feed speed
#ifdef REPORT_FIELD_CURRENT_FEED_SPEED
#ifdef VARIABLE_SPINDLE
  printPgmString(PSTR("|FS:"));
 800608c:	4879      	ldr	r0, [pc, #484]	; (8006274 <report_realtime_status+0x2a4>)
 800608e:	f7fe fb8f 	bl	80047b0 <printString>
  printFloat_RateValue(st_get_realtime_rate());
 8006092:	f001 ffaf 	bl	8007ff4 <st_get_realtime_rate>
 8006096:	f7fe fdf1 	bl	8004c7c <printFloat_RateValue>
  serial_write(',');
 800609a:	202c      	movs	r0, #44	; 0x2c
 800609c:	f000 f9a2 	bl	80063e4 <serial_write>
  printFloat(sys.spindle_speed, N_DECIMAL_RPMVALUE);
 80060a0:	2100      	movs	r1, #0
 80060a2:	6920      	ldr	r0, [r4, #16]
 80060a4:	f7fe fbce 	bl	8004844 <printFloat>
  printFloat_RateValue(st_get_realtime_rate());
#endif      
#endif

#ifdef REPORT_FIELD_PIN_STATE
  uint8_t lim_pin_state = limits_get_state();
 80060a8:	f7fc fe9e 	bl	8002de8 <limits_get_state>
 80060ac:	4605      	mov	r5, r0
  uint8_t ctrl_pin_state = system_control_get_state();
 80060ae:	f001 ffed 	bl	800808c <system_control_get_state>
 80060b2:	4606      	mov	r6, r0
  uint8_t prb_pin_state = probe_get_state();
 80060b4:	f7fe fec8 	bl	8004e48 <probe_get_state>
  if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 80060b8:	ea45 0306 	orr.w	r3, r5, r6
 80060bc:	4303      	orrs	r3, r0
 80060be:	b2db      	uxtb	r3, r3
  uint8_t prb_pin_state = probe_get_state();
 80060c0:	4607      	mov	r7, r0
  if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f040 80e8 	bne.w	8006298 <report_realtime_status+0x2c8>
    }
  }
#endif

#ifdef REPORT_FIELD_WORK_COORD_OFFSET
  if (sys.report_wco_counter > 0) { sys.report_wco_counter--; }
 80060c8:	7b63      	ldrb	r3, [r4, #13]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d07e      	beq.n	80061cc <report_realtime_status+0x1fc>
 80060ce:	3b01      	subs	r3, #1
 80060d0:	7363      	strb	r3, [r4, #13]
    report_util_axis_values(wco);
  }
#endif

  #ifdef REPORT_FIELD_OVERRIDES
    if (sys.report_ovr_counter > 0) { sys.report_ovr_counter--; }
 80060d2:	7b23      	ldrb	r3, [r4, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d049      	beq.n	800616c <report_realtime_status+0x19c>
 80060d8:	3b01      	subs	r3, #1
 80060da:	7323      	strb	r3, [r4, #12]
        #endif
      }
    }
  #endif

  serial_write('>');
 80060dc:	203e      	movs	r0, #62	; 0x3e
 80060de:	f000 f981 	bl	80063e4 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80060e2:	4865      	ldr	r0, [pc, #404]	; (8006278 <report_realtime_status+0x2a8>)
 80060e4:	f7fe fb64 	bl	80047b0 <printString>
  report_util_line_feed();
}
 80060e8:	b00d      	add	sp, #52	; 0x34
 80060ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sys.state) {
 80060ec:	2b40      	cmp	r3, #64	; 0x40
 80060ee:	f000 811a 	beq.w	8006326 <report_realtime_status+0x356>
 80060f2:	2b80      	cmp	r3, #128	; 0x80
 80060f4:	d1ab      	bne.n	800604e <report_realtime_status+0x7e>
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 80060f6:	4f5d      	ldr	r7, [pc, #372]	; (800626c <report_realtime_status+0x29c>)
  case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
 80060f8:	4860      	ldr	r0, [pc, #384]	; (800627c <report_realtime_status+0x2ac>)
 80060fa:	f7fe fb59 	bl	80047b0 <printString>
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 80060fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006102:	07dd      	lsls	r5, r3, #31
 8006104:	d4a8      	bmi.n	8006058 <report_realtime_status+0x88>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006106:	4d5e      	ldr	r5, [pc, #376]	; (8006280 <report_realtime_status+0x2b0>)
 8006108:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800610a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800610c:	f7fa faba 	bl	8000684 <__addsf3>
 8006110:	4601      	mov	r1, r0
        print_position[idx] -= wco[idx];
 8006112:	9804      	ldr	r0, [sp, #16]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006114:	9108      	str	r1, [sp, #32]
        print_position[idx] -= wco[idx];
 8006116:	f7fa fab3 	bl	8000680 <__aeabi_fsub>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 800611a:	6b29      	ldr	r1, [r5, #48]	; 0x30
        print_position[idx] -= wco[idx];
 800611c:	9004      	str	r0, [sp, #16]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 800611e:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8006120:	f7fa fab0 	bl	8000684 <__addsf3>
 8006124:	4601      	mov	r1, r0
        print_position[idx] -= wco[idx];
 8006126:	9805      	ldr	r0, [sp, #20]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006128:	9109      	str	r1, [sp, #36]	; 0x24
        print_position[idx] -= wco[idx];
 800612a:	f7fa faa9 	bl	8000680 <__aeabi_fsub>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 800612e:	6cee      	ldr	r6, [r5, #76]	; 0x4c
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006130:	6b69      	ldr	r1, [r5, #52]	; 0x34
        print_position[idx] -= wco[idx];
 8006132:	9005      	str	r0, [sp, #20]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006134:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8006136:	f7fa faa5 	bl	8000684 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 800613a:	4631      	mov	r1, r6
 800613c:	f7fa faa2 	bl	8000684 <__addsf3>
 8006140:	4601      	mov	r1, r0
        print_position[idx] -= wco[idx];
 8006142:	9806      	ldr	r0, [sp, #24]
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8006144:	910a      	str	r1, [sp, #40]	; 0x28
        print_position[idx] -= wco[idx];
 8006146:	f7fa fa9b 	bl	8000680 <__aeabi_fsub>
 800614a:	4603      	mov	r3, r0
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 800614c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800614e:	6ca8      	ldr	r0, [r5, #72]	; 0x48
        print_position[idx] -= wco[idx];
 8006150:	9306      	str	r3, [sp, #24]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006152:	f7fa fa97 	bl	8000684 <__addsf3>
 8006156:	4601      	mov	r1, r0
        print_position[idx] -= wco[idx];
 8006158:	9807      	ldr	r0, [sp, #28]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 800615a:	910b      	str	r1, [sp, #44]	; 0x2c
        print_position[idx] -= wco[idx];
 800615c:	f7fa fa90 	bl	8000680 <__aeabi_fsub>
 8006160:	4603      	mov	r3, r0
    printPgmString(PSTR("|WPos:"));
 8006162:	4848      	ldr	r0, [pc, #288]	; (8006284 <report_realtime_status+0x2b4>)
        print_position[idx] -= wco[idx];
 8006164:	9307      	str	r3, [sp, #28]
    printPgmString(PSTR("|WPos:"));
 8006166:	f7fe fb23 	bl	80047b0 <printString>
 800616a:	e77c      	b.n	8006066 <report_realtime_status+0x96>
      if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 800616c:	7823      	ldrb	r3, [r4, #0]
      printPgmString(PSTR("|Ov:"));
 800616e:	4846      	ldr	r0, [pc, #280]	; (8006288 <report_realtime_status+0x2b8>)
      else { sys.report_ovr_counter = (REPORT_OVR_REFRESH_IDLE_COUNT - 1); }
 8006170:	f013 0f7c 	tst.w	r3, #124	; 0x7c
 8006174:	bf14      	ite	ne
 8006176:	2313      	movne	r3, #19
 8006178:	2309      	moveq	r3, #9
 800617a:	7323      	strb	r3, [r4, #12]
      printPgmString(PSTR("|Ov:"));
 800617c:	f7fe fb18 	bl	80047b0 <printString>
      print_uint8_base10(sys.f_override);
 8006180:	7a20      	ldrb	r0, [r4, #8]
 8006182:	f7fe fb21 	bl	80047c8 <print_uint8_base10>
      serial_write(',');
 8006186:	202c      	movs	r0, #44	; 0x2c
 8006188:	f000 f92c 	bl	80063e4 <serial_write>
      print_uint8_base10(sys.r_override);
 800618c:	7a60      	ldrb	r0, [r4, #9]
 800618e:	f7fe fb1b 	bl	80047c8 <print_uint8_base10>
      serial_write(',');
 8006192:	202c      	movs	r0, #44	; 0x2c
 8006194:	f000 f926 	bl	80063e4 <serial_write>
      print_uint8_base10(sys.spindle_speed_ovr);
 8006198:	7aa0      	ldrb	r0, [r4, #10]
 800619a:	f7fe fb15 	bl	80047c8 <print_uint8_base10>
      uint8_t sp_state = spindle_get_state();
 800619e:	f000 fd55 	bl	8006c4c <spindle_get_state>
 80061a2:	4605      	mov	r5, r0
      uint8_t cl_state = coolant_get_state();
 80061a4:	f7fb fa22 	bl	80015ec <coolant_get_state>
 80061a8:	4604      	mov	r4, r0
      if (sp_state || cl_state) {
 80061aa:	2d00      	cmp	r5, #0
 80061ac:	f040 8092 	bne.w	80062d4 <report_realtime_status+0x304>
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d093      	beq.n	80060dc <report_realtime_status+0x10c>
        printPgmString(PSTR("|A:"));
 80061b4:	4835      	ldr	r0, [pc, #212]	; (800628c <report_realtime_status+0x2bc>)
 80061b6:	f7fe fafb 	bl	80047b0 <printString>
        if (cl_state & COOLANT_STATE_FLOOD) { serial_write('F'); }
 80061ba:	07e2      	lsls	r2, r4, #31
 80061bc:	f100 8095 	bmi.w	80062ea <report_realtime_status+0x31a>
          if (cl_state & COOLANT_STATE_MIST) { serial_write('M'); }
 80061c0:	07a3      	lsls	r3, r4, #30
 80061c2:	d58b      	bpl.n	80060dc <report_realtime_status+0x10c>
 80061c4:	204d      	movs	r0, #77	; 0x4d
 80061c6:	f000 f90d 	bl	80063e4 <serial_write>
 80061ca:	e787      	b.n	80060dc <report_realtime_status+0x10c>
    if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 80061cc:	7822      	ldrb	r2, [r4, #0]
    if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 80061ce:	7b23      	ldrb	r3, [r4, #12]
    else { sys.report_wco_counter = (REPORT_WCO_REFRESH_IDLE_COUNT - 1); }
 80061d0:	f012 0f7c 	tst.w	r2, #124	; 0x7c
 80061d4:	bf14      	ite	ne
 80061d6:	221d      	movne	r2, #29
 80061d8:	2209      	moveq	r2, #9
 80061da:	7362      	strb	r2, [r4, #13]
    if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d02d      	beq.n	800623c <report_realtime_status+0x26c>
    printPgmString(PSTR("|WCO:"));
 80061e0:	482b      	ldr	r0, [pc, #172]	; (8006290 <report_realtime_status+0x2c0>)
 80061e2:	f7fe fae5 	bl	80047b0 <printString>
    printFloat_CoordValue(axis_value[idx]);
 80061e6:	9808      	ldr	r0, [sp, #32]
 80061e8:	f7fe fc30 	bl	8004a4c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80061ec:	ad08      	add	r5, sp, #32
 80061ee:	ae0b      	add	r6, sp, #44	; 0x2c
 80061f0:	202c      	movs	r0, #44	; 0x2c
 80061f2:	f000 f8f7 	bl	80063e4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80061f6:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80061fa:	f7fe fc27 	bl	8004a4c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80061fe:	42b5      	cmp	r5, r6
 8006200:	d1f6      	bne.n	80061f0 <report_realtime_status+0x220>
 8006202:	e766      	b.n	80060d2 <report_realtime_status+0x102>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006204:	4d1e      	ldr	r5, [pc, #120]	; (8006280 <report_realtime_status+0x2b0>)
 8006206:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8006208:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800620a:	f7fa fa3b 	bl	8000684 <__addsf3>
 800620e:	4603      	mov	r3, r0
 8006210:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8006212:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8006214:	9308      	str	r3, [sp, #32]
 8006216:	f7fa fa35 	bl	8000684 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 800621a:	6cee      	ldr	r6, [r5, #76]	; 0x4c
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 800621c:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800621e:	9009      	str	r0, [sp, #36]	; 0x24
 8006220:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8006222:	f7fa fa2f 	bl	8000684 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8006226:	4631      	mov	r1, r6
 8006228:	f7fa fa2c 	bl	8000684 <__addsf3>
 800622c:	4603      	mov	r3, r0
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 800622e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8006230:	6ca8      	ldr	r0, [r5, #72]	; 0x48
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8006232:	930a      	str	r3, [sp, #40]	; 0x28
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006234:	f7fa fa26 	bl	8000684 <__addsf3>
 8006238:	900b      	str	r0, [sp, #44]	; 0x2c
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE)) {
 800623a:	e711      	b.n	8006060 <report_realtime_status+0x90>
    if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 800623c:	2301      	movs	r3, #1
 800623e:	7323      	strb	r3, [r4, #12]
 8006240:	e7ce      	b.n	80061e0 <report_realtime_status+0x210>
    printPgmString(PSTR("|Bf:"));
 8006242:	4814      	ldr	r0, [pc, #80]	; (8006294 <report_realtime_status+0x2c4>)
 8006244:	f7fe fab4 	bl	80047b0 <printString>
    print_uint8_base10(plan_get_block_buffer_available());
 8006248:	f7fe fa92 	bl	8004770 <plan_get_block_buffer_available>
 800624c:	f7fe fabc 	bl	80047c8 <print_uint8_base10>
    serial_write(',');
 8006250:	202c      	movs	r0, #44	; 0x2c
 8006252:	f000 f8c7 	bl	80063e4 <serial_write>
    print_uint8_base10(serial_get_rx_buffer_available());
 8006256:	f000 f8b1 	bl	80063bc <serial_get_rx_buffer_available>
 800625a:	f7fe fab5 	bl	80047c8 <print_uint8_base10>
 800625e:	e715      	b.n	800608c <report_realtime_status+0xbc>
 8006260:	200009e4 	.word	0x200009e4
 8006264:	200009d0 	.word	0x200009d0
 8006268:	0800af20 	.word	0x0800af20
 800626c:	200013ec 	.word	0x200013ec
 8006270:	0800af4c 	.word	0x0800af4c
 8006274:	0800af5c 	.word	0x0800af5c
 8006278:	0800ad1c 	.word	0x0800ad1c
 800627c:	0800af44 	.word	0x0800af44
 8006280:	20000980 	.word	0x20000980
 8006284:	0800af80 	.word	0x0800af80
 8006288:	0800af74 	.word	0x0800af74
 800628c:	0800af7c 	.word	0x0800af7c
 8006290:	0800af6c 	.word	0x0800af6c
 8006294:	0800af54 	.word	0x0800af54
    printPgmString(PSTR("|Pn:"));
 8006298:	483f      	ldr	r0, [pc, #252]	; (8006398 <report_realtime_status+0x3c8>)
 800629a:	f7fe fa89 	bl	80047b0 <printString>
    if (prb_pin_state) { serial_write('P'); }
 800629e:	bb47      	cbnz	r7, 80062f2 <report_realtime_status+0x322>
    if (lim_pin_state) {
 80062a0:	b155      	cbz	r5, 80062b8 <report_realtime_status+0x2e8>
      if (bit_istrue(lim_pin_state, bit(X_AXIS))) { serial_write('X'); }
 80062a2:	07e9      	lsls	r1, r5, #31
 80062a4:	d459      	bmi.n	800635a <report_realtime_status+0x38a>
      if (bit_istrue(lim_pin_state, bit(Y_AXIS))) { serial_write('Y'); }
 80062a6:	07aa      	lsls	r2, r5, #30
 80062a8:	d453      	bmi.n	8006352 <report_realtime_status+0x382>
      if (bit_istrue(lim_pin_state, bit(Z_AXIS))) { serial_write('Z'); }
 80062aa:	076b      	lsls	r3, r5, #29
 80062ac:	d44d      	bmi.n	800634a <report_realtime_status+0x37a>
	  if (bit_istrue(lim_pin_state, bit(A_AXIS))) { serial_write('A'); }
 80062ae:	072f      	lsls	r7, r5, #28
 80062b0:	d502      	bpl.n	80062b8 <report_realtime_status+0x2e8>
 80062b2:	2041      	movs	r0, #65	; 0x41
 80062b4:	f000 f896 	bl	80063e4 <serial_write>
    if (ctrl_pin_state) {
 80062b8:	2e00      	cmp	r6, #0
 80062ba:	f43f af05 	beq.w	80060c8 <report_realtime_status+0xf8>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 80062be:	07f5      	lsls	r5, r6, #31
 80062c0:	d453      	bmi.n	800636a <report_realtime_status+0x39a>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 80062c2:	07b0      	lsls	r0, r6, #30
 80062c4:	d44d      	bmi.n	8006362 <report_realtime_status+0x392>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_CYCLE_START)) { serial_write('S'); }
 80062c6:	0771      	lsls	r1, r6, #29
 80062c8:	f57f aefe 	bpl.w	80060c8 <report_realtime_status+0xf8>
 80062cc:	2053      	movs	r0, #83	; 0x53
 80062ce:	f000 f889 	bl	80063e4 <serial_write>
 80062d2:	e6f9      	b.n	80060c8 <report_realtime_status+0xf8>
        printPgmString(PSTR("|A:"));
 80062d4:	4831      	ldr	r0, [pc, #196]	; (800639c <report_realtime_status+0x3cc>)
 80062d6:	f7fe fa6b 	bl	80047b0 <printString>
              if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
 80062da:	2d01      	cmp	r5, #1
 80062dc:	d031      	beq.n	8006342 <report_realtime_status+0x372>
              else { serial_write('C'); } // CCW
 80062de:	2043      	movs	r0, #67	; 0x43
 80062e0:	f000 f880 	bl	80063e4 <serial_write>
        if (cl_state & COOLANT_STATE_FLOOD) { serial_write('F'); }
 80062e4:	07e2      	lsls	r2, r4, #31
 80062e6:	f57f af6b 	bpl.w	80061c0 <report_realtime_status+0x1f0>
 80062ea:	2046      	movs	r0, #70	; 0x46
 80062ec:	f000 f87a 	bl	80063e4 <serial_write>
 80062f0:	e766      	b.n	80061c0 <report_realtime_status+0x1f0>
    if (prb_pin_state) { serial_write('P'); }
 80062f2:	2050      	movs	r0, #80	; 0x50
 80062f4:	f000 f876 	bl	80063e4 <serial_write>
    if (lim_pin_state) {
 80062f8:	2d00      	cmp	r5, #0
 80062fa:	d0dd      	beq.n	80062b8 <report_realtime_status+0x2e8>
 80062fc:	e7d1      	b.n	80062a2 <report_realtime_status+0x2d2>
  case STATE_CHECK_MODE: printPgmString(PSTR("Check")); break;
 80062fe:	4828      	ldr	r0, [pc, #160]	; (80063a0 <report_realtime_status+0x3d0>)
 8006300:	f7fe fa56 	bl	80047b0 <printString>
 8006304:	e6a3      	b.n	800604e <report_realtime_status+0x7e>
  case STATE_IDLE: printPgmString(PSTR("Idle")); break;
 8006306:	4827      	ldr	r0, [pc, #156]	; (80063a4 <report_realtime_status+0x3d4>)
 8006308:	f7fe fa52 	bl	80047b0 <printString>
 800630c:	e69f      	b.n	800604e <report_realtime_status+0x7e>
  case STATE_HOMING: printPgmString(PSTR("Home")); break;
 800630e:	4826      	ldr	r0, [pc, #152]	; (80063a8 <report_realtime_status+0x3d8>)
 8006310:	f7fe fa4e 	bl	80047b0 <printString>
 8006314:	e69b      	b.n	800604e <report_realtime_status+0x7e>
  case STATE_CYCLE: printPgmString(PSTR("Run")); break;
 8006316:	4825      	ldr	r0, [pc, #148]	; (80063ac <report_realtime_status+0x3dc>)
 8006318:	f7fe fa4a 	bl	80047b0 <printString>
 800631c:	e697      	b.n	800604e <report_realtime_status+0x7e>
  case STATE_ALARM: printPgmString(PSTR("Alarm")); break;
 800631e:	4824      	ldr	r0, [pc, #144]	; (80063b0 <report_realtime_status+0x3e0>)
 8006320:	f7fe fa46 	bl	80047b0 <printString>
 8006324:	e693      	b.n	800604e <report_realtime_status+0x7e>
    printPgmString(PSTR("Door:"));
 8006326:	4823      	ldr	r0, [pc, #140]	; (80063b4 <report_realtime_status+0x3e4>)
 8006328:	f7fe fa42 	bl	80047b0 <printString>
    if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 800632c:	78a3      	ldrb	r3, [r4, #2]
 800632e:	071a      	lsls	r2, r3, #28
 8006330:	d42d      	bmi.n	800638e <report_realtime_status+0x3be>
      if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8006332:	075f      	lsls	r7, r3, #29
 8006334:	d527      	bpl.n	8006386 <report_realtime_status+0x3b6>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) {
 8006336:	069e      	lsls	r6, r3, #26
 8006338:	d521      	bpl.n	800637e <report_realtime_status+0x3ae>
      else { serial_write('1'); } // Actively holding
 800633a:	2031      	movs	r0, #49	; 0x31
 800633c:	f000 f852 	bl	80063e4 <serial_write>
 8006340:	e685      	b.n	800604e <report_realtime_status+0x7e>
              if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
 8006342:	2053      	movs	r0, #83	; 0x53
 8006344:	f000 f84e 	bl	80063e4 <serial_write>
 8006348:	e737      	b.n	80061ba <report_realtime_status+0x1ea>
      if (bit_istrue(lim_pin_state, bit(Z_AXIS))) { serial_write('Z'); }
 800634a:	205a      	movs	r0, #90	; 0x5a
 800634c:	f000 f84a 	bl	80063e4 <serial_write>
 8006350:	e7ad      	b.n	80062ae <report_realtime_status+0x2de>
      if (bit_istrue(lim_pin_state, bit(Y_AXIS))) { serial_write('Y'); }
 8006352:	2059      	movs	r0, #89	; 0x59
 8006354:	f000 f846 	bl	80063e4 <serial_write>
 8006358:	e7a7      	b.n	80062aa <report_realtime_status+0x2da>
      if (bit_istrue(lim_pin_state, bit(X_AXIS))) { serial_write('X'); }
 800635a:	2058      	movs	r0, #88	; 0x58
 800635c:	f000 f842 	bl	80063e4 <serial_write>
 8006360:	e7a1      	b.n	80062a6 <report_realtime_status+0x2d6>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 8006362:	2048      	movs	r0, #72	; 0x48
 8006364:	f000 f83e 	bl	80063e4 <serial_write>
 8006368:	e7ad      	b.n	80062c6 <report_realtime_status+0x2f6>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 800636a:	2052      	movs	r0, #82	; 0x52
 800636c:	f000 f83a 	bl	80063e4 <serial_write>
 8006370:	e7a7      	b.n	80062c2 <report_realtime_status+0x2f2>
      printPgmString(PSTR("Hold:"));
 8006372:	4811      	ldr	r0, [pc, #68]	; (80063b8 <report_realtime_status+0x3e8>)
 8006374:	f7fe fa1c 	bl	80047b0 <printString>
      if (sys.suspend & SUSPEND_HOLD_COMPLETE) { serial_write('0'); } // Ready to resume
 8006378:	78a3      	ldrb	r3, [r4, #2]
 800637a:	07d9      	lsls	r1, r3, #31
 800637c:	d5dd      	bpl.n	800633a <report_realtime_status+0x36a>
 800637e:	2030      	movs	r0, #48	; 0x30
 8006380:	f000 f830 	bl	80063e4 <serial_write>
 8006384:	e663      	b.n	800604e <report_realtime_status+0x7e>
        serial_write('2'); // Retracting
 8006386:	2032      	movs	r0, #50	; 0x32
 8006388:	f000 f82c 	bl	80063e4 <serial_write>
 800638c:	e65f      	b.n	800604e <report_realtime_status+0x7e>
      serial_write('3'); // Restoring
 800638e:	2033      	movs	r0, #51	; 0x33
 8006390:	f000 f828 	bl	80063e4 <serial_write>
 8006394:	e65b      	b.n	800604e <report_realtime_status+0x7e>
 8006396:	bf00      	nop
 8006398:	0800af64 	.word	0x0800af64
 800639c:	0800af7c 	.word	0x0800af7c
 80063a0:	0800af34 	.word	0x0800af34
 80063a4:	0800af0c 	.word	0x0800af0c
 80063a8:	0800af24 	.word	0x0800af24
 80063ac:	0800af14 	.word	0x0800af14
 80063b0:	0800af2c 	.word	0x0800af2c
 80063b4:	0800af3c 	.word	0x0800af3c
 80063b8:	0800af18 	.word	0x0800af18

080063bc <serial_get_rx_buffer_available>:


// Returns the number of bytes available in the RX serial buffer.
uint8_t serial_get_rx_buffer_available()
{
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 80063bc:	4a06      	ldr	r2, [pc, #24]	; (80063d8 <serial_get_rx_buffer_available+0x1c>)
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 80063be:	4b07      	ldr	r3, [pc, #28]	; (80063dc <serial_get_rx_buffer_available+0x20>)
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 80063c0:	7811      	ldrb	r1, [r2, #0]
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 80063c2:	781a      	ldrb	r2, [r3, #0]
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 80063c4:	b2cb      	uxtb	r3, r1
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 80063c6:	428a      	cmp	r2, r1
 80063c8:	bf2c      	ite	cs
 80063ca:	1e98      	subcs	r0, r3, #2
  return((rtail-serial_rx_buffer_head-1));
 80063cc:	f103 30ff 	addcc.w	r0, r3, #4294967295
 80063d0:	1a80      	subs	r0, r0, r2
 80063d2:	b2c0      	uxtb	r0, r0
}
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	20001367 	.word	0x20001367
 80063dc:	20001366 	.word	0x20001366

080063e0 <serial_init>:
  // defaults to 8-bit, no parity, 1 stop bit
#endif
#ifdef WIN32
  InitializeCriticalSectionAndSpinCount(&CriticalSection,0x00000400);
#endif
}
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop

080063e4 <serial_write>:
}
#endif


// Writes one byte to the TX serial buffer. Called by main program.
void serial_write(uint8_t data) {
 80063e4:	b430      	push	{r4, r5}
  // Calculate next head
  uint8_t next_head = serial_tx_buffer_head + 1;
 80063e6:	4d10      	ldr	r5, [pc, #64]	; (8006428 <serial_write+0x44>)
 80063e8:	4910      	ldr	r1, [pc, #64]	; (800642c <serial_write+0x48>)
 80063ea:	f895 c000 	ldrb.w	ip, [r5]
  if (next_head == TX_RING_BUFFER) { next_head = 0; }

  // Wait until there is space in the buffer
  while (next_head == serial_tx_buffer_tail) {
    // TODO: Restructure st_prep_buffer() calls to be executed here during a long print.
    if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop.
 80063ee:	4c10      	ldr	r4, [pc, #64]	; (8006430 <serial_write+0x4c>)
  uint8_t next_head = serial_tx_buffer_head + 1;
 80063f0:	f10c 0201 	add.w	r2, ip, #1
 80063f4:	b2d2      	uxtb	r2, r2
  if (next_head == TX_RING_BUFFER) { next_head = 0; }
 80063f6:	2a80      	cmp	r2, #128	; 0x80
 80063f8:	bf08      	it	eq
 80063fa:	2200      	moveq	r2, #0
 80063fc:	e002      	b.n	8006404 <serial_write+0x20>
    if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop.
 80063fe:	7823      	ldrb	r3, [r4, #0]
 8006400:	06db      	lsls	r3, r3, #27
 8006402:	d40f      	bmi.n	8006424 <serial_write+0x40>
  while (next_head == serial_tx_buffer_tail) {
 8006404:	780b      	ldrb	r3, [r1, #0]
 8006406:	4293      	cmp	r3, r2
 8006408:	d0f9      	beq.n	80063fe <serial_write+0x1a>
     Sleep(1);
#endif
  }

  // Store data and advance head
  serial_tx_buffer[serial_tx_buffer_head] = data;
 800640a:	4b0a      	ldr	r3, [pc, #40]	; (8006434 <serial_write+0x50>)
 800640c:	490a      	ldr	r1, [pc, #40]	; (8006438 <serial_write+0x54>)
 800640e:	f803 000c 	strb.w	r0, [r3, ip]
#ifdef USB_CHANGED_DEBUG
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
	  if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop. }
 8006412:	4807      	ldr	r0, [pc, #28]	; (8006430 <serial_write+0x4c>)
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
 8006414:	e002      	b.n	800641c <serial_write+0x38>
	  if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop. }
 8006416:	7803      	ldrb	r3, [r0, #0]
 8006418:	06db      	lsls	r3, r3, #27
 800641a:	d403      	bmi.n	8006424 <serial_write+0x40>
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
 800641c:	780b      	ldrb	r3, [r1, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1f9      	bne.n	8006416 <serial_write+0x32>
  }
#endif
  serial_tx_buffer_head = next_head;
 8006422:	702a      	strb	r2, [r5, #0]

#ifdef AVRTARGET
  // Enable Data Register Empty Interrupt to make sure tx-streaming is running
  UCSR0B |=  (1 << UDRIE0);
#endif
}
 8006424:	bc30      	pop	{r4, r5}
 8006426:	4770      	bx	lr
 8006428:	200013e8 	.word	0x200013e8
 800642c:	200013e9 	.word	0x200013e9
 8006430:	20000a08 	.word	0x20000a08
 8006434:	20001368 	.word	0x20001368
 8006438:	20001680 	.word	0x20001680

0800643c <serial_read>:

// Fetches the first byte in the serial read buffer. Called by main program.
uint8_t serial_read()
{
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
  if (serial_rx_buffer_head == tail) {
 800643c:	4908      	ldr	r1, [pc, #32]	; (8006460 <serial_read+0x24>)
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 800643e:	4a09      	ldr	r2, [pc, #36]	; (8006464 <serial_read+0x28>)
  if (serial_rx_buffer_head == tail) {
 8006440:	7808      	ldrb	r0, [r1, #0]
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8006442:	7813      	ldrb	r3, [r2, #0]
  if (serial_rx_buffer_head == tail) {
 8006444:	4298      	cmp	r0, r3
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8006446:	b2d9      	uxtb	r1, r3
  if (serial_rx_buffer_head == tail) {
 8006448:	d008      	beq.n	800645c <serial_read+0x20>
    return SERIAL_NO_DATA;
  } else {
    uint8_t data = serial_rx_buffer[tail];

    tail++;
 800644a:	1c4b      	adds	r3, r1, #1
 800644c:	b2db      	uxtb	r3, r3
    if (tail == RX_RING_BUFFER) { tail = 0; }
 800644e:	2bfe      	cmp	r3, #254	; 0xfe
 8006450:	bf08      	it	eq
 8006452:	2300      	moveq	r3, #0
    uint8_t data = serial_rx_buffer[tail];
 8006454:	4804      	ldr	r0, [pc, #16]	; (8006468 <serial_read+0x2c>)
    serial_rx_buffer_tail = tail;
 8006456:	7013      	strb	r3, [r2, #0]
    uint8_t data = serial_rx_buffer[tail];
 8006458:	5c40      	ldrb	r0, [r0, r1]

    return data;
 800645a:	4770      	bx	lr
    return SERIAL_NO_DATA;
 800645c:	20ff      	movs	r0, #255	; 0xff
  }
}
 800645e:	4770      	bx	lr
 8006460:	20001366 	.word	0x20001366
 8006464:	20001367 	.word	0x20001367
 8006468:	20001268 	.word	0x20001268

0800646c <OnUsbDataRx>:
	//lcd_write_char(*dataIn);
	uint8_t next_head;
    uint8_t data;

	// Write data to buffer unless it is full.
	while (length != 0)
 800646c:	2900      	cmp	r1, #0
 800646e:	d077      	beq.n	8006560 <OnUsbDataRx+0xf4>
{
 8006470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006474:	4604      	mov	r4, r0
            case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_MIST_OVR_TOGGLE); break;
          #endif
        }
        // Throw away any unfound extended-ASCII character by not passing it to the serial buffer.
      } else { // Write character to buffer
        next_head = serial_rx_buffer_head + 1;
 8006476:	4e61      	ldr	r6, [pc, #388]	; (80065fc <OnUsbDataRx+0x190>)
        if (next_head == RX_RING_BUFFER) { next_head = 0; }

        // Write data to buffer unless it is full.
        if (next_head != serial_rx_buffer_tail) {
 8006478:	4f61      	ldr	r7, [pc, #388]	; (8006600 <OnUsbDataRx+0x194>)
          serial_rx_buffer[serial_rx_buffer_head] = data;
 800647a:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8006604 <OnUsbDataRx+0x198>
 800647e:	1845      	adds	r5, r0, r1
 8006480:	e006      	b.n	8006490 <OnUsbDataRx+0x24>
  switch (data) {
 8006482:	2b21      	cmp	r3, #33	; 0x21
 8006484:	d11d      	bne.n	80064c2 <OnUsbDataRx+0x56>
    case CMD_FEED_HOLD:     system_set_exec_state_flag(EXEC_FEED_HOLD); break; // Set as true
 8006486:	2008      	movs	r0, #8
 8006488:	f002 f876 	bl	8008578 <system_set_exec_state_flag>
	while (length != 0)
 800648c:	42a5      	cmp	r5, r4
 800648e:	d00a      	beq.n	80064a6 <OnUsbDataRx+0x3a>
        data = *dataIn ++;
 8006490:	f814 3b01 	ldrb.w	r3, [r4], #1
  switch (data) {
 8006494:	2b3f      	cmp	r3, #63	; 0x3f
 8006496:	d00e      	beq.n	80064b6 <OnUsbDataRx+0x4a>
 8006498:	d807      	bhi.n	80064aa <OnUsbDataRx+0x3e>
 800649a:	2b18      	cmp	r3, #24
 800649c:	d1f1      	bne.n	8006482 <OnUsbDataRx+0x16>
    case CMD_RESET:         mc_reset(); break; // Call motion control reset routine.
 800649e:	f7fd fac7 	bl	8003a30 <mc_reset>
	while (length != 0)
 80064a2:	42a5      	cmp	r5, r4
 80064a4:	d1f4      	bne.n	8006490 <OnUsbDataRx+0x24>
#else
    length--;
#endif
   }
#endif
}
 80064a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (data) {
 80064aa:	2b7e      	cmp	r3, #126	; 0x7e
 80064ac:	d107      	bne.n	80064be <OnUsbDataRx+0x52>
    case CMD_CYCLE_START:   system_set_exec_state_flag(EXEC_CYCLE_START); break; // Set as true
 80064ae:	2002      	movs	r0, #2
 80064b0:	f002 f862 	bl	8008578 <system_set_exec_state_flag>
 80064b4:	e7ea      	b.n	800648c <OnUsbDataRx+0x20>
    case CMD_STATUS_REPORT: system_set_exec_state_flag(EXEC_STATUS_REPORT); break; // Set as true
 80064b6:	2001      	movs	r0, #1
 80064b8:	f002 f85e 	bl	8008578 <system_set_exec_state_flag>
 80064bc:	e7e6      	b.n	800648c <OnUsbDataRx+0x20>
      if (data > 0x7F) { // Real-time control characters are extended ACSII only.
 80064be:	061a      	lsls	r2, r3, #24
 80064c0:	d40c      	bmi.n	80064dc <OnUsbDataRx+0x70>
        next_head = serial_rx_buffer_head + 1;
 80064c2:	7831      	ldrb	r1, [r6, #0]
        if (next_head != serial_rx_buffer_tail) {
 80064c4:	7838      	ldrb	r0, [r7, #0]
        next_head = serial_rx_buffer_head + 1;
 80064c6:	1c4a      	adds	r2, r1, #1
 80064c8:	b2d2      	uxtb	r2, r2
        if (next_head == RX_RING_BUFFER) { next_head = 0; }
 80064ca:	2afe      	cmp	r2, #254	; 0xfe
 80064cc:	bf08      	it	eq
 80064ce:	2200      	moveq	r2, #0
        if (next_head != serial_rx_buffer_tail) {
 80064d0:	4290      	cmp	r0, r2
          serial_rx_buffer[serial_rx_buffer_head] = data;
 80064d2:	bf1c      	itt	ne
 80064d4:	f808 3001 	strbne.w	r3, [r8, r1]
          serial_rx_buffer_head = next_head;
 80064d8:	7032      	strbne	r2, [r6, #0]
 80064da:	e7d7      	b.n	800648c <OnUsbDataRx+0x20>
        switch(data) {
 80064dc:	3b84      	subs	r3, #132	; 0x84
 80064de:	2b1d      	cmp	r3, #29
 80064e0:	d8d4      	bhi.n	800648c <OnUsbDataRx+0x20>
 80064e2:	a201      	add	r2, pc, #4	; (adr r2, 80064e8 <OnUsbDataRx+0x7c>)
 80064e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e8:	080065f5 	.word	0x080065f5
 80064ec:	080065e3 	.word	0x080065e3
 80064f0:	0800648d 	.word	0x0800648d
 80064f4:	0800648d 	.word	0x0800648d
 80064f8:	0800648d 	.word	0x0800648d
 80064fc:	0800648d 	.word	0x0800648d
 8006500:	0800648d 	.word	0x0800648d
 8006504:	0800648d 	.word	0x0800648d
 8006508:	0800648d 	.word	0x0800648d
 800650c:	0800648d 	.word	0x0800648d
 8006510:	0800648d 	.word	0x0800648d
 8006514:	0800648d 	.word	0x0800648d
 8006518:	080065db 	.word	0x080065db
 800651c:	080065d3 	.word	0x080065d3
 8006520:	080065cb 	.word	0x080065cb
 8006524:	080065c3 	.word	0x080065c3
 8006528:	080065bb 	.word	0x080065bb
 800652c:	080065b3 	.word	0x080065b3
 8006530:	080065ab 	.word	0x080065ab
 8006534:	080065a3 	.word	0x080065a3
 8006538:	0800648d 	.word	0x0800648d
 800653c:	0800659b 	.word	0x0800659b
 8006540:	08006593 	.word	0x08006593
 8006544:	0800658b 	.word	0x0800658b
 8006548:	08006583 	.word	0x08006583
 800654c:	0800657b 	.word	0x0800657b
 8006550:	08006573 	.word	0x08006573
 8006554:	0800648d 	.word	0x0800648d
 8006558:	0800656b 	.word	0x0800656b
 800655c:	08006563 	.word	0x08006563
 8006560:	4770      	bx	lr
            case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_MIST_OVR_TOGGLE); break;
 8006562:	2080      	movs	r0, #128	; 0x80
 8006564:	f002 f836 	bl	80085d4 <system_set_exec_accessory_override_flag>
 8006568:	e790      	b.n	800648c <OnUsbDataRx+0x20>
          case CMD_COOLANT_FLOOD_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_FLOOD_OVR_TOGGLE); break;
 800656a:	2040      	movs	r0, #64	; 0x40
 800656c:	f002 f832 	bl	80085d4 <system_set_exec_accessory_override_flag>
 8006570:	e78c      	b.n	800648c <OnUsbDataRx+0x20>
          case CMD_SPINDLE_OVR_STOP: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP); break;
 8006572:	2020      	movs	r0, #32
 8006574:	f002 f82e 	bl	80085d4 <system_set_exec_accessory_override_flag>
 8006578:	e788      	b.n	800648c <OnUsbDataRx+0x20>
          case CMD_SPINDLE_OVR_FINE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_MINUS); break;
 800657a:	2010      	movs	r0, #16
 800657c:	f002 f82a 	bl	80085d4 <system_set_exec_accessory_override_flag>
 8006580:	e784      	b.n	800648c <OnUsbDataRx+0x20>
          case CMD_SPINDLE_OVR_FINE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_PLUS); break;
 8006582:	2008      	movs	r0, #8
 8006584:	f002 f826 	bl	80085d4 <system_set_exec_accessory_override_flag>
 8006588:	e780      	b.n	800648c <OnUsbDataRx+0x20>
          case CMD_SPINDLE_OVR_COARSE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_MINUS); break;
 800658a:	2004      	movs	r0, #4
 800658c:	f002 f822 	bl	80085d4 <system_set_exec_accessory_override_flag>
 8006590:	e77c      	b.n	800648c <OnUsbDataRx+0x20>
          case CMD_SPINDLE_OVR_COARSE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_PLUS); break;
 8006592:	2002      	movs	r0, #2
 8006594:	f002 f81e 	bl	80085d4 <system_set_exec_accessory_override_flag>
 8006598:	e778      	b.n	800648c <OnUsbDataRx+0x20>
          case CMD_SPINDLE_OVR_RESET: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_RESET); break;
 800659a:	2001      	movs	r0, #1
 800659c:	f002 f81a 	bl	80085d4 <system_set_exec_accessory_override_flag>
 80065a0:	e774      	b.n	800648c <OnUsbDataRx+0x20>
          case CMD_RAPID_OVR_LOW: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_LOW); break;
 80065a2:	2080      	movs	r0, #128	; 0x80
 80065a4:	f002 f80c 	bl	80085c0 <system_set_exec_motion_override_flag>
 80065a8:	e770      	b.n	800648c <OnUsbDataRx+0x20>
          case CMD_RAPID_OVR_MEDIUM: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_MEDIUM); break;
 80065aa:	2040      	movs	r0, #64	; 0x40
 80065ac:	f002 f808 	bl	80085c0 <system_set_exec_motion_override_flag>
 80065b0:	e76c      	b.n	800648c <OnUsbDataRx+0x20>
          case CMD_RAPID_OVR_RESET: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_RESET); break;
 80065b2:	2020      	movs	r0, #32
 80065b4:	f002 f804 	bl	80085c0 <system_set_exec_motion_override_flag>
 80065b8:	e768      	b.n	800648c <OnUsbDataRx+0x20>
          case CMD_FEED_OVR_FINE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_MINUS); break;
 80065ba:	2010      	movs	r0, #16
 80065bc:	f002 f800 	bl	80085c0 <system_set_exec_motion_override_flag>
 80065c0:	e764      	b.n	800648c <OnUsbDataRx+0x20>
          case CMD_FEED_OVR_FINE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_PLUS); break;
 80065c2:	2008      	movs	r0, #8
 80065c4:	f001 fffc 	bl	80085c0 <system_set_exec_motion_override_flag>
 80065c8:	e760      	b.n	800648c <OnUsbDataRx+0x20>
          case CMD_FEED_OVR_COARSE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_MINUS); break;
 80065ca:	2004      	movs	r0, #4
 80065cc:	f001 fff8 	bl	80085c0 <system_set_exec_motion_override_flag>
 80065d0:	e75c      	b.n	800648c <OnUsbDataRx+0x20>
          case CMD_FEED_OVR_COARSE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_PLUS); break;
 80065d2:	2002      	movs	r0, #2
 80065d4:	f001 fff4 	bl	80085c0 <system_set_exec_motion_override_flag>
 80065d8:	e758      	b.n	800648c <OnUsbDataRx+0x20>
          case CMD_FEED_OVR_RESET: system_set_exec_motion_override_flag(EXEC_FEED_OVR_RESET); break;
 80065da:	2001      	movs	r0, #1
 80065dc:	f001 fff0 	bl	80085c0 <system_set_exec_motion_override_flag>
 80065e0:	e754      	b.n	800648c <OnUsbDataRx+0x20>
            if (sys.state & STATE_JOG) { // Block all other states from invoking motion cancel.
 80065e2:	4b09      	ldr	r3, [pc, #36]	; (8006608 <OnUsbDataRx+0x19c>)
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	069b      	lsls	r3, r3, #26
 80065e8:	f57f af50 	bpl.w	800648c <OnUsbDataRx+0x20>
              system_set_exec_state_flag(EXEC_MOTION_CANCEL); 
 80065ec:	2040      	movs	r0, #64	; 0x40
 80065ee:	f001 ffc3 	bl	8008578 <system_set_exec_state_flag>
 80065f2:	e74b      	b.n	800648c <OnUsbDataRx+0x20>
          case CMD_SAFETY_DOOR:   system_set_exec_state_flag(EXEC_SAFETY_DOOR); break; // Set as true
 80065f4:	2020      	movs	r0, #32
 80065f6:	f001 ffbf 	bl	8008578 <system_set_exec_state_flag>
 80065fa:	e747      	b.n	800648c <OnUsbDataRx+0x20>
 80065fc:	20001366 	.word	0x20001366
 8006600:	20001367 	.word	0x20001367
 8006604:	20001268 	.word	0x20001268
 8006608:	200009d0 	.word	0x200009d0

0800660c <serial_reset_read_buffer>:

void serial_reset_read_buffer()
{
  serial_rx_buffer_tail = serial_rx_buffer_head;
 800660c:	4a02      	ldr	r2, [pc, #8]	; (8006618 <serial_reset_read_buffer+0xc>)
 800660e:	4b03      	ldr	r3, [pc, #12]	; (800661c <serial_reset_read_buffer+0x10>)
 8006610:	7812      	ldrb	r2, [r2, #0]
 8006612:	701a      	strb	r2, [r3, #0]
}
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	20001366 	.word	0x20001366
 800661c:	20001367 	.word	0x20001367

08006620 <settings_store_startup_line>:
settings_t settings;


// Method to store startup lines into EEPROM
void settings_store_startup_line(uint8_t n, char *line)
{
 8006620:	b538      	push	{r3, r4, r5, lr}
 8006622:	4604      	mov	r4, r0
 8006624:	460d      	mov	r5, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
  #endif
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 8006626:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800662a:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
 800662e:	f7ff f821 	bl	8005674 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 8006632:	4629      	mov	r1, r5
 8006634:	f504 7040 	add.w	r0, r4, #768	; 0x300
 8006638:	2250      	movs	r2, #80	; 0x50
}
 800663a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 800663e:	f7fb b86f 	b.w	8001720 <memcpy_to_eeprom_with_checksum>
 8006642:	bf00      	nop

08006644 <settings_store_build_info>:


// Method to store build info into EEPROM
// NOTE: This function can only be called in IDLE state.
void settings_store_build_info(char *line)
{
 8006644:	4601      	mov	r1, r0
  // Build info can only be stored when state is IDLE.
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO,(char*)line, LINE_BUFFER_SIZE);
 8006646:	2250      	movs	r2, #80	; 0x50
 8006648:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 800664c:	f7fb b868 	b.w	8001720 <memcpy_to_eeprom_with_checksum>

08006650 <settings_write_coord_data>:
}


// Method to store coord data parameters into EEPROM
void settings_write_coord_data(uint8_t coord_select, float *coord_data)
{
 8006650:	b538      	push	{r3, r4, r5, lr}
 8006652:	4604      	mov	r4, r0
 8006654:	460d      	mov	r5, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize();
  #endif
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 8006656:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    protocol_buffer_synchronize();
 800665a:	f7ff f80b 	bl	8005674 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 800665e:	4629      	mov	r1, r5
 8006660:	f504 7000 	add.w	r0, r4, #512	; 0x200
 8006664:	2210      	movs	r2, #16
}
 8006666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 800666a:	f7fb b859 	b.w	8001720 <memcpy_to_eeprom_with_checksum>
 800666e:	bf00      	nop

08006670 <settings_restore>:
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
}


// Method to restore EEPROM-saved Grbl global settings back to defaults.
void settings_restore(uint8_t restore_flag) {
 8006670:	b530      	push	{r4, r5, lr}
 8006672:	4605      	mov	r5, r0
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 8006674:	07c0      	lsls	r0, r0, #31
void settings_restore(uint8_t restore_flag) {
 8006676:	b085      	sub	sp, #20
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 8006678:	d407      	bmi.n	800668a <settings_restore+0x1a>
	#endif
// ---
    write_global_settings();
  }

  if (restore_flag & SETTINGS_RESTORE_PARAMETERS) {
 800667a:	07a9      	lsls	r1, r5, #30
 800667c:	d446      	bmi.n	800670c <settings_restore+0x9c>
    float coord_data[N_AXIS];
    memset(&coord_data, 0, sizeof(coord_data));
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
  }

  if (restore_flag & SETTINGS_RESTORE_STARTUP_LINES) {
 800667e:	076a      	lsls	r2, r5, #29
 8006680:	d458      	bmi.n	8006734 <settings_restore+0xc4>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
    #endif
  }

  if (restore_flag & SETTINGS_RESTORE_BUILD_INFO) {
 8006682:	072b      	lsls	r3, r5, #28
 8006684:	d46c      	bmi.n	8006760 <settings_restore+0xf0>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO , 0);
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
  }
}
 8006686:	b005      	add	sp, #20
 8006688:	bd30      	pop	{r4, r5, pc}
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 800668a:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 800668e:	4c3b      	ldr	r4, [pc, #236]	; (800677c <settings_restore+0x10c>)
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8006690:	221f      	movs	r2, #31
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8006692:	f8c4 3042 	str.w	r3, [r4, #66]	; 0x42
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8006696:	4b3a      	ldr	r3, [pc, #232]	; (8006780 <settings_restore+0x110>)
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8006698:	2106      	movs	r1, #6
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 800669a:	64a3      	str	r3, [r4, #72]	; 0x48
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 800669c:	4b39      	ldr	r3, [pc, #228]	; (8006784 <settings_restore+0x114>)
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 800669e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 80066a2:	64e3      	str	r3, [r4, #76]	; 0x4c
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 80066a4:	4b38      	ldr	r3, [pc, #224]	; (8006788 <settings_restore+0x118>)
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 80066a6:	4a39      	ldr	r2, [pc, #228]	; (800678c <settings_restore+0x11c>)
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 80066a8:	6523      	str	r3, [r4, #80]	; 0x50
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 80066aa:	2300      	movs	r3, #0
 80066ac:	6563      	str	r3, [r4, #84]	; 0x54
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 80066ae:	4b38      	ldr	r3, [pc, #224]	; (8006790 <settings_restore+0x120>)
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 80066b0:	65e2      	str	r2, [r4, #92]	; 0x5c
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 80066b2:	6023      	str	r3, [r4, #0]
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 80066b4:	4a37      	ldr	r2, [pc, #220]	; (8006794 <settings_restore+0x124>)
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
 80066b6:	6063      	str	r3, [r4, #4]
    settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
 80066b8:	60a3      	str	r3, [r4, #8]
    settings.steps_per_mm[A_AXIS] = DEFAULT_A_STEPS_PER_MM;
 80066ba:	60e3      	str	r3, [r4, #12]
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 80066bc:	4b36      	ldr	r3, [pc, #216]	; (8006798 <settings_restore+0x128>)
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 80066be:	6622      	str	r2, [r4, #96]	; 0x60
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 80066c0:	6123      	str	r3, [r4, #16]
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 80066c2:	2244      	movs	r2, #68	; 0x44
    settings.max_rate[Y_AXIS] = DEFAULT_Y_MAX_RATE;
 80066c4:	6163      	str	r3, [r4, #20]
    settings.max_rate[Z_AXIS] = DEFAULT_Z_MAX_RATE;
 80066c6:	61a3      	str	r3, [r4, #24]
    settings.max_rate[A_AXIS] = DEFAULT_A_MAX_RATE;
 80066c8:	61e3      	str	r3, [r4, #28]
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 80066ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 80066ce:	2000      	movs	r0, #0
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 80066d0:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 80066d4:	21fa      	movs	r1, #250	; 0xfa
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 80066d6:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 80066da:	66a3      	str	r3, [r4, #104]	; 0x68
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 80066dc:	4a2f      	ldr	r2, [pc, #188]	; (800679c <settings_restore+0x12c>)
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 80066de:	4b30      	ldr	r3, [pc, #192]	; (80067a0 <settings_restore+0x130>)
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 80066e0:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 80066e4:	f8a4 1064 	strh.w	r1, [r4, #100]	; 0x64
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 80066e8:	6222      	str	r2, [r4, #32]
  eeprom_put_char(0, SETTINGS_VERSION);
 80066ea:	210a      	movs	r1, #10
    settings.acceleration[Y_AXIS] = DEFAULT_Y_ACCELERATION;
 80066ec:	6262      	str	r2, [r4, #36]	; 0x24
    settings.acceleration[Z_AXIS] = DEFAULT_Z_ACCELERATION;
 80066ee:	62a2      	str	r2, [r4, #40]	; 0x28
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 80066f0:	6323      	str	r3, [r4, #48]	; 0x30
    settings.max_travel[Y_AXIS] = (-DEFAULT_Y_MAX_TRAVEL);
 80066f2:	6363      	str	r3, [r4, #52]	; 0x34
    settings.max_travel[Z_AXIS] = (-DEFAULT_Z_MAX_TRAVEL);
 80066f4:	63a3      	str	r3, [r4, #56]	; 0x38
    settings.acceleration[A_AXIS] = DEFAULT_A_ACCELERATION;
 80066f6:	62e2      	str	r2, [r4, #44]	; 0x2c
    settings.max_travel[A_AXIS] = (-DEFAULT_A_MAX_TRAVEL);
 80066f8:	63e3      	str	r3, [r4, #60]	; 0x3c
  eeprom_put_char(0, SETTINGS_VERSION);
 80066fa:	f7fb f80b 	bl	8001714 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 80066fe:	4621      	mov	r1, r4
 8006700:	226c      	movs	r2, #108	; 0x6c
 8006702:	2001      	movs	r0, #1
 8006704:	f7fb f80c 	bl	8001720 <memcpy_to_eeprom_with_checksum>
  if (restore_flag & SETTINGS_RESTORE_PARAMETERS) {
 8006708:	07a9      	lsls	r1, r5, #30
 800670a:	d5b8      	bpl.n	800667e <settings_restore+0xe>
    memset(&coord_data, 0, sizeof(coord_data));
 800670c:	2300      	movs	r3, #0
 800670e:	f44f 7400 	mov.w	r4, #512	; 0x200
 8006712:	e9cd 3300 	strd	r3, r3, [sp]
 8006716:	e9cd 3302 	strd	r3, r3, [sp, #8]
    protocol_buffer_synchronize();
 800671a:	f7fe ffab 	bl	8005674 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 800671e:	4620      	mov	r0, r4
 8006720:	2210      	movs	r2, #16
 8006722:	4669      	mov	r1, sp
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
 8006724:	3411      	adds	r4, #17
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8006726:	f7fa fffb 	bl	8001720 <memcpy_to_eeprom_with_checksum>
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
 800672a:	f5b4 7f22 	cmp.w	r4, #648	; 0x288
 800672e:	d1f4      	bne.n	800671a <settings_restore+0xaa>
  if (restore_flag & SETTINGS_RESTORE_STARTUP_LINES) {
 8006730:	076a      	lsls	r2, r5, #29
 8006732:	d5a6      	bpl.n	8006682 <settings_restore+0x12>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK, 0);
 8006734:	2100      	movs	r1, #0
 8006736:	f44f 7040 	mov.w	r0, #768	; 0x300
 800673a:	f7fa ffeb 	bl	8001714 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+1, 0); // Checksum
 800673e:	2100      	movs	r1, #0
 8006740:	f240 3001 	movw	r0, #769	; 0x301
 8006744:	f7fa ffe6 	bl	8001714 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
 8006748:	2100      	movs	r1, #0
 800674a:	f240 3051 	movw	r0, #849	; 0x351
 800674e:	f7fa ffe1 	bl	8001714 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
 8006752:	2100      	movs	r1, #0
 8006754:	f240 3052 	movw	r0, #850	; 0x352
 8006758:	f7fa ffdc 	bl	8001714 <eeprom_put_char>
  if (restore_flag & SETTINGS_RESTORE_BUILD_INFO) {
 800675c:	072b      	lsls	r3, r5, #28
 800675e:	d592      	bpl.n	8006686 <settings_restore+0x16>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO , 0);
 8006760:	2100      	movs	r1, #0
 8006762:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8006766:	f7fa ffd5 	bl	8001714 <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
 800676a:	2100      	movs	r1, #0
 800676c:	f240 30c1 	movw	r0, #961	; 0x3c1
}
 8006770:	b005      	add	sp, #20
 8006772:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
 8006776:	f7fa bfcd 	b.w	8001714 <eeprom_put_char>
 800677a:	bf00      	nop
 800677c:	200013ec 	.word	0x200013ec
 8006780:	3c23d70a 	.word	0x3c23d70a
 8006784:	3b03126f 	.word	0x3b03126f
 8006788:	4640e400 	.word	0x4640e400
 800678c:	41200000 	.word	0x41200000
 8006790:	45a00000 	.word	0x45a00000
 8006794:	42c80000 	.word	0x42c80000
 8006798:	44fa0000 	.word	0x44fa0000
 800679c:	4bdbba00 	.word	0x4bdbba00
 80067a0:	c38c0000 	.word	0xc38c0000

080067a4 <settings_read_startup_line>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_startup_line(uint8_t n, char *line)
{
 80067a4:	b570      	push	{r4, r5, r6, lr}
 80067a6:	460e      	mov	r6, r1
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 80067a8:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80067ac:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80067b0:	f500 7440 	add.w	r4, r0, #768	; 0x300
  if (!(memcpy_from_eeprom_with_checksum((char*)line, addr, LINE_BUFFER_SIZE))) {
 80067b4:	2250      	movs	r2, #80	; 0x50
 80067b6:	4621      	mov	r1, r4
 80067b8:	4630      	mov	r0, r6
 80067ba:	f7fa ffff 	bl	80017bc <memcpy_from_eeprom_with_checksum>
 80067be:	b108      	cbz	r0, 80067c4 <settings_read_startup_line+0x20>
    // Reset line with default value
    line[0] = 0; // Empty line
    settings_store_startup_line(n, line);
    return(false);
  }
  return(true);
 80067c0:	2001      	movs	r0, #1
}
 80067c2:	bd70      	pop	{r4, r5, r6, pc}
 80067c4:	4605      	mov	r5, r0
    line[0] = 0; // Empty line
 80067c6:	7030      	strb	r0, [r6, #0]
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
 80067c8:	f7fe ff54 	bl	8005674 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 80067cc:	4620      	mov	r0, r4
 80067ce:	2250      	movs	r2, #80	; 0x50
 80067d0:	4631      	mov	r1, r6
 80067d2:	f7fa ffa5 	bl	8001720 <memcpy_to_eeprom_with_checksum>
    return(false);
 80067d6:	4628      	mov	r0, r5
}
 80067d8:	bd70      	pop	{r4, r5, r6, pc}
 80067da:	bf00      	nop

080067dc <settings_read_build_info>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_build_info(char *line)
{
 80067dc:	b538      	push	{r3, r4, r5, lr}
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 80067de:	2250      	movs	r2, #80	; 0x50
 80067e0:	f44f 7170 	mov.w	r1, #960	; 0x3c0
{
 80067e4:	4605      	mov	r5, r0
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 80067e6:	f7fa ffe9 	bl	80017bc <memcpy_from_eeprom_with_checksum>
 80067ea:	b108      	cbz	r0, 80067f0 <settings_read_build_info+0x14>
    // Reset line with default value
    line[0] = 0; // Empty line
    settings_store_build_info(line);
    return(false);
  }
  return(true);
 80067ec:	2001      	movs	r0, #1
}
 80067ee:	bd38      	pop	{r3, r4, r5, pc}
 80067f0:	4604      	mov	r4, r0
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO,(char*)line, LINE_BUFFER_SIZE);
 80067f2:	2250      	movs	r2, #80	; 0x50
 80067f4:	4629      	mov	r1, r5
 80067f6:	f44f 7070 	mov.w	r0, #960	; 0x3c0
    line[0] = 0; // Empty line
 80067fa:	702c      	strb	r4, [r5, #0]
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO,(char*)line, LINE_BUFFER_SIZE);
 80067fc:	f7fa ff90 	bl	8001720 <memcpy_to_eeprom_with_checksum>
    return(false);
 8006800:	4620      	mov	r0, r4
}
 8006802:	bd38      	pop	{r3, r4, r5, pc}

08006804 <settings_read_coord_data>:


// Read selected coordinate data from EEPROM. Updates pointed coord_data value.
uint8_t settings_read_coord_data(uint8_t coord_select, float *coord_data)
{
 8006804:	b570      	push	{r4, r5, r6, lr}
 8006806:	460e      	mov	r6, r1
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 8006808:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 800680c:	f500 7400 	add.w	r4, r0, #512	; 0x200
  if (!(memcpy_from_eeprom_with_checksum((char*)coord_data, addr, sizeof(float)*N_AXIS))) {
 8006810:	2210      	movs	r2, #16
 8006812:	4621      	mov	r1, r4
 8006814:	4630      	mov	r0, r6
 8006816:	f7fa ffd1 	bl	80017bc <memcpy_from_eeprom_with_checksum>
 800681a:	b108      	cbz	r0, 8006820 <settings_read_coord_data+0x1c>
		#endif
// ---
		settings_write_coord_data(coord_select,coord_data);
    return(false);
  }
  return(true);
 800681c:	2001      	movs	r0, #1
}
 800681e:	bd70      	pop	{r4, r5, r6, pc}
		coord_data[X_AXIS] = 0.0f;
 8006820:	2300      	movs	r3, #0
 8006822:	4605      	mov	r5, r0
 8006824:	6033      	str	r3, [r6, #0]
		coord_data[Y_AXIS] = 0.0f;
 8006826:	6073      	str	r3, [r6, #4]
		coord_data[Z_AXIS] = 0.0f;
 8006828:	60b3      	str	r3, [r6, #8]
		coord_data[A_AXIS] = 0.0f;
 800682a:	60f3      	str	r3, [r6, #12]
    protocol_buffer_synchronize();
 800682c:	f7fe ff22 	bl	8005674 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8006830:	4620      	mov	r0, r4
 8006832:	2210      	movs	r2, #16
 8006834:	4631      	mov	r1, r6
 8006836:	f7fa ff73 	bl	8001720 <memcpy_to_eeprom_with_checksum>
    return(false);
 800683a:	4628      	mov	r0, r5
}
 800683c:	bd70      	pop	{r4, r5, r6, pc}
 800683e:	bf00      	nop

08006840 <settings_store_global_setting>:
  return(true);
}


// A helper method to set settings from command line
uint8_t settings_store_global_setting(uint8_t parameter, float value) {
 8006840:	b538      	push	{r3, r4, r5, lr}
 8006842:	460d      	mov	r5, r1
 8006844:	4604      	mov	r4, r0
  if (value < 0.0f) { return(STATUS_NEGATIVE_VALUE); }
 8006846:	2100      	movs	r1, #0
 8006848:	4628      	mov	r0, r5
 800684a:	f7fa f9c1 	bl	8000bd0 <__aeabi_fcmplt>
 800684e:	2800      	cmp	r0, #0
 8006850:	d16c      	bne.n	800692c <settings_store_global_setting+0xec>
  if (parameter >= AXIS_SETTINGS_START_VAL) {
 8006852:	2c63      	cmp	r4, #99	; 0x63
 8006854:	d91e      	bls.n	8006894 <settings_store_global_setting+0x54>
    // Store axis configuration. Axis numbering sequence set by AXIS_SETTING defines.
    // NOTE: Ensure the setting index corresponds to the report.c settings printout.
    parameter -= AXIS_SETTINGS_START_VAL;
 8006856:	f1a4 0364 	sub.w	r3, r4, #100	; 0x64
 800685a:	b2db      	uxtb	r3, r3
    uint8_t set_idx = 0;
    while (set_idx < AXIS_N_SETTINGS) {
      if (parameter < N_AXIS) {
 800685c:	2b03      	cmp	r3, #3
 800685e:	f240 811f 	bls.w	8006aa0 <settings_store_global_setting+0x260>
        }
        break; // Exit while-loop after setting has been configured and proceed to the EEPROM write call.
      } else {
        set_idx++;
        // If axis index greater than N_AXIS or setting index greater than number of axis settings, error out.
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 8006862:	2b09      	cmp	r3, #9
 8006864:	d914      	bls.n	8006890 <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 8006866:	f1a4 036e 	sub.w	r3, r4, #110	; 0x6e
 800686a:	b2db      	uxtb	r3, r3
      if (parameter < N_AXIS) {
 800686c:	2b03      	cmp	r3, #3
 800686e:	f240 8108 	bls.w	8006a82 <settings_store_global_setting+0x242>
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 8006872:	2b09      	cmp	r3, #9
 8006874:	d90c      	bls.n	8006890 <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 8006876:	f1a4 0378 	sub.w	r3, r4, #120	; 0x78
 800687a:	b2db      	uxtb	r3, r3
      if (parameter < N_AXIS) {
 800687c:	2b03      	cmp	r3, #3
 800687e:	f240 8105 	bls.w	8006a8c <settings_store_global_setting+0x24c>
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 8006882:	2b09      	cmp	r3, #9
 8006884:	d904      	bls.n	8006890 <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 8006886:	347e      	adds	r4, #126	; 0x7e
 8006888:	b2e4      	uxtb	r4, r4
      if (parameter < N_AXIS) {
 800688a:	2c03      	cmp	r4, #3
 800688c:	f240 80f2 	bls.w	8006a74 <settings_store_global_setting+0x234>
      }
    }
  } else {
    // Store non-axis Grbl settings
    uint8_t int_value = truncf(value);
    switch(parameter) {
 8006890:	2003      	movs	r0, #3
        return(STATUS_INVALID_STATEMENT);
    }
  }
  write_global_settings();
  return(STATUS_OK);
}
 8006892:	bd38      	pop	{r3, r4, r5, pc}
    uint8_t int_value = truncf(value);
 8006894:	4628      	mov	r0, r5
 8006896:	f7fa f9ff 	bl	8000c98 <__aeabi_f2uiz>
 800689a:	b2c0      	uxtb	r0, r0
    switch(parameter) {
 800689c:	2c20      	cmp	r4, #32
 800689e:	d8f7      	bhi.n	8006890 <settings_store_global_setting+0x50>
 80068a0:	a301      	add	r3, pc, #4	; (adr r3, 80068a8 <settings_store_global_setting+0x68>)
 80068a2:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 80068a6:	bf00      	nop
 80068a8:	0800695b 	.word	0x0800695b
 80068ac:	08006969 	.word	0x08006969
 80068b0:	08006993 	.word	0x08006993
 80068b4:	08006971 	.word	0x08006971
 80068b8:	0800697d 	.word	0x0800697d
 80068bc:	0800699f 	.word	0x0800699f
 80068c0:	080069b5 	.word	0x080069b5
 80068c4:	08006891 	.word	0x08006891
 80068c8:	08006891 	.word	0x08006891
 80068cc:	08006891 	.word	0x08006891
 80068d0:	08006a21 	.word	0x08006a21
 80068d4:	08006a29 	.word	0x08006a29
 80068d8:	080069e5 	.word	0x080069e5
 80068dc:	08006a5f 	.word	0x08006a5f
 80068e0:	08006891 	.word	0x08006891
 80068e4:	08006891 	.word	0x08006891
 80068e8:	08006891 	.word	0x08006891
 80068ec:	08006891 	.word	0x08006891
 80068f0:	08006891 	.word	0x08006891
 80068f4:	08006891 	.word	0x08006891
 80068f8:	08006a2f 	.word	0x08006a2f
 80068fc:	08006a47 	.word	0x08006a47
 8006900:	080069cf 	.word	0x080069cf
 8006904:	08006a19 	.word	0x08006a19
 8006908:	08006a0d 	.word	0x08006a0d
 800690c:	08006a13 	.word	0x08006a13
 8006910:	080069eb 	.word	0x080069eb
 8006914:	080069f3 	.word	0x080069f3
 8006918:	08006891 	.word	0x08006891
 800691c:	08006891 	.word	0x08006891
 8006920:	080069f9 	.word	0x080069f9
 8006924:	08006a03 	.word	0x08006a03
 8006928:	08006931 	.word	0x08006931
  if (value < 0.0f) { return(STATUS_NEGATIVE_VALUE); }
 800692c:	2004      	movs	r0, #4
}
 800692e:	bd38      	pop	{r3, r4, r5, pc}
          if (int_value) { settings.flags |= BITFLAG_LASER_MODE; }
 8006930:	4a70      	ldr	r2, [pc, #448]	; (8006af4 <settings_store_global_setting+0x2b4>)
 8006932:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8006936:	2800      	cmp	r0, #0
 8006938:	f000 80b6 	beq.w	8006aa8 <settings_store_global_setting+0x268>
 800693c:	f043 0302 	orr.w	r3, r3, #2
 8006940:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
  eeprom_put_char(0, SETTINGS_VERSION);
 8006944:	210a      	movs	r1, #10
 8006946:	2000      	movs	r0, #0
 8006948:	f7fa fee4 	bl	8001714 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 800694c:	226c      	movs	r2, #108	; 0x6c
 800694e:	2001      	movs	r0, #1
 8006950:	4968      	ldr	r1, [pc, #416]	; (8006af4 <settings_store_global_setting+0x2b4>)
 8006952:	f7fa fee5 	bl	8001720 <memcpy_to_eeprom_with_checksum>
  return(STATUS_OK);
 8006956:	2000      	movs	r0, #0
}
 8006958:	bd38      	pop	{r3, r4, r5, pc}
        if (int_value < 3) { return(STATUS_SETTING_STEP_PULSE_MIN); }
 800695a:	2802      	cmp	r0, #2
 800695c:	f240 80c6 	bls.w	8006aec <settings_store_global_setting+0x2ac>
        settings.pulse_microseconds = int_value; break;
 8006960:	4b64      	ldr	r3, [pc, #400]	; (8006af4 <settings_store_global_setting+0x2b4>)
 8006962:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
 8006966:	e7ed      	b.n	8006944 <settings_store_global_setting+0x104>
      case 1: settings.stepper_idle_lock_time = int_value; break;
 8006968:	4b62      	ldr	r3, [pc, #392]	; (8006af4 <settings_store_global_setting+0x2b4>)
 800696a:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
 800696e:	e7e9      	b.n	8006944 <settings_store_global_setting+0x104>
        settings.dir_invert_mask = int_value;
 8006970:	4b60      	ldr	r3, [pc, #384]	; (8006af4 <settings_store_global_setting+0x2b4>)
 8006972:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 8006976:	f000 fcdb 	bl	8007330 <st_generate_step_dir_invert_masks>
        break;
 800697a:	e7e3      	b.n	8006944 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_INVERT_ST_ENABLE; }
 800697c:	4a5d      	ldr	r2, [pc, #372]	; (8006af4 <settings_store_global_setting+0x2b4>)
 800697e:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8006982:	2800      	cmp	r0, #0
 8006984:	f000 80a0 	beq.w	8006ac8 <settings_store_global_setting+0x288>
 8006988:	f043 0304 	orr.w	r3, r3, #4
 800698c:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8006990:	e7d8      	b.n	8006944 <settings_store_global_setting+0x104>
        settings.step_invert_mask = int_value;
 8006992:	4b58      	ldr	r3, [pc, #352]	; (8006af4 <settings_store_global_setting+0x2b4>)
 8006994:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 8006998:	f000 fcca 	bl	8007330 <st_generate_step_dir_invert_masks>
        break;
 800699c:	e7d2      	b.n	8006944 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 800699e:	4a55      	ldr	r2, [pc, #340]	; (8006af4 <settings_store_global_setting+0x2b4>)
 80069a0:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 80069a4:	2800      	cmp	r0, #0
 80069a6:	f000 808a 	beq.w	8006abe <settings_store_global_setting+0x27e>
 80069aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069ae:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 80069b2:	e7c7      	b.n	8006944 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_INVERT_PROBE_PIN; }
 80069b4:	4b4f      	ldr	r3, [pc, #316]	; (8006af4 <settings_store_global_setting+0x2b4>)
 80069b6:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80069ba:	2800      	cmp	r0, #0
 80069bc:	d07c      	beq.n	8006ab8 <settings_store_global_setting+0x278>
 80069be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
        probe_configure_invert_mask(false);
 80069c2:	2000      	movs	r0, #0
 80069c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80069c8:	f7fe fa2a 	bl	8004e20 <probe_configure_invert_mask>
        break;
 80069cc:	e7ba      	b.n	8006944 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_HOMING_ENABLE; }
 80069ce:	4a49      	ldr	r2, [pc, #292]	; (8006af4 <settings_store_global_setting+0x2b4>)
 80069d0:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 80069d4:	2800      	cmp	r0, #0
 80069d6:	f000 8081 	beq.w	8006adc <settings_store_global_setting+0x29c>
 80069da:	f043 0310 	orr.w	r3, r3, #16
 80069de:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 80069e2:	e7af      	b.n	8006944 <settings_store_global_setting+0x104>
      case 12: settings.arc_tolerance = value; break;
 80069e4:	4b43      	ldr	r3, [pc, #268]	; (8006af4 <settings_store_global_setting+0x2b4>)
 80069e6:	64dd      	str	r5, [r3, #76]	; 0x4c
 80069e8:	e7ac      	b.n	8006944 <settings_store_global_setting+0x104>
      case 26: settings.homing_debounce_delay = int_value; break;
 80069ea:	4b42      	ldr	r3, [pc, #264]	; (8006af4 <settings_store_global_setting+0x2b4>)
 80069ec:	f8a3 0064 	strh.w	r0, [r3, #100]	; 0x64
 80069f0:	e7a8      	b.n	8006944 <settings_store_global_setting+0x104>
      case 27: settings.homing_pulloff = value; break;
 80069f2:	4b40      	ldr	r3, [pc, #256]	; (8006af4 <settings_store_global_setting+0x2b4>)
 80069f4:	669d      	str	r5, [r3, #104]	; 0x68
 80069f6:	e7a5      	b.n	8006944 <settings_store_global_setting+0x104>
      case 30: settings.rpm_max = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 80069f8:	4b3e      	ldr	r3, [pc, #248]	; (8006af4 <settings_store_global_setting+0x2b4>)
 80069fa:	651d      	str	r5, [r3, #80]	; 0x50
 80069fc:	f000 f898 	bl	8006b30 <spindle_init>
 8006a00:	e7a0      	b.n	8006944 <settings_store_global_setting+0x104>
      case 31: settings.rpm_min = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 8006a02:	4b3c      	ldr	r3, [pc, #240]	; (8006af4 <settings_store_global_setting+0x2b4>)
 8006a04:	655d      	str	r5, [r3, #84]	; 0x54
 8006a06:	f000 f893 	bl	8006b30 <spindle_init>
 8006a0a:	e79b      	b.n	8006944 <settings_store_global_setting+0x104>
      case 24: settings.homing_feed_rate = value; break;
 8006a0c:	4b39      	ldr	r3, [pc, #228]	; (8006af4 <settings_store_global_setting+0x2b4>)
 8006a0e:	65dd      	str	r5, [r3, #92]	; 0x5c
 8006a10:	e798      	b.n	8006944 <settings_store_global_setting+0x104>
      case 25: settings.homing_seek_rate = value; break;
 8006a12:	4b38      	ldr	r3, [pc, #224]	; (8006af4 <settings_store_global_setting+0x2b4>)
 8006a14:	661d      	str	r5, [r3, #96]	; 0x60
 8006a16:	e795      	b.n	8006944 <settings_store_global_setting+0x104>
      case 23: settings.homing_dir_mask = int_value; break;
 8006a18:	4b36      	ldr	r3, [pc, #216]	; (8006af4 <settings_store_global_setting+0x2b4>)
 8006a1a:	f8a3 005a 	strh.w	r0, [r3, #90]	; 0x5a
 8006a1e:	e791      	b.n	8006944 <settings_store_global_setting+0x104>
      case 10: settings.status_report_mask = int_value; break;
 8006a20:	4b34      	ldr	r3, [pc, #208]	; (8006af4 <settings_store_global_setting+0x2b4>)
 8006a22:	f883 0047 	strb.w	r0, [r3, #71]	; 0x47
 8006a26:	e78d      	b.n	8006944 <settings_store_global_setting+0x104>
      case 11: settings.junction_deviation = value; break;
 8006a28:	4b32      	ldr	r3, [pc, #200]	; (8006af4 <settings_store_global_setting+0x2b4>)
 8006a2a:	649d      	str	r5, [r3, #72]	; 0x48
 8006a2c:	e78a      	b.n	8006944 <settings_store_global_setting+0x104>
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 8006a2e:	4a31      	ldr	r2, [pc, #196]	; (8006af4 <settings_store_global_setting+0x2b4>)
 8006a30:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
        if (int_value) {
 8006a34:	2800      	cmp	r0, #0
 8006a36:	d04c      	beq.n	8006ad2 <settings_store_global_setting+0x292>
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 8006a38:	06d9      	lsls	r1, r3, #27
 8006a3a:	d559      	bpl.n	8006af0 <settings_store_global_setting+0x2b0>
          settings.flags |= BITFLAG_SOFT_LIMIT_ENABLE;
 8006a3c:	f043 0320 	orr.w	r3, r3, #32
 8006a40:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8006a44:	e77e      	b.n	8006944 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_HARD_LIMIT_ENABLE; }
 8006a46:	4b2b      	ldr	r3, [pc, #172]	; (8006af4 <settings_store_global_setting+0x2b4>)
 8006a48:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d04a      	beq.n	8006ae6 <settings_store_global_setting+0x2a6>
 8006a50:	f042 0208 	orr.w	r2, r2, #8
 8006a54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        limits_init(); // Re-init to immediately change. NOTE: Nice to have but could be problematic later.
 8006a58:	f7fc f96a 	bl	8002d30 <limits_init>
        break;
 8006a5c:	e772      	b.n	8006944 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_REPORT_INCHES; }
 8006a5e:	4b25      	ldr	r3, [pc, #148]	; (8006af4 <settings_store_global_setting+0x2b4>)
 8006a60:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006a64:	b328      	cbz	r0, 8006ab2 <settings_store_global_setting+0x272>
 8006a66:	f042 0201 	orr.w	r2, r2, #1
 8006a6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        system_flag_wco_change(); // Make sure WCO is immediately updated.
 8006a6e:	f001 fd1d 	bl	80084ac <system_flag_wco_change>
        break;
 8006a72:	e767      	b.n	8006944 <settings_store_global_setting+0x104>
          case 3: settings.max_travel[parameter] = -value; break;  // Store as negative for grbl internal use.
 8006a74:	4b1f      	ldr	r3, [pc, #124]	; (8006af4 <settings_store_global_setting+0x2b4>)
 8006a76:	340c      	adds	r4, #12
 8006a78:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8006a7c:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
 8006a80:	e760      	b.n	8006944 <settings_store_global_setting+0x104>
            settings.max_rate[parameter] = value;
 8006a82:	4a1c      	ldr	r2, [pc, #112]	; (8006af4 <settings_store_global_setting+0x2b4>)
 8006a84:	3304      	adds	r3, #4
 8006a86:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
            break;
 8006a8a:	e75b      	b.n	8006944 <settings_store_global_setting+0x104>
          case 2: settings.acceleration[parameter] = value*60*60; break; // Convert to mm/min^2 for grbl internal use.
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	491a      	ldr	r1, [pc, #104]	; (8006af8 <settings_store_global_setting+0x2b8>)
 8006a90:	f103 0408 	add.w	r4, r3, #8
 8006a94:	f7f9 fefe 	bl	8000894 <__aeabi_fmul>
 8006a98:	4b16      	ldr	r3, [pc, #88]	; (8006af4 <settings_store_global_setting+0x2b4>)
 8006a9a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006a9e:	e751      	b.n	8006944 <settings_store_global_setting+0x104>
            settings.steps_per_mm[parameter] = value;
 8006aa0:	4a14      	ldr	r2, [pc, #80]	; (8006af4 <settings_store_global_setting+0x2b4>)
 8006aa2:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
            break;
 8006aa6:	e74d      	b.n	8006944 <settings_store_global_setting+0x104>
          else { settings.flags &= ~BITFLAG_LASER_MODE; }
 8006aa8:	f023 0302 	bic.w	r3, r3, #2
 8006aac:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8006ab0:	e748      	b.n	8006944 <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_REPORT_INCHES; }
 8006ab2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ab6:	e7d8      	b.n	8006a6a <settings_store_global_setting+0x22a>
        else { settings.flags &= ~BITFLAG_INVERT_PROBE_PIN; }
 8006ab8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006abc:	e781      	b.n	80069c2 <settings_store_global_setting+0x182>
        else { settings.flags &= ~BITFLAG_INVERT_LIMIT_PINS; }
 8006abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac2:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8006ac6:	e73d      	b.n	8006944 <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_INVERT_ST_ENABLE; }
 8006ac8:	f023 0304 	bic.w	r3, r3, #4
 8006acc:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8006ad0:	e738      	b.n	8006944 <settings_store_global_setting+0x104>
        } else { settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; }
 8006ad2:	f023 0320 	bic.w	r3, r3, #32
 8006ad6:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8006ada:	e733      	b.n	8006944 <settings_store_global_setting+0x104>
          settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; // Force disable soft-limits.
 8006adc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006ae0:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8006ae4:	e72e      	b.n	8006944 <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_HARD_LIMIT_ENABLE; }
 8006ae6:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 8006aea:	e7b3      	b.n	8006a54 <settings_store_global_setting+0x214>
        if (int_value < 3) { return(STATUS_SETTING_STEP_PULSE_MIN); }
 8006aec:	2006      	movs	r0, #6
}
 8006aee:	bd38      	pop	{r3, r4, r5, pc}
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 8006af0:	200a      	movs	r0, #10
}
 8006af2:	bd38      	pop	{r3, r4, r5, pc}
 8006af4:	200013ec 	.word	0x200013ec
 8006af8:	45610000 	.word	0x45610000

08006afc <settings_init>:
  uint8_t version = eeprom_get_char(0);
 8006afc:	2000      	movs	r0, #0


// Initialize the config subsystem
void settings_init() {
 8006afe:	b508      	push	{r3, lr}
  uint8_t version = eeprom_get_char(0);
 8006b00:	f7fa fe02 	bl	8001708 <eeprom_get_char>
  if (version == SETTINGS_VERSION) {
 8006b04:	280a      	cmp	r0, #10
 8006b06:	d009      	beq.n	8006b1c <settings_init+0x20>
  if(!read_global_settings()) {
    report_status_message(STATUS_SETTING_READ_FAIL);
 8006b08:	2007      	movs	r0, #7
 8006b0a:	f7fe fdcf 	bl	80056ac <report_status_message>
    settings_restore(SETTINGS_RESTORE_ALL); // Force restore all EEPROM data.
 8006b0e:	20ff      	movs	r0, #255	; 0xff
 8006b10:	f7ff fdae 	bl	8006670 <settings_restore>
    report_grbl_settings();
  }
}
 8006b14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    report_grbl_settings();
 8006b18:	f7fe be68 	b.w	80057ec <report_grbl_settings>
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, EEPROM_ADDR_GLOBAL, sizeof(settings_t)))) {
 8006b1c:	226c      	movs	r2, #108	; 0x6c
 8006b1e:	2101      	movs	r1, #1
 8006b20:	4802      	ldr	r0, [pc, #8]	; (8006b2c <settings_init+0x30>)
 8006b22:	f7fa fe4b 	bl	80017bc <memcpy_from_eeprom_with_checksum>
 8006b26:	2800      	cmp	r0, #0
 8006b28:	d0ee      	beq.n	8006b08 <settings_init+0xc>
}
 8006b2a:	bd08      	pop	{r3, pc}
 8006b2c:	200013ec 	.word	0x200013ec

08006b30 <spindle_init>:
  static float pwm_gradient; // Precalulated value to speed up rpm to PWM conversions.
#endif


void spindle_init()
{
 8006b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifdef VARIABLE_SPINDLE
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8006b34:	4b3c      	ldr	r3, [pc, #240]	; (8006c28 <spindle_init+0xf8>)
{
 8006b36:	b088      	sub	sp, #32
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8006b38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b3a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006b3c:	f7f9 fda0 	bl	8000680 <__aeabi_fsub>
 8006b40:	4601      	mov	r1, r0
 8006b42:	483a      	ldr	r0, [pc, #232]	; (8006c2c <spindle_init+0xfc>)
 8006b44:	f7f9 ff5a 	bl	80009fc <__aeabi_fdiv>
#if defined (STM32F103C8)
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_SPINDLE_ENABLE_PORT, ENABLE); // there is no RCC_SPINDLE_DIRECTION_PORT defined!
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8006b48:	2601      	movs	r6, #1
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006b4a:	f241 0503 	movw	r5, #4099	; 0x1003
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);

#ifdef USE_SPINDLE_ENABLE_PIN
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_ENABLE_BIT;
 8006b4e:	2702      	movs	r7, #2
#endif

#ifdef VARIABLE_SPINDLE
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
  TIM_TimeBaseInitTypeDef timerInitStructure;
  TIM_OCInitTypeDef outputChannelInit = { 0 };
 8006b50:	2400      	movs	r4, #0
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8006b52:	4b37      	ldr	r3, [pc, #220]	; (8006c30 <spindle_init+0x100>)
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 8006b54:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8006c34 <spindle_init+0x104>
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8006b58:	6018      	str	r0, [r3, #0]
	RCC_APB2PeriphClockCmd(RCC_SPINDLE_ENABLE_PORT, ENABLE); // there is no RCC_SPINDLE_DIRECTION_PORT defined!
 8006b5a:	4631      	mov	r1, r6
 8006b5c:	2008      	movs	r0, #8
 8006b5e:	f7fa fc21 	bl	80013a4 <RCC_APB2PeriphClockCmd>
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 8006b62:	4669      	mov	r1, sp
 8006b64:	4640      	mov	r0, r8
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006b66:	f8ad 5002 	strh.w	r5, [sp, #2]
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8006b6a:	f8ad 6000 	strh.w	r6, [sp]
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 8006b6e:	f7fa fa1f 	bl	8000fb0 <GPIO_Init>
	GPIO_Init(SPINDLE_ENABLE_PORT, &GPIO_InitStructure);
 8006b72:	4640      	mov	r0, r8
 8006b74:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006b76:	f8ad 5002 	strh.w	r5, [sp, #2]
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_ENABLE_BIT;
 8006b7a:	f8ad 7000 	strh.w	r7, [sp]
	GPIO_Init(SPINDLE_ENABLE_PORT, &GPIO_InitStructure);
 8006b7e:	f7fa fa17 	bl	8000fb0 <GPIO_Init>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8006b82:	4631      	mov	r1, r6
 8006b84:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006b88:	f7fa fc0c 	bl	80013a4 <RCC_APB2PeriphClockCmd>
  TIM_TimeBaseStructInit(&timerInitStructure);
 8006b8c:	a801      	add	r0, sp, #4
  TIM_OCInitTypeDef outputChannelInit = { 0 };
 8006b8e:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8006b92:	e9cd 4406 	strd	r4, r4, [sp, #24]
  TIM_TimeBaseStructInit(&timerInitStructure);
 8006b96:	f7fa fcc1 	bl	800151c <TIM_TimeBaseStructInit>

  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
  timerInitStructure.TIM_Period = SPINDLE_PWM_MAX_VALUE - 1;
 8006b9a:	2363      	movs	r3, #99	; 0x63
 8006b9c:	f8ad 3008 	strh.w	r3, [sp, #8]
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8006ba0:	4b25      	ldr	r3, [pc, #148]	; (8006c38 <spindle_init+0x108>)
 8006ba2:	4a26      	ldr	r2, [pc, #152]	; (8006c3c <spindle_init+0x10c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
  timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
  timerInitStructure.TIM_RepetitionCounter = 0;
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8006ba6:	4d26      	ldr	r5, [pc, #152]	; (8006c40 <spindle_init+0x110>)
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8006ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bac:	0c9b      	lsrs	r3, r3, #18
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8006bae:	4628      	mov	r0, r5
 8006bb0:	a901      	add	r1, sp, #4
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	f8ad 3004 	strh.w	r3, [sp, #4]
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8006bb8:	f8ad 4006 	strh.w	r4, [sp, #6]
  timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8006bbc:	f8ad 400a 	strh.w	r4, [sp, #10]
  timerInitStructure.TIM_RepetitionCounter = 0;
 8006bc0:	f88d 400c 	strb.w	r4, [sp, #12]
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8006bc4:	f7fa fc06 	bl	80013d4 <TIM_TimeBaseInit>

  outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 8006bc8:	4b1e      	ldr	r3, [pc, #120]	; (8006c44 <spindle_init+0x114>)
  outputChannelInit.TIM_Pulse = 0;     // initi speed is 0
  outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
  outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;

  TIM_OC1Init(TIM1, &outputChannelInit);
 8006bca:	4628      	mov	r0, r5
 8006bcc:	a904      	add	r1, sp, #16
  outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 8006bce:	9304      	str	r3, [sp, #16]
  outputChannelInit.TIM_Pulse = 0;     // initi speed is 0
 8006bd0:	f8cd 4016 	str.w	r4, [sp, #22]
  TIM_OC1Init(TIM1, &outputChannelInit);
 8006bd4:	f7fa fc54 	bl	8001480 <TIM_OC1Init>
  TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8006bd8:	4628      	mov	r0, r5
 8006bda:	2108      	movs	r1, #8
 8006bdc:	f7fa fcce 	bl	800157c <TIM_OC1PreloadConfig>
  TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8006be0:	4621      	mov	r1, r4
 8006be2:	4628      	mov	r0, r5
 8006be4:	f7fa fcb0 	bl	8001548 <TIM_CtrlPWMOutputs>
  TIM_Cmd(TIM1, ENABLE);
 8006be8:	4631      	mov	r1, r6
 8006bea:	4628      	mov	r0, r5
 8006bec:	f7fa fc9e 	bl	800152c <TIM_Cmd>

  RCC_APB2PeriphClockCmd(RCC_SPINDLE_PWM_PORT, ENABLE);
 8006bf0:	4631      	mov	r1, r6
 8006bf2:	2004      	movs	r0, #4
 8006bf4:	f7fa fbd6 	bl	80013a4 <RCC_APB2PeriphClockCmd>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006bf8:	f641 0303 	movw	r3, #6147	; 0x1803
 8006bfc:	f8ad 3002 	strh.w	r3, [sp, #2]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_PWM_BIT;
 8006c00:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_Init(SPINDLE_PWM_PORT, &GPIO_InitStructure);
 8006c04:	4669      	mov	r1, sp
 8006c06:	4810      	ldr	r0, [pc, #64]	; (8006c48 <spindle_init+0x118>)
  GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_PWM_BIT;
 8006c08:	f8ad 3000 	strh.w	r3, [sp]
  GPIO_Init(SPINDLE_PWM_PORT, &GPIO_InitStructure);
 8006c0c:	f7fa f9d0 	bl	8000fb0 <GPIO_Init>
#endif
#endif

#if defined (STM32F103C8)
	#ifdef VARIABLE_SPINDLE
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8006c10:	4621      	mov	r1, r4
 8006c12:	4628      	mov	r0, r5
 8006c14:	f7fa fc98 	bl	8001548 <TIM_CtrlPWMOutputs>
	#endif
    #ifdef USE_SPINDLE_ENABLE_PIN
      #ifdef INVERT_SPINDLE_ENABLE_PIN
        SetSpindleEnablebit();
      #else
        ResetSpindleEnablebit();
 8006c18:	4622      	mov	r2, r4
 8006c1a:	4639      	mov	r1, r7
 8006c1c:	4640      	mov	r0, r8
 8006c1e:	f7fa fb67 	bl	80012f0 <GPIO_WriteBit>
}
 8006c22:	b008      	add	sp, #32
 8006c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c28:	200013ec 	.word	0x200013ec
 8006c2c:	42c60000 	.word	0x42c60000
 8006c30:	20001458 	.word	0x20001458
 8006c34:	40010c00 	.word	0x40010c00
 8006c38:	20000004 	.word	0x20000004
 8006c3c:	431bde83 	.word	0x431bde83
 8006c40:	40012c00 	.word	0x40012c00
 8006c44:	00010060 	.word	0x00010060
 8006c48:	40010800 	.word	0x40010800

08006c4c <spindle_get_state>:
{
 8006c4c:	b508      	push	{r3, lr}
  pin = GPIO_ReadInputData(SPINDLE_ENABLE_PORT);
 8006c4e:	4805      	ldr	r0, [pc, #20]	; (8006c64 <spindle_get_state+0x18>)
 8006c50:	f7fa fb42 	bl	80012d8 <GPIO_ReadInputData>
 8006c54:	b2c3      	uxtb	r3, r0
		  if (bit_istrue(pin,(1<<SPINDLE_ENABLE_BIT)))
 8006c56:	f010 0002 	ands.w	r0, r0, #2
		  if (pin & (1 << SPINDLE_DIRECTION_BIT)) { return(SPINDLE_STATE_CCW); }
 8006c5a:	bf1c      	itt	ne
 8006c5c:	f003 0001 	andne.w	r0, r3, #1
 8006c60:	3001      	addne	r0, #1
}
 8006c62:	bd08      	pop	{r3, pc}
 8006c64:	40010c00 	.word	0x40010c00

08006c68 <spindle_stop>:
{
 8006c68:	b508      	push	{r3, lr}
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	4804      	ldr	r0, [pc, #16]	; (8006c80 <spindle_stop+0x18>)
 8006c6e:	f7fa fc6b 	bl	8001548 <TIM_CtrlPWMOutputs>
      #endif
    #endif
#endif
}
 8006c72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ResetSpindleEnablebit();
 8006c76:	2200      	movs	r2, #0
 8006c78:	2102      	movs	r1, #2
 8006c7a:	4802      	ldr	r0, [pc, #8]	; (8006c84 <spindle_stop+0x1c>)
 8006c7c:	f7fa bb38 	b.w	80012f0 <GPIO_WriteBit>
 8006c80:	40012c00 	.word	0x40012c00
 8006c84:	40010c00 	.word	0x40010c00

08006c88 <spindle_set_speed>:

#ifdef VARIABLE_SPINDLE
  // Sets spindle speed PWM output and enable pin, if configured. Called by spindle_set_state()
  // and stepper ISR. Keep routine small and efficient.
  void spindle_set_speed(SPINDLE_PWM_TYPE pwm_value)
  {
 8006c88:	4601      	mov	r1, r0
#ifdef AVRTARGET
		SPINDLE_OCR_REGISTER = pwm_value; // Set PWM output level.
#endif
#if defined (STM32F103C8)
		TIM1->CCR1 = pwm_value;
 8006c8a:	4803      	ldr	r0, [pc, #12]	; (8006c98 <spindle_set_speed+0x10>)
 8006c8c:	8681      	strh	r1, [r0, #52]	; 0x34
					SetSpindleEnablebit();
				  #endif
				#endif
		 }
		#else
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8006c8e:	b101      	cbz	r1, 8006c92 <spindle_set_speed+0xa>
			} else {
			#ifdef AVRTARGET
      SPINDLE_TCCRA_REGISTER |= (1<<SPINDLE_COMB_BIT); // Ensure PWM output is enabled.
			#endif
			#if defined (STM32F103C8)
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8006c90:	2101      	movs	r1, #1
 8006c92:	f7fa bc59 	b.w	8001548 <TIM_CtrlPWMOutputs>
 8006c96:	bf00      	nop
 8006c98:	40012c00 	.word	0x40012c00

08006c9c <spindle_compute_pwm_value>:
	SPINDLE_PWM_TYPE spindle_compute_pwm_value(float rpm) // 328p PWM register is 8-bit.
	{
		SPINDLE_PWM_TYPE pwm_value;
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
																					 // Calculate PWM register value based on rpm max/min settings and programmed rpm.
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8006c9c:	4a1e      	ldr	r2, [pc, #120]	; (8006d18 <spindle_compute_pwm_value+0x7c>)
	{
 8006c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8006ca0:	6d56      	ldr	r6, [r2, #84]	; 0x54
 8006ca2:	6d15      	ldr	r5, [r2, #80]	; 0x50
	{
 8006ca4:	4604      	mov	r4, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	4630      	mov	r0, r6
 8006caa:	f7f9 ffa5 	bl	8000bf8 <__aeabi_fcmpge>
 8006cae:	4f1b      	ldr	r7, [pc, #108]	; (8006d1c <spindle_compute_pwm_value+0x80>)
 8006cb0:	b9e0      	cbnz	r0, 8006cec <spindle_compute_pwm_value+0x50>
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8006cb2:	7ab8      	ldrb	r0, [r7, #10]
 8006cb4:	f7f9 fd9a 	bl	80007ec <__aeabi_i2f>
 8006cb8:	4621      	mov	r1, r4
 8006cba:	f7f9 fdeb 	bl	8000894 <__aeabi_fmul>
 8006cbe:	4918      	ldr	r1, [pc, #96]	; (8006d20 <spindle_compute_pwm_value+0x84>)
 8006cc0:	f7f9 fde8 	bl	8000894 <__aeabi_fmul>
 8006cc4:	4604      	mov	r4, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	4621      	mov	r1, r4
 8006cca:	f7f9 ff8b 	bl	8000be4 <__aeabi_fcmple>
 8006cce:	b968      	cbnz	r0, 8006cec <spindle_compute_pwm_value+0x50>
			// No PWM range possible. Set simple on/off spindle control pin state.
			sys.spindle_speed = settings.rpm_max;
			pwm_value = SPINDLE_PWM_MAX_VALUE;
		}
		else if (rpm <= settings.rpm_min) {
 8006cd0:	4621      	mov	r1, r4
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	f7f9 ff90 	bl	8000bf8 <__aeabi_fcmpge>
 8006cd8:	b158      	cbz	r0, 8006cf2 <spindle_compute_pwm_value+0x56>
			if (rpm == 0.0f) { // S0 disables spindle
 8006cda:	2500      	movs	r5, #0
 8006cdc:	4620      	mov	r0, r4
 8006cde:	4629      	mov	r1, r5
 8006ce0:	f7f9 ff6c 	bl	8000bbc <__aeabi_fcmpeq>
 8006ce4:	b1a8      	cbz	r0, 8006d12 <spindle_compute_pwm_value+0x76>
				sys.spindle_speed = 0.0f;
				pwm_value = SPINDLE_PWM_OFF_VALUE;
 8006ce6:	2000      	movs	r0, #0
				sys.spindle_speed = 0.0f;
 8006ce8:	613d      	str	r5, [r7, #16]
			// NOTE: A nonlinear model could be installed here, if required, but keep it VERY light-weight.
			sys.spindle_speed = rpm;
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
		}
		return(pwm_value);
	}
 8006cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pwm_value = SPINDLE_PWM_MAX_VALUE;
 8006cec:	2064      	movs	r0, #100	; 0x64
			sys.spindle_speed = settings.rpm_max;
 8006cee:	613d      	str	r5, [r7, #16]
	}
 8006cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8006cf2:	4631      	mov	r1, r6
 8006cf4:	4620      	mov	r0, r4
			sys.spindle_speed = rpm;
 8006cf6:	613c      	str	r4, [r7, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8006cf8:	f7f9 fcc2 	bl	8000680 <__aeabi_fsub>
 8006cfc:	4b09      	ldr	r3, [pc, #36]	; (8006d24 <spindle_compute_pwm_value+0x88>)
 8006cfe:	6819      	ldr	r1, [r3, #0]
 8006d00:	f7f9 fdc8 	bl	8000894 <__aeabi_fmul>
 8006d04:	f002 fff2 	bl	8009cec <floorf>
 8006d08:	f7f9 ffc6 	bl	8000c98 <__aeabi_f2uiz>
 8006d0c:	3001      	adds	r0, #1
 8006d0e:	b280      	uxth	r0, r0
	}
 8006d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				pwm_value = SPINDLE_PWM_MIN_VALUE;
 8006d12:	2001      	movs	r0, #1
				sys.spindle_speed = settings.rpm_min;
 8006d14:	613e      	str	r6, [r7, #16]
	}
 8006d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d18:	200013ec 	.word	0x200013ec
 8006d1c:	200009d0 	.word	0x200009d0
 8006d20:	3c23d70a 	.word	0x3c23d70a
 8006d24:	20001458 	.word	0x20001458

08006d28 <spindle_set_state>:
#ifdef VARIABLE_SPINDLE
  void spindle_set_state(uint8_t state, float rpm)
#else
  void _spindle_set_state(uint8_t state)
#endif
{
 8006d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (sys.abort) { return; } // Block during abort.
 8006d2a:	4d3f      	ldr	r5, [pc, #252]	; (8006e28 <spindle_set_state+0x100>)
 8006d2c:	786a      	ldrb	r2, [r5, #1]
 8006d2e:	2a00      	cmp	r2, #0
 8006d30:	d144      	bne.n	8006dbc <spindle_set_state+0x94>
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 8006d32:	4604      	mov	r4, r0
 8006d34:	2800      	cmp	r0, #0
 8006d36:	d034      	beq.n	8006da2 <spindle_set_state+0x7a>
    #endif
    spindle_stop();
  
  } else {
    #if !(defined(AVRTARGET) && defined(USE_SPINDLE_DIR_AS_ENABLE_PIN))
      if (state == SPINDLE_ENABLE_CW) {
 8006d38:	2810      	cmp	r0, #16
 8006d3a:	460e      	mov	r6, r1
 8006d3c:	d051      	beq.n	8006de2 <spindle_set_state+0xba>
        ResetSpindleDirectionBit();
	  }
	  else {
      SetSpindleDirectionBit();
 8006d3e:	2201      	movs	r2, #1
 8006d40:	483a      	ldr	r0, [pc, #232]	; (8006e2c <spindle_set_state+0x104>)
 8006d42:	4611      	mov	r1, r2
 8006d44:	f7fa fad4 	bl	80012f0 <GPIO_WriteBit>
      }
    #endif
  
    #ifdef VARIABLE_SPINDLE
      // NOTE: Assumes all calls to this function is when Grbl is not moving or must remain off.
      if (settings.flags & BITFLAG_LASER_MODE) {
 8006d48:	4b39      	ldr	r3, [pc, #228]	; (8006e30 <spindle_set_state+0x108>)
 8006d4a:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006d4e:	0792      	lsls	r2, r2, #30
 8006d50:	d443      	bmi.n	8006dda <spindle_set_state+0xb2>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8006d52:	6d5f      	ldr	r7, [r3, #84]	; 0x54
 8006d54:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8006d56:	4638      	mov	r0, r7
 8006d58:	4621      	mov	r1, r4
 8006d5a:	f7f9 ff4d 	bl	8000bf8 <__aeabi_fcmpge>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	d12d      	bne.n	8006dbe <spindle_set_state+0x96>
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8006d62:	7aa8      	ldrb	r0, [r5, #10]
 8006d64:	f7f9 fd42 	bl	80007ec <__aeabi_i2f>
 8006d68:	4932      	ldr	r1, [pc, #200]	; (8006e34 <spindle_set_state+0x10c>)
 8006d6a:	f7f9 fd93 	bl	8000894 <__aeabi_fmul>
 8006d6e:	4631      	mov	r1, r6
 8006d70:	f7f9 fd90 	bl	8000894 <__aeabi_fmul>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8006d74:	4621      	mov	r1, r4
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8006d76:	4606      	mov	r6, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8006d78:	f7f9 ff3e 	bl	8000bf8 <__aeabi_fcmpge>
 8006d7c:	b9f8      	cbnz	r0, 8006dbe <spindle_set_state+0x96>
		else if (rpm <= settings.rpm_min) {
 8006d7e:	4639      	mov	r1, r7
 8006d80:	4630      	mov	r0, r6
 8006d82:	f7f9 ff2f 	bl	8000be4 <__aeabi_fcmple>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	d031      	beq.n	8006dee <spindle_set_state+0xc6>
			if (rpm == 0.0f) { // S0 disables spindle
 8006d8a:	2400      	movs	r4, #0
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	4621      	mov	r1, r4
 8006d90:	f7f9 ff14 	bl	8000bbc <__aeabi_fcmpeq>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	d042      	beq.n	8006e1e <spindle_set_state+0xf6>
		TIM1->CCR1 = pwm_value;
 8006d98:	2200      	movs	r2, #0
 8006d9a:	4b27      	ldr	r3, [pc, #156]	; (8006e38 <spindle_set_state+0x110>)
				sys.spindle_speed = 0.0f;
 8006d9c:	612c      	str	r4, [r5, #16]
		TIM1->CCR1 = pwm_value;
 8006d9e:	869a      	strh	r2, [r3, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8006da0:	e038      	b.n	8006e14 <spindle_set_state+0xec>
      sys.spindle_speed = 0.0f;
 8006da2:	2300      	movs	r3, #0
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8006da4:	4601      	mov	r1, r0
 8006da6:	4824      	ldr	r0, [pc, #144]	; (8006e38 <spindle_set_state+0x110>)
      sys.spindle_speed = 0.0f;
 8006da8:	612b      	str	r3, [r5, #16]
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8006daa:	f7fa fbcd 	bl	8001548 <TIM_CtrlPWMOutputs>
        ResetSpindleEnablebit();
 8006dae:	4622      	mov	r2, r4
 8006db0:	2102      	movs	r1, #2
 8006db2:	481e      	ldr	r0, [pc, #120]	; (8006e2c <spindle_set_state+0x104>)
 8006db4:	f7fa fa9c 	bl	80012f0 <GPIO_WriteBit>
	  #endif
	#endif
	#endif
  }
  
  sys.report_ovr_counter = 0; // Set to report change immediately
 8006db8:	2300      	movs	r3, #0
 8006dba:	732b      	strb	r3, [r5, #12]
}
 8006dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		TIM1->CCR1 = pwm_value;
 8006dbe:	2264      	movs	r2, #100	; 0x64
 8006dc0:	4b1d      	ldr	r3, [pc, #116]	; (8006e38 <spindle_set_state+0x110>)
			sys.spindle_speed = settings.rpm_max;
 8006dc2:	612c      	str	r4, [r5, #16]
		TIM1->CCR1 = pwm_value;
 8006dc4:	869a      	strh	r2, [r3, #52]	; 0x34
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	481b      	ldr	r0, [pc, #108]	; (8006e38 <spindle_set_state+0x110>)
 8006dca:	f7fa fbbd 	bl	8001548 <TIM_CtrlPWMOutputs>
		SetSpindleEnablebit();
 8006dce:	2201      	movs	r2, #1
 8006dd0:	2102      	movs	r1, #2
 8006dd2:	4816      	ldr	r0, [pc, #88]	; (8006e2c <spindle_set_state+0x104>)
 8006dd4:	f7fa fa8c 	bl	80012f0 <GPIO_WriteBit>
 8006dd8:	e7ee      	b.n	8006db8 <spindle_set_state+0x90>
        if (state == SPINDLE_ENABLE_CCW) { rpm = 0.0f; } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
 8006dda:	2c20      	cmp	r4, #32
 8006ddc:	bf08      	it	eq
 8006dde:	2600      	moveq	r6, #0
 8006de0:	e7b7      	b.n	8006d52 <spindle_set_state+0x2a>
        ResetSpindleDirectionBit();
 8006de2:	2101      	movs	r1, #1
 8006de4:	4811      	ldr	r0, [pc, #68]	; (8006e2c <spindle_set_state+0x104>)
 8006de6:	f7fa fa83 	bl	80012f0 <GPIO_WriteBit>
      if (settings.flags & BITFLAG_LASER_MODE) {
 8006dea:	4b11      	ldr	r3, [pc, #68]	; (8006e30 <spindle_set_state+0x108>)
 8006dec:	e7b1      	b.n	8006d52 <spindle_set_state+0x2a>
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8006dee:	4639      	mov	r1, r7
 8006df0:	4630      	mov	r0, r6
			sys.spindle_speed = rpm;
 8006df2:	612e      	str	r6, [r5, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8006df4:	f7f9 fc44 	bl	8000680 <__aeabi_fsub>
 8006df8:	4b10      	ldr	r3, [pc, #64]	; (8006e3c <spindle_set_state+0x114>)
 8006dfa:	6819      	ldr	r1, [r3, #0]
 8006dfc:	f7f9 fd4a 	bl	8000894 <__aeabi_fmul>
 8006e00:	f002 ff74 	bl	8009cec <floorf>
 8006e04:	f7f9 ff48 	bl	8000c98 <__aeabi_f2uiz>
		TIM1->CCR1 = pwm_value;
 8006e08:	4b0b      	ldr	r3, [pc, #44]	; (8006e38 <spindle_set_state+0x110>)
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8006e0a:	3001      	adds	r0, #1
 8006e0c:	b280      	uxth	r0, r0
		TIM1->CCR1 = pwm_value;
 8006e0e:	8698      	strh	r0, [r3, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8006e10:	2800      	cmp	r0, #0
 8006e12:	d1d8      	bne.n	8006dc6 <spindle_set_state+0x9e>
				TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8006e14:	2100      	movs	r1, #0
 8006e16:	4808      	ldr	r0, [pc, #32]	; (8006e38 <spindle_set_state+0x110>)
 8006e18:	f7fa fb96 	bl	8001548 <TIM_CtrlPWMOutputs>
	}
 8006e1c:	e7d7      	b.n	8006dce <spindle_set_state+0xa6>
		TIM1->CCR1 = pwm_value;
 8006e1e:	2201      	movs	r2, #1
 8006e20:	4b05      	ldr	r3, [pc, #20]	; (8006e38 <spindle_set_state+0x110>)
				sys.spindle_speed = settings.rpm_min;
 8006e22:	612f      	str	r7, [r5, #16]
		TIM1->CCR1 = pwm_value;
 8006e24:	869a      	strh	r2, [r3, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8006e26:	e7ce      	b.n	8006dc6 <spindle_set_state+0x9e>
 8006e28:	200009d0 	.word	0x200009d0
 8006e2c:	40010c00 	.word	0x40010c00
 8006e30:	200013ec 	.word	0x200013ec
 8006e34:	3c23d70a 	.word	0x3c23d70a
 8006e38:	40012c00 	.word	0x40012c00
 8006e3c:	20001458 	.word	0x20001458

08006e40 <spindle_sync>:

// G-code parser entry-point for setting spindle state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
#ifdef VARIABLE_SPINDLE
  void spindle_sync(uint8_t state, float rpm)
  {
 8006e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (sys.state == STATE_CHECK_MODE) { return; }
 8006e42:	4d40      	ldr	r5, [pc, #256]	; (8006f44 <spindle_sync+0x104>)
 8006e44:	782b      	ldrb	r3, [r5, #0]
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d04c      	beq.n	8006ee4 <spindle_sync+0xa4>
    protocol_buffer_synchronize(); // Empty planner buffer to ensure spindle is set when programmed.
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	460e      	mov	r6, r1
 8006e4e:	f7fe fc11 	bl	8005674 <protocol_buffer_synchronize>
  if (sys.abort) { return; } // Block during abort.
 8006e52:	786a      	ldrb	r2, [r5, #1]
 8006e54:	2a00      	cmp	r2, #0
 8006e56:	d145      	bne.n	8006ee4 <spindle_sync+0xa4>
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 8006e58:	2c00      	cmp	r4, #0
 8006e5a:	d04a      	beq.n	8006ef2 <spindle_sync+0xb2>
      if (state == SPINDLE_ENABLE_CW) {
 8006e5c:	2c10      	cmp	r4, #16
 8006e5e:	d042      	beq.n	8006ee6 <spindle_sync+0xa6>
      SetSpindleDirectionBit();
 8006e60:	2201      	movs	r2, #1
 8006e62:	4839      	ldr	r0, [pc, #228]	; (8006f48 <spindle_sync+0x108>)
 8006e64:	4611      	mov	r1, r2
 8006e66:	f7fa fa43 	bl	80012f0 <GPIO_WriteBit>
      if (settings.flags & BITFLAG_LASER_MODE) {
 8006e6a:	4b38      	ldr	r3, [pc, #224]	; (8006f4c <spindle_sync+0x10c>)
 8006e6c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006e70:	0792      	lsls	r2, r2, #30
 8006e72:	d502      	bpl.n	8006e7a <spindle_sync+0x3a>
        if (state == SPINDLE_ENABLE_CCW) { rpm = 0.0f; } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
 8006e74:	2c20      	cmp	r4, #32
 8006e76:	bf08      	it	eq
 8006e78:	2600      	moveq	r6, #0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8006e7a:	6d5f      	ldr	r7, [r3, #84]	; 0x54
 8006e7c:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8006e7e:	4638      	mov	r0, r7
 8006e80:	4621      	mov	r1, r4
 8006e82:	f7f9 feb9 	bl	8000bf8 <__aeabi_fcmpge>
 8006e86:	b9f0      	cbnz	r0, 8006ec6 <spindle_sync+0x86>
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8006e88:	7aa8      	ldrb	r0, [r5, #10]
 8006e8a:	f7f9 fcaf 	bl	80007ec <__aeabi_i2f>
 8006e8e:	4930      	ldr	r1, [pc, #192]	; (8006f50 <spindle_sync+0x110>)
 8006e90:	f7f9 fd00 	bl	8000894 <__aeabi_fmul>
 8006e94:	4631      	mov	r1, r6
 8006e96:	f7f9 fcfd 	bl	8000894 <__aeabi_fmul>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8006e9a:	4621      	mov	r1, r4
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8006e9c:	4606      	mov	r6, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8006e9e:	f7f9 feab 	bl	8000bf8 <__aeabi_fcmpge>
 8006ea2:	b980      	cbnz	r0, 8006ec6 <spindle_sync+0x86>
		else if (rpm <= settings.rpm_min) {
 8006ea4:	4639      	mov	r1, r7
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	f7f9 fe9c 	bl	8000be4 <__aeabi_fcmple>
 8006eac:	b368      	cbz	r0, 8006f0a <spindle_sync+0xca>
			if (rpm == 0.0f) { // S0 disables spindle
 8006eae:	2400      	movs	r4, #0
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	4621      	mov	r1, r4
 8006eb4:	f7f9 fe82 	bl	8000bbc <__aeabi_fcmpeq>
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	d03e      	beq.n	8006f3a <spindle_sync+0xfa>
		TIM1->CCR1 = pwm_value;
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	4b25      	ldr	r3, [pc, #148]	; (8006f54 <spindle_sync+0x114>)
				sys.spindle_speed = 0.0f;
 8006ec0:	612c      	str	r4, [r5, #16]
		TIM1->CCR1 = pwm_value;
 8006ec2:	869a      	strh	r2, [r3, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8006ec4:	e034      	b.n	8006f30 <spindle_sync+0xf0>
		TIM1->CCR1 = pwm_value;
 8006ec6:	2264      	movs	r2, #100	; 0x64
 8006ec8:	4b22      	ldr	r3, [pc, #136]	; (8006f54 <spindle_sync+0x114>)
			sys.spindle_speed = settings.rpm_max;
 8006eca:	612c      	str	r4, [r5, #16]
		TIM1->CCR1 = pwm_value;
 8006ecc:	869a      	strh	r2, [r3, #52]	; 0x34
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8006ece:	2101      	movs	r1, #1
 8006ed0:	4820      	ldr	r0, [pc, #128]	; (8006f54 <spindle_sync+0x114>)
 8006ed2:	f7fa fb39 	bl	8001548 <TIM_CtrlPWMOutputs>
		SetSpindleEnablebit();
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	2102      	movs	r1, #2
 8006eda:	481b      	ldr	r0, [pc, #108]	; (8006f48 <spindle_sync+0x108>)
 8006edc:	f7fa fa08 	bl	80012f0 <GPIO_WriteBit>
  sys.report_ovr_counter = 0; // Set to report change immediately
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	732b      	strb	r3, [r5, #12]
    spindle_set_state(state,rpm);
  }
 8006ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ResetSpindleDirectionBit();
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	4817      	ldr	r0, [pc, #92]	; (8006f48 <spindle_sync+0x108>)
 8006eea:	f7fa fa01 	bl	80012f0 <GPIO_WriteBit>
      if (settings.flags & BITFLAG_LASER_MODE) {
 8006eee:	4b17      	ldr	r3, [pc, #92]	; (8006f4c <spindle_sync+0x10c>)
 8006ef0:	e7c3      	b.n	8006e7a <spindle_sync+0x3a>
      sys.spindle_speed = 0.0f;
 8006ef2:	2300      	movs	r3, #0
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8006ef4:	4621      	mov	r1, r4
 8006ef6:	4817      	ldr	r0, [pc, #92]	; (8006f54 <spindle_sync+0x114>)
      sys.spindle_speed = 0.0f;
 8006ef8:	612b      	str	r3, [r5, #16]
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8006efa:	f7fa fb25 	bl	8001548 <TIM_CtrlPWMOutputs>
        ResetSpindleEnablebit();
 8006efe:	4622      	mov	r2, r4
 8006f00:	2102      	movs	r1, #2
 8006f02:	4811      	ldr	r0, [pc, #68]	; (8006f48 <spindle_sync+0x108>)
 8006f04:	f7fa f9f4 	bl	80012f0 <GPIO_WriteBit>
}
 8006f08:	e7ea      	b.n	8006ee0 <spindle_sync+0xa0>
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8006f0a:	4639      	mov	r1, r7
 8006f0c:	4630      	mov	r0, r6
			sys.spindle_speed = rpm;
 8006f0e:	612e      	str	r6, [r5, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8006f10:	f7f9 fbb6 	bl	8000680 <__aeabi_fsub>
 8006f14:	4b10      	ldr	r3, [pc, #64]	; (8006f58 <spindle_sync+0x118>)
 8006f16:	6819      	ldr	r1, [r3, #0]
 8006f18:	f7f9 fcbc 	bl	8000894 <__aeabi_fmul>
 8006f1c:	f002 fee6 	bl	8009cec <floorf>
 8006f20:	f7f9 feba 	bl	8000c98 <__aeabi_f2uiz>
		TIM1->CCR1 = pwm_value;
 8006f24:	4a0b      	ldr	r2, [pc, #44]	; (8006f54 <spindle_sync+0x114>)
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8006f26:	1c43      	adds	r3, r0, #1
 8006f28:	b29b      	uxth	r3, r3
		TIM1->CCR1 = pwm_value;
 8006f2a:	8693      	strh	r3, [r2, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1ce      	bne.n	8006ece <spindle_sync+0x8e>
				TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8006f30:	2100      	movs	r1, #0
 8006f32:	4808      	ldr	r0, [pc, #32]	; (8006f54 <spindle_sync+0x114>)
 8006f34:	f7fa fb08 	bl	8001548 <TIM_CtrlPWMOutputs>
	}
 8006f38:	e7cd      	b.n	8006ed6 <spindle_sync+0x96>
		TIM1->CCR1 = pwm_value;
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	4b05      	ldr	r3, [pc, #20]	; (8006f54 <spindle_sync+0x114>)
				sys.spindle_speed = settings.rpm_min;
 8006f3e:	612f      	str	r7, [r5, #16]
		TIM1->CCR1 = pwm_value;
 8006f40:	869a      	strh	r2, [r3, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8006f42:	e7c4      	b.n	8006ece <spindle_sync+0x8e>
 8006f44:	200009d0 	.word	0x200009d0
 8006f48:	40010c00 	.word	0x40010c00
 8006f4c:	200013ec 	.word	0x200013ec
 8006f50:	3c23d70a 	.word	0x3c23d70a
 8006f54:	40012c00 	.word	0x40012c00
 8006f58:	20001458 	.word	0x20001458

08006f5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006f5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006f94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006f60:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006f62:	e003      	b.n	8006f6c <LoopCopyDataInit>

08006f64 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006f64:	4b0c      	ldr	r3, [pc, #48]	; (8006f98 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8006f66:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006f68:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006f6a:	3104      	adds	r1, #4

08006f6c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006f6c:	480b      	ldr	r0, [pc, #44]	; (8006f9c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8006f6e:	4b0c      	ldr	r3, [pc, #48]	; (8006fa0 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8006f70:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006f72:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006f74:	d3f6      	bcc.n	8006f64 <CopyDataInit>
	ldr	r2, =_sbss
 8006f76:	4a0b      	ldr	r2, [pc, #44]	; (8006fa4 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8006f78:	e002      	b.n	8006f80 <LoopFillZerobss>

08006f7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006f7a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006f7c:	f842 3b04 	str.w	r3, [r2], #4

08006f80 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006f80:	4b09      	ldr	r3, [pc, #36]	; (8006fa8 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8006f82:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006f84:	d3f9      	bcc.n	8006f7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006f86:	f001 fb3f 	bl	8008608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006f8a:	f002 fd93 	bl	8009ab4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006f8e:	f7fc fa05 	bl	800339c <main>
	bx	lr
 8006f92:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006f94:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8006f98:	0800b448 	.word	0x0800b448
	ldr	r0, =_sdata
 8006f9c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006fa0:	2000051c 	.word	0x2000051c
	ldr	r2, =_sbss
 8006fa4:	2000051c 	.word	0x2000051c
	ldr	r3, = _ebss
 8006fa8:	20001690 	.word	0x20001690

08006fac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006fac:	e7fe      	b.n	8006fac <ADC1_2_IRQHandler>
	...

08006fb0 <st_wake_up>:


// Stepper state initialization. Cycle should only start if the st.cycle_start flag is
// enabled. Startup init and limits call this function but shouldn't start the cycle.
void st_wake_up()
{
 8006fb0:	b510      	push	{r4, lr}
		mc_reset();
		return;
	}
#endif
  // Enable stepper drivers.
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 8006fb2:	4c1b      	ldr	r4, [pc, #108]	; (8007020 <st_wake_up+0x70>)
  {
	  SetStepperDisableBit();
 8006fb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 8006fb8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
	  SetStepperDisableBit();
 8006fbc:	4819      	ldr	r0, [pc, #100]	; (8007024 <st_wake_up+0x74>)
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 8006fbe:	075b      	lsls	r3, r3, #29
 8006fc0:	d52a      	bpl.n	8007018 <st_wake_up+0x68>
	  SetStepperDisableBit();
 8006fc2:	f7fa f991 	bl	80012e8 <GPIO_SetBits>
#ifdef WIN32
  nTimer1Out = 1;
#endif
#if defined (STM32F103C8)
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
  TIM3->EGR = TIM_PSCReloadMode_Immediate;
 8006fc6:	f04f 0c01 	mov.w	ip, #1
  TIM3->SR = ~TIM_SR_UIF;
 8006fca:	f64f 7efe 	movw	lr, #65534	; 0xfffe

  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8006fce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 8006fd2:	4b15      	ldr	r3, [pc, #84]	; (8007028 <st_wake_up+0x78>)
 8006fd4:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4c14      	ldr	r4, [pc, #80]	; (800702c <st_wake_up+0x7c>)
  st.step_outbits = step_port_invert_mask;
 8006fdc:	4814      	ldr	r0, [pc, #80]	; (8007030 <st_wake_up+0x80>)
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 8006fde:	fba4 4303 	umull	r4, r3, r4, r3
 8006fe2:	0c9b      	lsrs	r3, r3, #18
 8006fe4:	fb01 f303 	mul.w	r3, r1, r3
  st.step_outbits = step_port_invert_mask;
 8006fe8:	4c12      	ldr	r4, [pc, #72]	; (8007034 <st_wake_up+0x84>)
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
 8006fea:	4913      	ldr	r1, [pc, #76]	; (8007038 <st_wake_up+0x88>)
  st.step_outbits = step_port_invert_mask;
 8006fec:	8824      	ldrh	r4, [r4, #0]
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	8243      	strh	r3, [r0, #18]
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
 8006ff2:	858b      	strh	r3, [r1, #44]	; 0x2c
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8006ff4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  st.step_outbits = step_port_invert_mask;
 8006ff6:	8284      	strh	r4, [r0, #20]
  TIM3->EGR = TIM_PSCReloadMode_Immediate;
 8006ff8:	f8a1 c014 	strh.w	ip, [r1, #20]
  TIM3->SR = ~TIM_SR_UIF;
 8006ffc:	f8a1 e010 	strh.w	lr, [r1, #16]
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8007000:	885b      	ldrh	r3, [r3, #2]
 8007002:	3b01      	subs	r3, #1
 8007004:	b29b      	uxth	r3, r3
 8007006:	8593      	strh	r3, [r2, #44]	; 0x2c
  /* Set the Autoreload value */
#ifndef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING        
  TIM2->PSC = st.exec_segment->prescaler;
#endif
  TIM2->EGR = TIM_PSCReloadMode_Immediate;
 8007008:	f8a2 c014 	strh.w	ip, [r2, #20]
  TIM2->CR1 |= TIM_CR1_CEN;
 800700c:	8813      	ldrh	r3, [r2, #0]
 800700e:	b29b      	uxth	r3, r3
 8007010:	ea43 030c 	orr.w	r3, r3, ip
 8007014:	8013      	strh	r3, [r2, #0]
#endif
}
 8007016:	bd10      	pop	{r4, pc}
	  ResetStepperDisableBit();
 8007018:	f7fa f968 	bl	80012ec <GPIO_ResetBits>
 800701c:	e7d3      	b.n	8006fc6 <st_wake_up+0x16>
 800701e:	bf00      	nop
 8007020:	200013ec 	.word	0x200013ec
 8007024:	40010800 	.word	0x40010800
 8007028:	20000004 	.word	0x20000004
 800702c:	431bde83 	.word	0x431bde83
 8007030:	200014f0 	.word	0x200014f0
 8007034:	20001600 	.word	0x20001600
 8007038:	40000400 	.word	0x40000400

0800703c <st_go_idle>:
#endif
#ifdef WIN32
  nTimer1Out = 0;
#endif
#ifdef STM32F103C8
  TIM2->CR1 &= ~TIM_CR1_CEN;
 800703c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM2->CNT = 0;
 8007040:	2100      	movs	r1, #0
{
 8007042:	b538      	push	{r3, r4, r5, lr}
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8007044:	8813      	ldrh	r3, [r2, #0]

  busy = false;

  // Set stepper driver idle state, disabled or enabled, depending on settings and circumstances.
  bool pin_state = false; // Keep enabled.
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8007046:	4c18      	ldr	r4, [pc, #96]	; (80070a8 <st_go_idle+0x6c>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8007048:	f023 0301 	bic.w	r3, r3, #1
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800704c:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
  busy = false;
 8007050:	4d16      	ldr	r5, [pc, #88]	; (80070ac <st_go_idle+0x70>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8007052:	041b      	lsls	r3, r3, #16
 8007054:	0c1b      	lsrs	r3, r3, #16
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8007056:	28ff      	cmp	r0, #255	; 0xff
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8007058:	8013      	strh	r3, [r2, #0]
  TIM2->CNT = 0;
 800705a:	8491      	strh	r1, [r2, #36]	; 0x24
  busy = false;
 800705c:	7029      	strb	r1, [r5, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800705e:	d00e      	beq.n	800707e <st_go_idle+0x42>
 8007060:	4b13      	ldr	r3, [pc, #76]	; (80070b0 <st_go_idle+0x74>)
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	2b04      	cmp	r3, #4
 8007066:	d112      	bne.n	800708e <st_go_idle+0x52>
    // Force stepper dwell to lock axes for a defined amount of time to ensure the axes come to a complete
    // stop and not drift from residual inertial forces at the end of the last movement.
    delay_ms(settings.stepper_idle_lock_time);
    pin_state = true; // Override. Disable steppers.
  }
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 8007068:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800706c:	075a      	lsls	r2, r3, #29
 800706e:	d514      	bpl.n	800709a <st_go_idle+0x5e>
  }
  else 
  { 
	  ResetStepperDisableBit();
  }
}
 8007070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  SetStepperDisableBit();
 8007074:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007078:	480e      	ldr	r0, [pc, #56]	; (80070b4 <st_go_idle+0x78>)
 800707a:	f7fa b935 	b.w	80012e8 <GPIO_SetBits>
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800707e:	4b0e      	ldr	r3, [pc, #56]	; (80070b8 <st_go_idle+0x7c>)
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1ec      	bne.n	8007060 <st_go_idle+0x24>
 8007086:	4b0a      	ldr	r3, [pc, #40]	; (80070b0 <st_go_idle+0x74>)
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	2b80      	cmp	r3, #128	; 0x80
 800708c:	d1ec      	bne.n	8007068 <st_go_idle+0x2c>
    delay_ms(settings.stepper_idle_lock_time);
 800708e:	f7fc fdcb 	bl	8003c28 <delay_ms>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 8007092:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8007096:	075b      	lsls	r3, r3, #29
 8007098:	d5ea      	bpl.n	8007070 <st_go_idle+0x34>
}
 800709a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  ResetStepperDisableBit();
 800709e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80070a2:	4804      	ldr	r0, [pc, #16]	; (80070b4 <st_go_idle+0x78>)
 80070a4:	f7fa b922 	b.w	80012ec <GPIO_ResetBits>
 80070a8:	200013ec 	.word	0x200013ec
 80070ac:	2000145c 	.word	0x2000145c
 80070b0:	200009d0 	.word	0x200009d0
 80070b4:	40010800 	.word	0x40010800
 80070b8:	20000a06 	.word	0x20000a06

080070bc <TIM2_IRQHandler>:
ISR(TIMER1_COMPA_vect)
#endif
#ifdef WIN32
void Timer1Proc()
#endif
{
 80070bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifdef STM32F103C8
	if ((TIM2->SR & TIM_SR_UIF) != 0)                  // check interrupt source
 80070be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80070c2:	8a1d      	ldrh	r5, [r3, #16]
 80070c4:	f015 0501 	ands.w	r5, r5, #1
 80070c8:	f000 80a4 	beq.w	8007214 <TIM2_IRQHandler+0x158>
	{
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
		TIM2->CNT = 0;
 80070cc:	2200      	movs	r2, #0
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
 80070ce:	f64f 71fe 	movw	r1, #65534	; 0xfffe
	{
		return;
	}
#endif

  if (busy) {return; } // The busy-flag is used to avoid reentering this interrupt
 80070d2:	4e7b      	ldr	r6, [pc, #492]	; (80072c0 <TIM2_IRQHandler+0x204>)
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
 80070d4:	8219      	strh	r1, [r3, #16]
		TIM2->CNT = 0;
 80070d6:	849a      	strh	r2, [r3, #36]	; 0x24
  if (busy) {return; } // The busy-flag is used to avoid reentering this interrupt
 80070d8:	7832      	ldrb	r2, [r6, #0]
 80070da:	2a00      	cmp	r2, #0
 80070dc:	f040 809a 	bne.w	8007214 <TIM2_IRQHandler+0x158>
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK);
#endif
#ifdef STM32F103C8
  //GPIO_Write(DIRECTION_PORT, (GPIO_ReadOutputData(DIRECTION_PORT) & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 80070e0:	f64f 7efc 	movw	lr, #65532	; 0xfffc
  nTimer0Out = st.step_pulse_time;
#endif
#ifdef STM32F103C8
  TIM3->CR1 |= TIM_CR1_CEN;
#endif
  busy = true;
 80070e4:	2001      	movs	r0, #1
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
 80070e6:	4f77      	ldr	r7, [pc, #476]	; (80072c4 <TIM2_IRQHandler+0x208>)
 80070e8:	4c77      	ldr	r4, [pc, #476]	; (80072c8 <TIM2_IRQHandler+0x20c>)
 80070ea:	68fa      	ldr	r2, [r7, #12]
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 80070ec:	4977      	ldr	r1, [pc, #476]	; (80072cc <TIM2_IRQHandler+0x210>)
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
 80070ee:	f022 0cf0 	bic.w	ip, r2, #240	; 0xf0
 80070f2:	8ae2      	ldrh	r2, [r4, #22]
 80070f4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80070f8:	ea42 020c 	orr.w	r2, r2, ip
 80070fc:	60fa      	str	r2, [r7, #12]
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 80070fe:	f8a1 e010 	strh.w	lr, [r1, #16]
      STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | st.step_outbits);
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	f8b4 c014 	ldrh.w	ip, [r4, #20]
 8007108:	f022 020f 	bic.w	r2, r2, #15
 800710c:	ea42 020c 	orr.w	r2, r2, ip
 8007110:	60fa      	str	r2, [r7, #12]
  TIM3->CR1 |= TIM_CR1_CEN;
 8007112:	880a      	ldrh	r2, [r1, #0]
  sei(); // Re-enable interrupts to allow Stepper Port Reset Interrupt to fire on-time.
         // NOTE: The remaining code in this ISR will finish before returning to main program.
#endif

  // If there is no step segment, attempt to pop one from the stepper buffer
  if (st.exec_segment == NULL) {
 8007114:	6b27      	ldr	r7, [r4, #48]	; 0x30
  TIM3->CR1 |= TIM_CR1_CEN;
 8007116:	b292      	uxth	r2, r2
 8007118:	4302      	orrs	r2, r0
 800711a:	800a      	strh	r2, [r1, #0]
  busy = true;
 800711c:	7030      	strb	r0, [r6, #0]
  if (st.exec_segment == NULL) {
 800711e:	2f00      	cmp	r7, #0
 8007120:	d07c      	beq.n	800721c <TIM2_IRQHandler+0x160>
    }
  }


  // Check probing state.
  if (sys_probe_state == PROBE_ACTIVE) { probe_state_monitor(); }
 8007122:	4b6b      	ldr	r3, [pc, #428]	; (80072d0 <TIM2_IRQHandler+0x214>)
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	2b01      	cmp	r3, #1
 8007128:	f000 80b7 	beq.w	800729a <TIM2_IRQHandler+0x1de>

  // Reset step out bits.
  st.step_outbits = 0;
 800712c:	2000      	movs	r0, #0

  // Execute step displacement profile by Bresenham line algorithm
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_x += st.steps[X_AXIS];
 800712e:	6822      	ldr	r2, [r4, #0]
 8007130:	69a3      	ldr	r3, [r4, #24]
  #else
    st.counter_x += st.exec_block->steps[X_AXIS];
  #endif
  if (st.counter_x > st.exec_block->step_event_count) {
 8007132:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    st.counter_x += st.steps[X_AXIS];
 8007134:	441a      	add	r2, r3
  if (st.counter_x > st.exec_block->step_event_count) {
 8007136:	690b      	ldr	r3, [r1, #16]
    st.counter_x += st.steps[X_AXIS];
 8007138:	6022      	str	r2, [r4, #0]
  if (st.counter_x > st.exec_block->step_event_count) {
 800713a:	429a      	cmp	r2, r3
  st.step_outbits = 0;
 800713c:	82a0      	strh	r0, [r4, #20]
  if (st.counter_x > st.exec_block->step_event_count) {
 800713e:	d96a      	bls.n	8007216 <TIM2_IRQHandler+0x15a>
    st.step_outbits |= (1<<X_STEP_BIT);
    st.counter_x -= st.exec_block->step_event_count;
 8007140:	1ad2      	subs	r2, r2, r3
 8007142:	6022      	str	r2, [r4, #0]
    st.step_outbits |= (1<<X_STEP_BIT);
 8007144:	2201      	movs	r2, #1
 8007146:	2003      	movs	r0, #3
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
 8007148:	4f62      	ldr	r7, [pc, #392]	; (80072d4 <TIM2_IRQHandler+0x218>)
    st.step_outbits |= (1<<X_STEP_BIT);
 800714a:	82a2      	strh	r2, [r4, #20]
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
 800714c:	8a8a      	ldrh	r2, [r1, #20]
 800714e:	f012 0f10 	tst.w	r2, #16
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	bf14      	ite	ne
 8007156:	f102 32ff 	addne.w	r2, r2, #4294967295
    else { sys_position[X_AXIS]++; }
 800715a:	3201      	addeq	r2, #1
 800715c:	603a      	str	r2, [r7, #0]
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_y += st.steps[Y_AXIS];
 800715e:	6862      	ldr	r2, [r4, #4]
 8007160:	69e7      	ldr	r7, [r4, #28]
 8007162:	443a      	add	r2, r7
  #else
    st.counter_y += st.exec_block->steps[Y_AXIS];
  #endif
  if (st.counter_y > st.exec_block->step_event_count) {
 8007164:	4293      	cmp	r3, r2
    st.counter_y += st.steps[Y_AXIS];
 8007166:	6062      	str	r2, [r4, #4]
  if (st.counter_y > st.exec_block->step_event_count) {
 8007168:	d20d      	bcs.n	8007186 <TIM2_IRQHandler+0xca>
    st.step_outbits |= (1<<Y_STEP_BIT);
    st.counter_y -= st.exec_block->step_event_count;
 800716a:	1ad2      	subs	r2, r2, r3
 800716c:	4605      	mov	r5, r0
 800716e:	6062      	str	r2, [r4, #4]
    st.step_outbits |= (1<<Y_STEP_BIT);
 8007170:	82a0      	strh	r0, [r4, #20]
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 8007172:	8a8a      	ldrh	r2, [r1, #20]
 8007174:	4857      	ldr	r0, [pc, #348]	; (80072d4 <TIM2_IRQHandler+0x218>)
 8007176:	f012 0f20 	tst.w	r2, #32
 800717a:	6842      	ldr	r2, [r0, #4]
 800717c:	bf14      	ite	ne
 800717e:	f102 32ff 	addne.w	r2, r2, #4294967295
    else { sys_position[Y_AXIS]++; }
 8007182:	3201      	addeq	r2, #1
 8007184:	6042      	str	r2, [r0, #4]
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_z += st.steps[Z_AXIS];
 8007186:	68a2      	ldr	r2, [r4, #8]
 8007188:	6a20      	ldr	r0, [r4, #32]
 800718a:	4402      	add	r2, r0
  #else
    st.counter_z += st.exec_block->steps[Z_AXIS];
  #endif
  if (st.counter_z > st.exec_block->step_event_count) {
 800718c:	4293      	cmp	r3, r2
    st.counter_z += st.steps[Z_AXIS];
 800718e:	60a2      	str	r2, [r4, #8]
  if (st.counter_z > st.exec_block->step_event_count) {
 8007190:	d20f      	bcs.n	80071b2 <TIM2_IRQHandler+0xf6>
    st.step_outbits |= (1<<Z_STEP_BIT);
    st.counter_z -= st.exec_block->step_event_count;
 8007192:	1ad2      	subs	r2, r2, r3
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 8007194:	484f      	ldr	r0, [pc, #316]	; (80072d4 <TIM2_IRQHandler+0x218>)
    st.counter_z -= st.exec_block->step_event_count;
 8007196:	60a2      	str	r2, [r4, #8]
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 8007198:	8a8a      	ldrh	r2, [r1, #20]
    st.step_outbits |= (1<<Z_STEP_BIT);
 800719a:	f045 0504 	orr.w	r5, r5, #4
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 800719e:	f012 0f40 	tst.w	r2, #64	; 0x40
 80071a2:	6882      	ldr	r2, [r0, #8]
    st.step_outbits |= (1<<Z_STEP_BIT);
 80071a4:	b2ad      	uxth	r5, r5
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 80071a6:	bf14      	ite	ne
 80071a8:	f102 32ff 	addne.w	r2, r2, #4294967295
    else { sys_position[Z_AXIS]++; }
 80071ac:	3201      	addeq	r2, #1
    st.step_outbits |= (1<<Z_STEP_BIT);
 80071ae:	82a5      	strh	r5, [r4, #20]
    else { sys_position[Z_AXIS]++; }
 80071b0:	6082      	str	r2, [r0, #8]
  }
// --- YSV 22-06-2018
  #if defined(AA_AXIS) || defined(AB_AXIS) || defined(ABC_AXIS)
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_a += st.steps[A_AXIS];
 80071b2:	68e2      	ldr	r2, [r4, #12]
 80071b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80071b6:	4402      	add	r2, r0
  #else
    st.counter_a += st.exec_block->steps[A_AXIS];
  #endif
  if (st.counter_a > st.exec_block->step_event_count) {
 80071b8:	4293      	cmp	r3, r2
    st.counter_a += st.steps[A_AXIS];
 80071ba:	60e2      	str	r2, [r4, #12]
  if (st.counter_a > st.exec_block->step_event_count) {
 80071bc:	d20f      	bcs.n	80071de <TIM2_IRQHandler+0x122>
    st.step_outbits |= (1<<A_STEP_BIT);
    st.counter_a -= st.exec_block->step_event_count;
 80071be:	1ad3      	subs	r3, r2, r3
    if (st.exec_block->direction_bits & (1<<A_DIRECTION_BIT)) { sys_position[A_AXIS]--; }
 80071c0:	8a8a      	ldrh	r2, [r1, #20]
    st.counter_a -= st.exec_block->step_event_count;
 80071c2:	60e3      	str	r3, [r4, #12]
    if (st.exec_block->direction_bits & (1<<A_DIRECTION_BIT)) { sys_position[A_AXIS]--; }
 80071c4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80071c8:	4a42      	ldr	r2, [pc, #264]	; (80072d4 <TIM2_IRQHandler+0x218>)
    st.step_outbits |= (1<<A_STEP_BIT);
 80071ca:	f045 0508 	orr.w	r5, r5, #8
    if (st.exec_block->direction_bits & (1<<A_DIRECTION_BIT)) { sys_position[A_AXIS]--; }
 80071ce:	68d3      	ldr	r3, [r2, #12]
    st.step_outbits |= (1<<A_STEP_BIT);
 80071d0:	b2ad      	uxth	r5, r5
    if (st.exec_block->direction_bits & (1<<A_DIRECTION_BIT)) { sys_position[A_AXIS]--; }
 80071d2:	bf14      	ite	ne
 80071d4:	f103 33ff 	addne.w	r3, r3, #4294967295
    else { sys_position[A_AXIS]++; }
 80071d8:	3301      	addeq	r3, #1
    st.step_outbits |= (1<<A_STEP_BIT);
 80071da:	82a5      	strh	r5, [r4, #20]
    else { sys_position[A_AXIS]++; }
 80071dc:	60d3      	str	r3, [r2, #12]
    else { sys_position[C_AXIS]++; }
  }
  #endif
// ---
  // During a homing cycle, lock out and prevent desired axes from moving.
  if (sys.state == STATE_HOMING) { st.step_outbits &= sys.homing_axis_lock; }
 80071de:	4b3e      	ldr	r3, [pc, #248]	; (80072d8 <TIM2_IRQHandler+0x21c>)
 80071e0:	781a      	ldrb	r2, [r3, #0]
 80071e2:	2a04      	cmp	r2, #4
 80071e4:	d102      	bne.n	80071ec <TIM2_IRQHandler+0x130>
 80071e6:	88db      	ldrh	r3, [r3, #6]
 80071e8:	401d      	ands	r5, r3
 80071ea:	82a5      	strh	r5, [r4, #20]

  st.step_count--; // Decrement step events count
 80071ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80071ee:	3b01      	subs	r3, #1
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	8523      	strh	r3, [r4, #40]	; 0x28
  if (st.step_count == 0) {
 80071f4:	b943      	cbnz	r3, 8007208 <TIM2_IRQHandler+0x14c>
    // Segment is complete. Discard current segment and advance segment indexing.
    st.exec_segment = NULL;
#ifndef WIN32
	uint8_t segment_tail_next = segment_buffer_tail + 1;
 80071f6:	4a39      	ldr	r2, [pc, #228]	; (80072dc <TIM2_IRQHandler+0x220>)
    st.exec_segment = NULL;
 80071f8:	6323      	str	r3, [r4, #48]	; 0x30
	uint8_t segment_tail_next = segment_buffer_tail + 1;
 80071fa:	7813      	ldrb	r3, [r2, #0]
 80071fc:	3301      	adds	r3, #1
 80071fe:	b2db      	uxtb	r3, r3
	if (segment_tail_next == SEGMENT_BUFFER_SIZE)
		segment_tail_next = 0;
 8007200:	2b0a      	cmp	r3, #10
 8007202:	bf08      	it	eq
 8007204:	2300      	moveq	r3, #0
	segment_buffer_tail = segment_tail_next;
 8007206:	7013      	strb	r3, [r2, #0]
	}
#endif
  }

  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
  busy = false;
 8007208:	2300      	movs	r3, #0
  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
 800720a:	4a35      	ldr	r2, [pc, #212]	; (80072e0 <TIM2_IRQHandler+0x224>)
  busy = false;
 800720c:	7033      	strb	r3, [r6, #0]
  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
 800720e:	8812      	ldrh	r2, [r2, #0]
 8007210:	4055      	eors	r5, r2
 8007212:	82a5      	strh	r5, [r4, #20]
}
 8007214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007216:	4605      	mov	r5, r0
 8007218:	2002      	movs	r0, #2
 800721a:	e7a0      	b.n	800715e <TIM2_IRQHandler+0xa2>
    if (segment_buffer_head != segment_buffer_tail) {
 800721c:	4931      	ldr	r1, [pc, #196]	; (80072e4 <TIM2_IRQHandler+0x228>)
 800721e:	4a2f      	ldr	r2, [pc, #188]	; (80072dc <TIM2_IRQHandler+0x220>)
 8007220:	7808      	ldrb	r0, [r1, #0]
 8007222:	7811      	ldrb	r1, [r2, #0]
 8007224:	4288      	cmp	r0, r1
 8007226:	d03d      	beq.n	80072a4 <TIM2_IRQHandler+0x1e8>
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 8007228:	7811      	ldrb	r1, [r2, #0]
 800722a:	4a2f      	ldr	r2, [pc, #188]	; (80072e8 <TIM2_IRQHandler+0x22c>)
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 800722c:	f894 c02a 	ldrb.w	ip, [r4, #42]	; 0x2a
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 8007230:	eb02 07c1 	add.w	r7, r2, r1, lsl #3
	  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8007234:	8878      	ldrh	r0, [r7, #2]
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 8007236:	6327      	str	r7, [r4, #48]	; 0x30
	  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8007238:	3801      	subs	r0, #1
 800723a:	b280      	uxth	r0, r0
 800723c:	8598      	strh	r0, [r3, #44]	; 0x2c
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 800723e:	793b      	ldrb	r3, [r7, #4]
      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 8007240:	f832 0031 	ldrh.w	r0, [r2, r1, lsl #3]
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 8007244:	459c      	cmp	ip, r3
      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 8007246:	8520      	strh	r0, [r4, #40]	; 0x28
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 8007248:	ea4f 01c1 	mov.w	r1, r1, lsl #3
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 800724c:	d028      	beq.n	80072a0 <TIM2_IRQHandler+0x1e4>
        st.exec_block = &st_block_buffer[st.exec_block_index];
 800724e:	4827      	ldr	r0, [pc, #156]	; (80072ec <TIM2_IRQHandler+0x230>)
        st.exec_block_index = st.exec_segment->st_block_index;
 8007250:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        st.exec_block = &st_block_buffer[st.exec_block_index];
 8007254:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007258:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = (st.exec_block->step_event_count >> 1);
 800725c:	6918      	ldr	r0, [r3, #16]
        st.exec_block = &st_block_buffer[st.exec_block_index];
 800725e:	62e3      	str	r3, [r4, #44]	; 0x2c
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = (st.exec_block->step_event_count >> 1);
 8007260:	0840      	lsrs	r0, r0, #1
 8007262:	e9c4 0002 	strd	r0, r0, [r4, #8]
 8007266:	e9c4 0000 	strd	r0, r0, [r4]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 800726a:	440a      	add	r2, r1
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 800726c:	4920      	ldr	r1, [pc, #128]	; (80072f0 <TIM2_IRQHandler+0x234>)
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 800726e:	681f      	ldr	r7, [r3, #0]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 8007270:	8808      	ldrh	r0, [r1, #0]
 8007272:	8a99      	ldrh	r1, [r3, #20]
 8007274:	4041      	eors	r1, r0
 8007276:	82e1      	strh	r1, [r4, #22]
        spindle_set_speed(st.exec_segment->spindle_pwm);
 8007278:	88d0      	ldrh	r0, [r2, #6]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 800727a:	7951      	ldrb	r1, [r2, #5]
        st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 800727c:	685a      	ldr	r2, [r3, #4]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 800727e:	40cf      	lsrs	r7, r1
        st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 8007280:	40ca      	lsrs	r2, r1
 8007282:	61e2      	str	r2, [r4, #28]
		st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
 8007284:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 8007288:	40ca      	lsrs	r2, r1
		st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
 800728a:	fa23 f101 	lsr.w	r1, r3, r1
 800728e:	e9c4 2108 	strd	r2, r1, [r4, #32]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 8007292:	61a7      	str	r7, [r4, #24]
        spindle_set_speed(st.exec_segment->spindle_pwm);
 8007294:	f7ff fcf8 	bl	8006c88 <spindle_set_speed>
 8007298:	e743      	b.n	8007122 <TIM2_IRQHandler+0x66>
  if (sys_probe_state == PROBE_ACTIVE) { probe_state_monitor(); }
 800729a:	f7fd fde5 	bl	8004e68 <probe_state_monitor>
 800729e:	e745      	b.n	800712c <TIM2_IRQHandler+0x70>
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80072a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80072a2:	e7e2      	b.n	800726a <TIM2_IRQHandler+0x1ae>
      st_go_idle();
 80072a4:	f7ff feca 	bl	800703c <st_go_idle>
      if (st.exec_block->is_pwm_rate_adjusted) { spindle_set_speed(SPINDLE_PWM_OFF_VALUE); }
 80072a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80072aa:	7d9b      	ldrb	r3, [r3, #22]
 80072ac:	b923      	cbnz	r3, 80072b8 <TIM2_IRQHandler+0x1fc>
}
 80072ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      system_set_exec_state_flag(EXEC_CYCLE_STOP); // Flag main program for cycle end
 80072b2:	2004      	movs	r0, #4
 80072b4:	f001 b960 	b.w	8008578 <system_set_exec_state_flag>
      if (st.exec_block->is_pwm_rate_adjusted) { spindle_set_speed(SPINDLE_PWM_OFF_VALUE); }
 80072b8:	4638      	mov	r0, r7
 80072ba:	f7ff fce5 	bl	8006c88 <spindle_set_speed>
 80072be:	e7f6      	b.n	80072ae <TIM2_IRQHandler+0x1f2>
 80072c0:	2000145c 	.word	0x2000145c
 80072c4:	40010800 	.word	0x40010800
 80072c8:	200014f0 	.word	0x200014f0
 80072cc:	40000400 	.word	0x40000400
 80072d0:	20000a04 	.word	0x20000a04
 80072d4:	200009e4 	.word	0x200009e4
 80072d8:	200009d0 	.word	0x200009d0
 80072dc:	200014ed 	.word	0x200014ed
 80072e0:	20001600 	.word	0x20001600
 80072e4:	200014ec 	.word	0x200014ec
 80072e8:	2000149c 	.word	0x2000149c
 80072ec:	20001524 	.word	0x20001524
 80072f0:	2000145e 	.word	0x2000145e

080072f4 <TIM3_IRQHandler>:
	} else
#endif
	{
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
		TIM3->CR1 &= ~TIM_CR1_CEN;
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
 80072f4:	f64f 7cfc 	movw	ip, #65532	; 0xfffc
		TIM3->CNT = 0;
 80072f8:	2000      	movs	r0, #0
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 80072fa:	490a      	ldr	r1, [pc, #40]	; (8007324 <TIM3_IRQHandler+0x30>)
 80072fc:	4b0a      	ldr	r3, [pc, #40]	; (8007328 <TIM3_IRQHandler+0x34>)
 80072fe:	68ca      	ldr	r2, [r1, #12]
 8007300:	881b      	ldrh	r3, [r3, #0]
 8007302:	f022 020f 	bic.w	r2, r2, #15
 8007306:	f003 030f 	and.w	r3, r3, #15
 800730a:	4313      	orrs	r3, r2
		TIM3->CR1 &= ~TIM_CR1_CEN;
 800730c:	4a07      	ldr	r2, [pc, #28]	; (800732c <TIM3_IRQHandler+0x38>)
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 800730e:	60cb      	str	r3, [r1, #12]
		TIM3->CR1 &= ~TIM_CR1_CEN;
 8007310:	8813      	ldrh	r3, [r2, #0]
 8007312:	f023 0301 	bic.w	r3, r3, #1
 8007316:	041b      	lsls	r3, r3, #16
 8007318:	0c1b      	lsrs	r3, r3, #16
 800731a:	8013      	strh	r3, [r2, #0]
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
 800731c:	f8a2 c010 	strh.w	ip, [r2, #16]
		TIM3->CNT = 0;
 8007320:	8490      	strh	r0, [r2, #36]	; 0x24
  TCCR0B = 0; // Disable Timer0 to prevent re-entering this interrupt when it's not needed.
#endif
#ifdef WIN32
  nTimer0Out = 0;
#endif
}
 8007322:	4770      	bx	lr
 8007324:	40010800 	.word	0x40010800
 8007328:	20001600 	.word	0x20001600
 800732c:	40000400 	.word	0x40000400

08007330 <st_generate_step_dir_invert_masks>:
{
  uint8_t idx;
  step_port_invert_mask = 0;
  dir_port_invert_mask = 0;
  for (idx=0; idx<N_AXIS; idx++) {
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8007330:	4b17      	ldr	r3, [pc, #92]	; (8007390 <st_generate_step_dir_invert_masks+0x60>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8007332:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8007336:	f8b3 0042 	ldrh.w	r0, [r3, #66]	; 0x42
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 800733a:	f012 0301 	ands.w	r3, r2, #1
 800733e:	bf18      	it	ne
 8007340:	2310      	movne	r3, #16
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8007342:	f000 0101 	and.w	r1, r0, #1
 8007346:	f010 0f02 	tst.w	r0, #2
 800734a:	bf18      	it	ne
 800734c:	f041 0102 	orrne.w	r1, r1, #2
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8007350:	f012 0f02 	tst.w	r2, #2
 8007354:	bf1c      	itt	ne
 8007356:	f043 0320 	orrne.w	r3, r3, #32
 800735a:	b29b      	uxthne	r3, r3
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 800735c:	f010 0f04 	tst.w	r0, #4
 8007360:	bf18      	it	ne
 8007362:	f041 0104 	orrne.w	r1, r1, #4
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8007366:	f012 0f04 	tst.w	r2, #4
 800736a:	bf1c      	itt	ne
 800736c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8007370:	b29b      	uxthne	r3, r3
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8007372:	0700      	lsls	r0, r0, #28
 8007374:	bf48      	it	mi
 8007376:	f041 0108 	orrmi.w	r1, r1, #8
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 800737a:	0712      	lsls	r2, r2, #28
 800737c:	bf48      	it	mi
 800737e:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8007382:	4804      	ldr	r0, [pc, #16]	; (8007394 <st_generate_step_dir_invert_masks+0x64>)
 8007384:	4a04      	ldr	r2, [pc, #16]	; (8007398 <st_generate_step_dir_invert_masks+0x68>)
 8007386:	bf48      	it	mi
 8007388:	b29b      	uxthmi	r3, r3
  for (idx=0; idx<N_AXIS; idx++) {
 800738a:	8001      	strh	r1, [r0, #0]
 800738c:	8013      	strh	r3, [r2, #0]
  }
}
 800738e:	4770      	bx	lr
 8007390:	200013ec 	.word	0x200013ec
 8007394:	20001600 	.word	0x20001600
 8007398:	2000145e 	.word	0x2000145e

0800739c <st_reset>:


// Reset and clear stepper subsystem variables
void st_reset()
{
 800739c:	b570      	push	{r4, r5, r6, lr}
  // Initialize stepper driver idle state.
  st_go_idle();
 800739e:	f7ff fe4d 	bl	800703c <st_go_idle>
  // Initialize stepper algorithm variables.
  memset(&prep, 0, sizeof(st_prep_t));
 80073a2:	2238      	movs	r2, #56	; 0x38
 80073a4:	2100      	movs	r1, #0
 80073a6:	482b      	ldr	r0, [pc, #172]	; (8007454 <st_reset+0xb8>)
 80073a8:	f002 fbb8 	bl	8009b1c <memset>
  memset(&st, 0, sizeof(stepper_t));
 80073ac:	2234      	movs	r2, #52	; 0x34
 80073ae:	2100      	movs	r1, #0
 80073b0:	4829      	ldr	r0, [pc, #164]	; (8007458 <st_reset+0xbc>)
 80073b2:	f002 fbb3 	bl	8009b1c <memset>
  st.exec_segment = NULL;
  pl_block = NULL;  // Planner block pointer used by segment buffer
 80073b6:	2000      	movs	r0, #0
  segment_buffer_tail = 0;
  segment_buffer_head = 0; // empty = tail
  segment_next_head = 1;
 80073b8:	2401      	movs	r4, #1
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80073ba:	4a28      	ldr	r2, [pc, #160]	; (800745c <st_reset+0xc0>)
  pl_block = NULL;  // Planner block pointer used by segment buffer
 80073bc:	4d28      	ldr	r5, [pc, #160]	; (8007460 <st_reset+0xc4>)
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80073be:	f8b2 1042 	ldrh.w	r1, [r2, #66]	; 0x42
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80073c2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
  segment_buffer_head = 0; // empty = tail
 80073c6:	4a27      	ldr	r2, [pc, #156]	; (8007464 <st_reset+0xc8>)
  segment_buffer_tail = 0;
 80073c8:	4e27      	ldr	r6, [pc, #156]	; (8007468 <st_reset+0xcc>)
  segment_buffer_head = 0; // empty = tail
 80073ca:	7010      	strb	r0, [r2, #0]
  segment_next_head = 1;
 80073cc:	4a27      	ldr	r2, [pc, #156]	; (800746c <st_reset+0xd0>)
  segment_buffer_tail = 0;
 80073ce:	7030      	strb	r0, [r6, #0]
  segment_next_head = 1;
 80073d0:	7014      	strb	r4, [r2, #0]
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80073d2:	f013 0201 	ands.w	r2, r3, #1
 80073d6:	bf18      	it	ne
 80073d8:	2210      	movne	r2, #16
  busy = false;
 80073da:	4c25      	ldr	r4, [pc, #148]	; (8007470 <st_reset+0xd4>)
  pl_block = NULL;  // Planner block pointer used by segment buffer
 80073dc:	6028      	str	r0, [r5, #0]
  busy = false;
 80073de:	7020      	strb	r0, [r4, #0]
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80073e0:	078d      	lsls	r5, r1, #30
 80073e2:	f001 0001 	and.w	r0, r1, #1
 80073e6:	bf48      	it	mi
 80073e8:	f040 0002 	orrmi.w	r0, r0, #2
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80073ec:	079c      	lsls	r4, r3, #30
 80073ee:	bf44      	itt	mi
 80073f0:	f042 0220 	orrmi.w	r2, r2, #32
 80073f4:	b292      	uxthmi	r2, r2
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80073f6:	074e      	lsls	r6, r1, #29
 80073f8:	bf48      	it	mi
 80073fa:	f040 0004 	orrmi.w	r0, r0, #4
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80073fe:	075d      	lsls	r5, r3, #29
 8007400:	bf44      	itt	mi
 8007402:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
 8007406:	b292      	uxthmi	r2, r2
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8007408:	070c      	lsls	r4, r1, #28
 800740a:	bf48      	it	mi
 800740c:	f040 0008 	orrmi.w	r0, r0, #8
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8007410:	0719      	lsls	r1, r3, #28
 8007412:	bf48      	it	mi
 8007414:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 8007418:	4916      	ldr	r1, [pc, #88]	; (8007474 <st_reset+0xd8>)
 800741a:	bf48      	it	mi
 800741c:	b292      	uxthmi	r2, r2
  for (idx=0; idx<N_AXIS; idx++) {
 800741e:	4c16      	ldr	r4, [pc, #88]	; (8007478 <st_reset+0xdc>)

  st_generate_step_dir_invert_masks();
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 8007420:	4b0d      	ldr	r3, [pc, #52]	; (8007458 <st_reset+0xbc>)
 8007422:	800a      	strh	r2, [r1, #0]
#ifdef AVRTARGET
  STEP_PORT = (STEP_PORT & ~STEP_MASK) | step_port_invert_mask;
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | dir_port_invert_mask;
#endif
#ifdef STM32F103C8
  while(TIM3->CR1 & TIM_CR1_CEN); // wait for end of tim3 work to prevent cutoff last step pulse
 8007424:	4915      	ldr	r1, [pc, #84]	; (800747c <st_reset+0xe0>)
 8007426:	8020      	strh	r0, [r4, #0]
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 8007428:	82da      	strh	r2, [r3, #22]
  while(TIM3->CR1 & TIM_CR1_CEN); // wait for end of tim3 work to prevent cutoff last step pulse
 800742a:	880b      	ldrh	r3, [r1, #0]
 800742c:	07db      	lsls	r3, r3, #31
 800742e:	d4fc      	bmi.n	800742a <st_reset+0x8e>
//#ifdef STEP_PULSE_DELAY
//	TIM3->DIER &= ~TIM_DIER_CC1IE; //compare interrupt disable
//#endif
  TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF and CC1IF flags
 8007430:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8007434:	4c12      	ldr	r4, [pc, #72]	; (8007480 <st_reset+0xe4>)
  TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF and CC1IF flags
 8007436:	820b      	strh	r3, [r1, #16]
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8007438:	68e3      	ldr	r3, [r4, #12]
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
 800743a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 800743e:	f023 030f 	bic.w	r3, r3, #15
 8007442:	4303      	orrs	r3, r0
 8007444:	60e3      	str	r3, [r4, #12]
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
 8007446:	68e3      	ldr	r3, [r4, #12]
 8007448:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800744c:	431a      	orrs	r2, r3
 800744e:	60e2      	str	r2, [r4, #12]
  //GPIO_Write(DIRECTION_PORT, (GPIO_ReadOutputData(DIRECTION_PORT) & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
//#ifdef STEP_PULSE_DELAY
//	TIM3->DIER |= TIM_DIER_CC1IE; //compare interrupt enable
//#endif
#endif
}
 8007450:	bd70      	pop	{r4, r5, r6, pc}
 8007452:	bf00      	nop
 8007454:	20001464 	.word	0x20001464
 8007458:	200014f0 	.word	0x200014f0
 800745c:	200013ec 	.word	0x200013ec
 8007460:	20001460 	.word	0x20001460
 8007464:	200014ec 	.word	0x200014ec
 8007468:	200014ed 	.word	0x200014ed
 800746c:	200014ee 	.word	0x200014ee
 8007470:	2000145c 	.word	0x2000145c
 8007474:	2000145e 	.word	0x2000145e
 8007478:	20001600 	.word	0x20001600
 800747c:	40000400 	.word	0x40000400
 8007480:	40010800 	.word	0x40010800

08007484 <stepper_init>:

#endif

// Initialize and start the stepper motor subsystem
void stepper_init()
{
 8007484:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Configure step and direction interface pins
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_STEPPERS_DISABLE_PORT, ENABLE);
 8007486:	2101      	movs	r1, #1
{
 8007488:	b087      	sub	sp, #28
	RCC_APB2PeriphClockCmd(RCC_STEPPERS_DISABLE_PORT, ENABLE);
 800748a:	2004      	movs	r0, #4
 800748c:	f7f9 ff8a 	bl	80013a4 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007490:	f241 0203 	movw	r2, #4099	; 0x1003
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 8007494:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 8007498:	4f4e      	ldr	r7, [pc, #312]	; (80075d4 <stepper_init+0x150>)
 800749a:	a901      	add	r1, sp, #4
 800749c:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800749e:	f8ad 2006 	strh.w	r2, [sp, #6]
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 80074a2:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 80074a6:	f7f9 fd83 	bl	8000fb0 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_STEP_PORT, ENABLE);
 80074aa:	2101      	movs	r1, #1
 80074ac:	2004      	movs	r0, #4
 80074ae:	f7f9 ff79 	bl	80013a4 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = STEP_MASK;
 80074b2:	230f      	movs	r3, #15
	GPIO_Init(STEP_PORT, &GPIO_InitStructure);
 80074b4:	4638      	mov	r0, r7
 80074b6:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin = STEP_MASK;
 80074b8:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_Init(STEP_PORT, &GPIO_InitStructure);
 80074bc:	f7f9 fd78 	bl	8000fb0 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_DIRECTION_PORT, ENABLE);
 80074c0:	2101      	movs	r1, #1
 80074c2:	2004      	movs	r0, #4
 80074c4:	f7f9 ff6e 	bl	80013a4 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = DIRECTION_MASK;
 80074c8:	23f0      	movs	r3, #240	; 0xf0
{
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	TIM_TimeBaseStructure.TIM_Period = Period - 1;
	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
 80074ca:	2500      	movs	r5, #0
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 80074cc:	4e42      	ldr	r6, [pc, #264]	; (80075d8 <stepper_init+0x154>)
	GPIO_Init(DIRECTION_PORT, &GPIO_InitStructure);
 80074ce:	4638      	mov	r0, r7
 80074d0:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin = DIRECTION_MASK;
 80074d2:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_Init(DIRECTION_PORT, &GPIO_InitStructure);
 80074d6:	f7f9 fd6b 	bl	8000fb0 <GPIO_Init>
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 80074da:	69f3      	ldr	r3, [r6, #28]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 80074dc:	a903      	add	r1, sp, #12
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 80074de:	f043 0301 	orr.w	r3, r3, #1
 80074e2:	61f3      	str	r3, [r6, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 80074e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
 80074e8:	e9cd 5503 	strd	r5, r5, [sp, #12]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 80074ec:	f7f9 ff72 	bl	80013d4 <TIM_TimeBaseInit>

	TIM_ClearITPendingBit(TIMER, TIM_IT_Update);
 80074f0:	2101      	movs	r1, #1
 80074f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80074f6:	f7fa f849 	bl	800158c <TIM_ClearITPendingBit>
	TIM_ITConfig(TIMER, TIM_IT_Update, ENABLE);
 80074fa:	2201      	movs	r2, #1
 80074fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007500:	4611      	mov	r1, r2
 8007502:	f7fa f831 	bl	8001568 <TIM_ITConfig>
	TIM_Cmd(TIMER, ENABLE);
 8007506:	2101      	movs	r1, #1
 8007508:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800750c:	f7fa f80e 	bl	800152c <TIM_Cmd>

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8007510:	f44f 7040 	mov.w	r0, #768	; 0x300
 8007514:	f7f9 fbe0 	bl	8000cd8 <NVIC_PriorityGroupConfig>
	if (TIMER == TIM2) { NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn; }
 8007518:	4b30      	ldr	r3, [pc, #192]	; (80075dc <stepper_init+0x158>)
	else if (TIMER == TIM4) { NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn; }

	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = PP;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800751a:	a802      	add	r0, sp, #8
	if (TIMER == TIM2) { NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn; }
 800751c:	9302      	str	r3, [sp, #8]
	NVIC_Init(&NVIC_InitStructure);
 800751e:	f7f9 fbe5 	bl	8000cec <NVIC_Init>
	RCC->APB1ENR |= RCC_APB1Periph_TIM3;
 8007522:	69f3      	ldr	r3, [r6, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8007524:	4c2e      	ldr	r4, [pc, #184]	; (80075e0 <stepper_init+0x15c>)
	RCC->APB1ENR |= RCC_APB1Periph_TIM3;
 8007526:	f043 0302 	orr.w	r3, r3, #2
 800752a:	61f3      	str	r3, [r6, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 800752c:	4620      	mov	r0, r4
 800752e:	a903      	add	r1, sp, #12
	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
 8007530:	e9cd 5503 	strd	r5, r5, [sp, #12]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8007534:	f7f9 ff4e 	bl	80013d4 <TIM_TimeBaseInit>
	TIM_ClearITPendingBit(TIMER, TIM_IT_Update);
 8007538:	4620      	mov	r0, r4
 800753a:	2101      	movs	r1, #1
 800753c:	f7fa f826 	bl	800158c <TIM_ClearITPendingBit>
	TIM_ITConfig(TIMER, TIM_IT_Update, ENABLE);
 8007540:	2201      	movs	r2, #1
 8007542:	4620      	mov	r0, r4
 8007544:	4611      	mov	r1, r2
 8007546:	f7fa f80f 	bl	8001568 <TIM_ITConfig>
	TIM_Cmd(TIMER, ENABLE);
 800754a:	2101      	movs	r1, #1
 800754c:	4620      	mov	r0, r4
 800754e:	f7f9 ffed 	bl	800152c <TIM_Cmd>
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8007552:	f44f 7040 	mov.w	r0, #768	; 0x300
 8007556:	f7f9 fbbf 	bl	8000cd8 <NVIC_PriorityGroupConfig>
	else if (TIMER == TIM3) { NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn; }
 800755a:	4b22      	ldr	r3, [pc, #136]	; (80075e4 <stepper_init+0x160>)
	NVIC_Init(&NVIC_InitStructure);
 800755c:	a802      	add	r0, sp, #8
	else if (TIMER == TIM3) { NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn; }
 800755e:	9302      	str	r3, [sp, #8]
	NVIC_Init(&NVIC_InitStructure);
 8007560:	f7f9 fbc4 	bl	8000cec <NVIC_Init>
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8007564:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8007568:	f04f 0c10 	mov.w	ip, #16
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800756c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8007570:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8007574:	f8be 3000 	ldrh.w	r3, [lr]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8007578:	4a1b      	ldr	r2, [pc, #108]	; (80075e8 <stepper_init+0x164>)
 800757a:	f023 0301 	bic.w	r3, r3, #1
 800757e:	fa03 f30c 	lsl.w	r3, r3, ip
 8007582:	fa23 f30c 	lsr.w	r3, r3, ip
 8007586:	f8ae 3000 	strh.w	r3, [lr]
	TIM2->SR &= ~TIM_SR_UIF;
 800758a:	f8be 3010 	ldrh.w	r3, [lr, #16]
 800758e:	f023 0301 	bic.w	r3, r3, #1
 8007592:	fa03 f30c 	lsl.w	r3, r3, ip
 8007596:	fa23 f30c 	lsr.w	r3, r3, ip
 800759a:	f8ae 3010 	strh.w	r3, [lr, #16]
	TIM2->CNT = 0;
 800759e:	f8ae 5024 	strh.w	r5, [lr, #36]	; 0x24
	TIM3->CR1 &= ~TIM_CR1_CEN;
 80075a2:	8823      	ldrh	r3, [r4, #0]
 80075a4:	f023 0301 	bic.w	r3, r3, #1
 80075a8:	fa03 f30c 	lsl.w	r3, r3, ip
 80075ac:	fa23 f30c 	lsr.w	r3, r3, ip
 80075b0:	8023      	strh	r3, [r4, #0]
	TIM3->SR &= ~(TIM_SR_UIF | TIM_SR_CC1IF);
 80075b2:	8a23      	ldrh	r3, [r4, #16]
 80075b4:	f023 0303 	bic.w	r3, r3, #3
 80075b8:	fa03 f30c 	lsl.w	r3, r3, ip
 80075bc:	fa23 f30c 	lsr.w	r3, r3, ip
 80075c0:	8223      	strh	r3, [r4, #16]
	TIM3->CNT = 0;
 80075c2:	84a5      	strh	r5, [r4, #36]	; 0x24
 80075c4:	f882 531d 	strb.w	r5, [r2, #797]	; 0x31d
 80075c8:	f882 c31c 	strb.w	ip, [r2, #796]	; 0x31c
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80075cc:	6010      	str	r0, [r2, #0]
 80075ce:	6011      	str	r1, [r2, #0]
}
 80075d0:	b007      	add	sp, #28
 80075d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075d4:	40010800 	.word	0x40010800
 80075d8:	40021000 	.word	0x40021000
 80075dc:	0101011c 	.word	0x0101011c
 80075e0:	40000400 	.word	0x40000400
 80075e4:	0101011d 	.word	0x0101011d
 80075e8:	e000e100 	.word	0xe000e100

080075ec <st_update_plan_block_parameters>:
{
 80075ec:	b538      	push	{r3, r4, r5, lr}
  if (pl_block != NULL) { // Ignore if at start of a new block.
 80075ee:	4c08      	ldr	r4, [pc, #32]	; (8007610 <st_update_plan_block_parameters+0x24>)
 80075f0:	6825      	ldr	r5, [r4, #0]
 80075f2:	b15d      	cbz	r5, 800760c <st_update_plan_block_parameters+0x20>
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 80075f4:	4b07      	ldr	r3, [pc, #28]	; (8007614 <st_update_plan_block_parameters+0x28>)
 80075f6:	785a      	ldrb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 80075f8:	69d9      	ldr	r1, [r3, #28]
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 80075fa:	f042 0201 	orr.w	r2, r2, #1
 80075fe:	705a      	strb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8007600:	4608      	mov	r0, r1
 8007602:	f7f9 f947 	bl	8000894 <__aeabi_fmul>
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 8007606:	2300      	movs	r3, #0
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8007608:	61a8      	str	r0, [r5, #24]
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 800760a:	6023      	str	r3, [r4, #0]
}
 800760c:	bd38      	pop	{r3, r4, r5, pc}
 800760e:	bf00      	nop
 8007610:	20001460 	.word	0x20001460
 8007614:	20001464 	.word	0x20001464

08007618 <st_prep_buffer>:
  if (bit_istrue(sys.step_control,STEP_CONTROL_END_MOTION)) { return; }
 8007618:	4b30      	ldr	r3, [pc, #192]	; (80076dc <st_prep_buffer+0xc4>)
 800761a:	791b      	ldrb	r3, [r3, #4]
 800761c:	07d9      	lsls	r1, r3, #31
 800761e:	f100 8494 	bmi.w	8007f4a <st_prep_buffer+0x932>
{
 8007622:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007626:	b08f      	sub	sp, #60	; 0x3c
  while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 8007628:	4b2d      	ldr	r3, [pc, #180]	; (80076e0 <st_prep_buffer+0xc8>)
 800762a:	781f      	ldrb	r7, [r3, #0]
 800762c:	4b2d      	ldr	r3, [pc, #180]	; (80076e4 <st_prep_buffer+0xcc>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	42bb      	cmp	r3, r7
 8007632:	f000 824b 	beq.w	8007acc <st_prep_buffer+0x4b4>
    if (pl_block == NULL) {
 8007636:	4b2c      	ldr	r3, [pc, #176]	; (80076e8 <st_prep_buffer+0xd0>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	f000 8248 	beq.w	8007ad2 <st_prep_buffer+0x4ba>
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8007642:	4a2a      	ldr	r2, [pc, #168]	; (80076ec <st_prep_buffer+0xd4>)
    float mm_remaining = pl_block->millimeters; // New segment distance from end of block.
 8007644:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8007648:	6a11      	ldr	r1, [r2, #32]
						mm_remaining = prep.accelerate_until;
 800764a:	6a93      	ldr	r3, [r2, #40]	; 0x28
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 800764c:	9101      	str	r1, [sp, #4]
          if (mm_var < prep.decelerate_after) { // End of cruise.
 800764e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007650:	4650      	mov	r0, sl
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8007652:	9105      	str	r1, [sp, #20]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007654:	4619      	mov	r1, r3
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8007656:	4614      	mov	r4, r2
						mm_remaining = prep.accelerate_until;
 8007658:	9303      	str	r3, [sp, #12]
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 800765a:	9202      	str	r2, [sp, #8]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 800765c:	f7f9 f810 	bl	8000680 <__aeabi_fsub>
 8007660:	4606      	mov	r6, r0
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8007662:	6a63      	ldr	r3, [r4, #36]	; 0x24
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8007664:	f8d4 8018 	ldr.w	r8, [r4, #24]
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8007668:	9308      	str	r3, [sp, #32]
 800766a:	4b21      	ldr	r3, [pc, #132]	; (80076f0 <st_prep_buffer+0xd8>)
 800766c:	7d25      	ldrb	r5, [r4, #20]
 800766e:	930d      	str	r3, [sp, #52]	; 0x34
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 8007670:	4b20      	ldr	r3, [pc, #128]	; (80076f4 <st_prep_buffer+0xdc>)
    prep_segment->st_block_index = prep.st_block_index;
 8007672:	9902      	ldr	r1, [sp, #8]
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 8007674:	781b      	ldrb	r3, [r3, #0]
    prep_segment->st_block_index = prep.st_block_index;
 8007676:	4f20      	ldr	r7, [pc, #128]	; (80076f8 <st_prep_buffer+0xe0>)
 8007678:	780a      	ldrb	r2, [r1, #0]
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 800767a:	461c      	mov	r4, r3
 800767c:	930b      	str	r3, [sp, #44]	; 0x2c
    prep_segment->st_block_index = prep.st_block_index;
 800767e:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
    float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 8007682:	6909      	ldr	r1, [r1, #16]
    prep_segment->st_block_index = prep.st_block_index;
 8007684:	711a      	strb	r2, [r3, #4]
    float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 8007686:	4650      	mov	r0, sl
 8007688:	f7f8 fffa 	bl	8000680 <__aeabi_fsub>
    prep_segment->st_block_index = prep.st_block_index;
 800768c:	00e3      	lsls	r3, r4, #3
 800768e:	2100      	movs	r1, #0
 8007690:	9307      	str	r3, [sp, #28]
    float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 8007692:	9004      	str	r0, [sp, #16]
    if (minimum_mm < 0.0f) { minimum_mm = 0.0f; }
 8007694:	f7f9 fab0 	bl	8000bf8 <__aeabi_fcmpge>
 8007698:	b908      	cbnz	r0, 800769e <st_prep_buffer+0x86>
 800769a:	2300      	movs	r3, #0
 800769c:	9304      	str	r3, [sp, #16]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 800769e:	4631      	mov	r1, r6
 80076a0:	4630      	mov	r0, r6
 80076a2:	f7f8 ffef 	bl	8000684 <__addsf3>
 80076a6:	4603      	mov	r3, r0
 80076a8:	9901      	ldr	r1, [sp, #4]
 80076aa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80076ae:	9306      	str	r3, [sp, #24]
 80076b0:	f7f9 f9a4 	bl	80009fc <__aeabi_fdiv>
 80076b4:	4603      	mov	r3, r0
 80076b6:	9a02      	ldr	r2, [sp, #8]
 80076b8:	9903      	ldr	r1, [sp, #12]
 80076ba:	9805      	ldr	r0, [sp, #20]
 80076bc:	69d7      	ldr	r7, [r2, #28]
 80076be:	9309      	str	r3, [sp, #36]	; 0x24
 80076c0:	f7f9 fa7c 	bl	8000bbc <__aeabi_fcmpeq>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	f000 81b9 	beq.w	8007a3c <st_prep_buffer+0x424>
 80076ca:	f04f 0302 	mov.w	r3, #2
 80076ce:	f8df b02c 	ldr.w	fp, [pc, #44]	; 80076fc <st_prep_buffer+0xe4>
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2400      	movs	r4, #0
 80076d6:	465e      	mov	r6, fp
 80076d8:	930a      	str	r3, [sp, #40]	; 0x28
 80076da:	e01c      	b.n	8007716 <st_prep_buffer+0xfe>
 80076dc:	200009d0 	.word	0x200009d0
 80076e0:	200014ee 	.word	0x200014ee
 80076e4:	200014ed 	.word	0x200014ed
 80076e8:	20001460 	.word	0x20001460
 80076ec:	20001464 	.word	0x20001464
 80076f0:	200015fc 	.word	0x200015fc
 80076f4:	200014ec 	.word	0x200014ec
 80076f8:	2000149c 	.word	0x2000149c
 80076fc:	392ec33e 	.word	0x392ec33e
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8007700:	4621      	mov	r1, r4
 8007702:	4630      	mov	r0, r6
 8007704:	f7f8 ffbc 	bl	8000680 <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8007708:	4641      	mov	r1, r8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 800770a:	4683      	mov	fp, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 800770c:	4650      	mov	r0, sl
 800770e:	f7f9 fa7d 	bl	8000c0c <__aeabi_fcmpgt>
 8007712:	2800      	cmp	r0, #0
 8007714:	d050      	beq.n	80077b8 <st_prep_buffer+0x1a0>
      switch (prep.ramp_type) {
 8007716:	2d01      	cmp	r5, #1
 8007718:	f000 8130 	beq.w	800797c <st_prep_buffer+0x364>
 800771c:	2d03      	cmp	r5, #3
 800771e:	f000 8110 	beq.w	8007942 <st_prep_buffer+0x32a>
 8007722:	2d00      	cmp	r5, #0
 8007724:	f000 80e5 	beq.w	80078f2 <st_prep_buffer+0x2da>
          speed_var = pl_block->acceleration*time_var; // Used as delta speed (mm/min)
 8007728:	9b00      	ldr	r3, [sp, #0]
 800772a:	4658      	mov	r0, fp
 800772c:	6a19      	ldr	r1, [r3, #32]
 800772e:	f7f9 f8b1 	bl	8000894 <__aeabi_fmul>
 8007732:	4681      	mov	r9, r0
          if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 8007734:	4638      	mov	r0, r7
 8007736:	4649      	mov	r1, r9
 8007738:	f7f9 fa68 	bl	8000c0c <__aeabi_fcmpgt>
 800773c:	2800      	cmp	r0, #0
 800773e:	f000 8136 	beq.w	80079ae <st_prep_buffer+0x396>
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 8007742:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007746:	4648      	mov	r0, r9
 8007748:	f7f9 f8a4 	bl	8000894 <__aeabi_fmul>
 800774c:	4639      	mov	r1, r7
 800774e:	f7f8 ff97 	bl	8000680 <__aeabi_fsub>
 8007752:	4659      	mov	r1, fp
 8007754:	f7f9 f89e 	bl	8000894 <__aeabi_fmul>
 8007758:	4651      	mov	r1, sl
 800775a:	f7f8 ff93 	bl	8000684 <__addsf3>
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 800775e:	4641      	mov	r1, r8
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 8007760:	900c      	str	r0, [sp, #48]	; 0x30
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8007762:	f7f9 fa53 	bl	8000c0c <__aeabi_fcmpgt>
 8007766:	2800      	cmp	r0, #0
 8007768:	f000 8121 	beq.w	80079ae <st_prep_buffer+0x396>
              prep.current_speed -= speed_var;
 800776c:	4638      	mov	r0, r7
 800776e:	4649      	mov	r1, r9
 8007770:	f7f8 ff86 	bl	8000680 <__aeabi_fsub>
 8007774:	4607      	mov	r7, r0
              mm_remaining = mm_var;
 8007776:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
      dt += time_var; // Add computed ramp time to total segment time.
 800777a:	4659      	mov	r1, fp
 800777c:	4620      	mov	r0, r4
 800777e:	f7f8 ff81 	bl	8000684 <__addsf3>
 8007782:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8007784:	4630      	mov	r0, r6
 8007786:	4621      	mov	r1, r4
 8007788:	f7f9 fa40 	bl	8000c0c <__aeabi_fcmpgt>
 800778c:	2800      	cmp	r0, #0
 800778e:	d1b7      	bne.n	8007700 <st_prep_buffer+0xe8>
        if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 8007790:	4651      	mov	r1, sl
 8007792:	9804      	ldr	r0, [sp, #16]
 8007794:	f7f9 fa1c 	bl	8000bd0 <__aeabi_fcmplt>
 8007798:	b170      	cbz	r0, 80077b8 <st_prep_buffer+0x1a0>
          dt_max += DT_SEGMENT;
 800779a:	4630      	mov	r0, r6
 800779c:	49a9      	ldr	r1, [pc, #676]	; (8007a44 <st_prep_buffer+0x42c>)
 800779e:	f7f8 ff71 	bl	8000684 <__addsf3>
          time_var = dt_max - dt;
 80077a2:	4621      	mov	r1, r4
          dt_max += DT_SEGMENT;
 80077a4:	4606      	mov	r6, r0
          time_var = dt_max - dt;
 80077a6:	f7f8 ff6b 	bl	8000680 <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80077aa:	4641      	mov	r1, r8
          time_var = dt_max - dt;
 80077ac:	4683      	mov	fp, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80077ae:	4650      	mov	r0, sl
 80077b0:	f7f9 fa2c 	bl	8000c0c <__aeabi_fcmpgt>
 80077b4:	2800      	cmp	r0, #0
 80077b6:	d1ae      	bne.n	8007716 <st_prep_buffer+0xfe>
      if (st_prep_block->is_pwm_rate_adjusted || (sys.step_control & STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 80077b8:	9b02      	ldr	r3, [sp, #8]
 80077ba:	751d      	strb	r5, [r3, #20]
 80077bc:	61df      	str	r7, [r3, #28]
 80077be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	7d9b      	ldrb	r3, [r3, #22]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f040 8124 	bne.w	8007a12 <st_prep_buffer+0x3fa>
 80077ca:	4b9f      	ldr	r3, [pc, #636]	; (8007a48 <st_prep_buffer+0x430>)
 80077cc:	f893 9004 	ldrb.w	r9, [r3, #4]
 80077d0:	f019 0f08 	tst.w	r9, #8
 80077d4:	f040 81d7 	bne.w	8007b86 <st_prep_buffer+0x56e>
      prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 80077d8:	9b02      	ldr	r3, [sp, #8]
 80077da:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80077dc:	9d07      	ldr	r5, [sp, #28]
 80077de:	4a9b      	ldr	r2, [pc, #620]	; (8007a4c <st_prep_buffer+0x434>)
    float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 80077e0:	9f02      	ldr	r7, [sp, #8]
      prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 80077e2:	442a      	add	r2, r5
 80077e4:	80d3      	strh	r3, [r2, #6]
    float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 80077e6:	68f9      	ldr	r1, [r7, #12]
 80077e8:	4650      	mov	r0, sl
 80077ea:	f7f9 f853 	bl	8000894 <__aeabi_fmul>
 80077ee:	4606      	mov	r6, r0
    float n_steps_remaining = ceilf(step_dist_remaining); // Round-up current steps remaining
 80077f0:	f002 fa04 	bl	8009bfc <ceilf>
 80077f4:	4605      	mov	r5, r0
    float last_n_steps_remaining = ceilf(prep.steps_remaining); // Round-up last steps remaining
 80077f6:	68b8      	ldr	r0, [r7, #8]
 80077f8:	f002 fa00 	bl	8009bfc <ceilf>
	prep_segment->n_step = (uint16_t)(last_n_steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 80077fc:	4629      	mov	r1, r5
    float last_n_steps_remaining = ceilf(prep.steps_remaining); // Round-up last steps remaining
 80077fe:	4607      	mov	r7, r0
	prep_segment->n_step = (uint16_t)(last_n_steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 8007800:	f7f8 ff3e 	bl	8000680 <__aeabi_fsub>
 8007804:	f7f9 fa48 	bl	8000c98 <__aeabi_f2uiz>
 8007808:	4a90      	ldr	r2, [pc, #576]	; (8007a4c <st_prep_buffer+0x434>)
 800780a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800780c:	fa1f f880 	uxth.w	r8, r0
 8007810:	f822 8033 	strh.w	r8, [r2, r3, lsl #3]
    if (prep_segment->n_step == 0) {
 8007814:	f1b8 0f00 	cmp.w	r8, #0
 8007818:	d103      	bne.n	8007822 <st_prep_buffer+0x20a>
      if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) {
 800781a:	f019 0f02 	tst.w	r9, #2
 800781e:	f040 83ca 	bne.w	8007fb6 <st_prep_buffer+0x99e>
    dt += prep.dt_remainder; // Apply previous segment partial step execute time
 8007822:	9b02      	ldr	r3, [sp, #8]
 8007824:	4620      	mov	r0, r4
 8007826:	6859      	ldr	r1, [r3, #4]
 8007828:	f7f8 ff2c 	bl	8000684 <__addsf3>
    float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 800782c:	4631      	mov	r1, r6
    dt += prep.dt_remainder; // Apply previous segment partial step execute time
 800782e:	4604      	mov	r4, r0
    float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 8007830:	4638      	mov	r0, r7
 8007832:	f7f8 ff25 	bl	8000680 <__aeabi_fsub>
 8007836:	4601      	mov	r1, r0
 8007838:	4620      	mov	r0, r4
 800783a:	f7f9 f8df 	bl	80009fc <__aeabi_fdiv>
 800783e:	4604      	mov	r4, r0
	uint32_t cycles = (uint32_t)ceilf((TICKS_PER_MICROSECOND * 1000000) *inv_rate * 60); // (cycles/step)
 8007840:	4b83      	ldr	r3, [pc, #524]	; (8007a50 <st_prep_buffer+0x438>)
 8007842:	4884      	ldr	r0, [pc, #528]	; (8007a54 <st_prep_buffer+0x43c>)
 8007844:	681f      	ldr	r7, [r3, #0]
 8007846:	4b84      	ldr	r3, [pc, #528]	; (8007a58 <st_prep_buffer+0x440>)
 8007848:	fba3 2307 	umull	r2, r3, r3, r7
 800784c:	0c9b      	lsrs	r3, r3, #18
 800784e:	fb03 f000 	mul.w	r0, r3, r0
 8007852:	f7f8 ffc7 	bl	80007e4 <__aeabi_ui2f>
 8007856:	4981      	ldr	r1, [pc, #516]	; (8007a5c <st_prep_buffer+0x444>)
 8007858:	f7f9 f81c 	bl	8000894 <__aeabi_fmul>
 800785c:	4621      	mov	r1, r4
 800785e:	f7f9 f819 	bl	8000894 <__aeabi_fmul>
 8007862:	f002 f9cb 	bl	8009bfc <ceilf>
 8007866:	f7f9 fa17 	bl	8000c98 <__aeabi_f2uiz>
      if (cycles < AMASS_LEVEL1) { prep_segment->amass_level = 0; }
 800786a:	4b7d      	ldr	r3, [pc, #500]	; (8007a60 <st_prep_buffer+0x448>)
 800786c:	fba3 3707 	umull	r3, r7, r3, r7
 8007870:	ebb0 2f57 	cmp.w	r0, r7, lsr #9
 8007874:	f080 80fc 	bcs.w	8007a70 <st_prep_buffer+0x458>
 8007878:	2200      	movs	r2, #0
 800787a:	4b74      	ldr	r3, [pc, #464]	; (8007a4c <st_prep_buffer+0x434>)
 800787c:	9907      	ldr	r1, [sp, #28]
 800787e:	440b      	add	r3, r1
 8007880:	715a      	strb	r2, [r3, #5]
      if (cycles < (1UL << 16)) { prep_segment->cycles_per_tick = cycles; } // < 65536 (4.1ms @ 16MHz)
 8007882:	4a72      	ldr	r2, [pc, #456]	; (8007a4c <st_prep_buffer+0x434>)
 8007884:	9b07      	ldr	r3, [sp, #28]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8007886:	4631      	mov	r1, r6
 8007888:	4413      	add	r3, r2
 800788a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800788e:	4290      	cmp	r0, r2
 8007890:	bf28      	it	cs
 8007892:	4610      	movcs	r0, r2
 8007894:	8058      	strh	r0, [r3, #2]
    segment_buffer_head = segment_next_head;
 8007896:	4b73      	ldr	r3, [pc, #460]	; (8007a64 <st_prep_buffer+0x44c>)
 8007898:	4a73      	ldr	r2, [pc, #460]	; (8007a68 <st_prep_buffer+0x450>)
 800789a:	781f      	ldrb	r7, [r3, #0]
 800789c:	7017      	strb	r7, [r2, #0]
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 800789e:	3701      	adds	r7, #1
 80078a0:	b2ff      	uxtb	r7, r7
 80078a2:	2f0a      	cmp	r7, #10
 80078a4:	f000 80f5 	beq.w	8007a92 <st_prep_buffer+0x47a>
 80078a8:	701f      	strb	r7, [r3, #0]
    pl_block->millimeters = mm_remaining;
 80078aa:	4b70      	ldr	r3, [pc, #448]	; (8007a6c <st_prep_buffer+0x454>)
    prep.steps_remaining = n_steps_remaining;
 80078ac:	9e02      	ldr	r6, [sp, #8]
    pl_block->millimeters = mm_remaining;
 80078ae:	681b      	ldr	r3, [r3, #0]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 80078b0:	4628      	mov	r0, r5
    pl_block->millimeters = mm_remaining;
 80078b2:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
    prep.steps_remaining = n_steps_remaining;
 80078b6:	60b5      	str	r5, [r6, #8]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 80078b8:	f7f8 fee2 	bl	8000680 <__aeabi_fsub>
 80078bc:	4621      	mov	r1, r4
 80078be:	f7f8 ffe9 	bl	8000894 <__aeabi_fmul>
    if (mm_remaining == prep.mm_complete) {
 80078c2:	4651      	mov	r1, sl
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 80078c4:	6070      	str	r0, [r6, #4]
    if (mm_remaining == prep.mm_complete) {
 80078c6:	69b0      	ldr	r0, [r6, #24]
 80078c8:	f7f9 f978 	bl	8000bbc <__aeabi_fcmpeq>
 80078cc:	2800      	cmp	r0, #0
 80078ce:	f43f aead 	beq.w	800762c <st_prep_buffer+0x14>
      if (mm_remaining > 0.0f) { // At end of forced-termination.
 80078d2:	4650      	mov	r0, sl
 80078d4:	2100      	movs	r1, #0
 80078d6:	f7f9 f999 	bl	8000c0c <__aeabi_fcmpgt>
 80078da:	2800      	cmp	r0, #0
 80078dc:	f040 836b 	bne.w	8007fb6 <st_prep_buffer+0x99e>
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 80078e0:	f019 0304 	ands.w	r3, r9, #4
 80078e4:	f040 8367 	bne.w	8007fb6 <st_prep_buffer+0x99e>
        pl_block = NULL; // Set pointer to indicate check and load next planner block.
 80078e8:	4a60      	ldr	r2, [pc, #384]	; (8007a6c <st_prep_buffer+0x454>)
 80078ea:	6013      	str	r3, [r2, #0]
        plan_discard_current_block();
 80078ec:	f7fc fba6 	bl	800403c <plan_discard_current_block>
 80078f0:	e69a      	b.n	8007628 <st_prep_buffer+0x10>
          speed_var = pl_block->acceleration*time_var;
 80078f2:	9b00      	ldr	r3, [sp, #0]
 80078f4:	4658      	mov	r0, fp
 80078f6:	6a19      	ldr	r1, [r3, #32]
 80078f8:	f7f8 ffcc 	bl	8000894 <__aeabi_fmul>
          mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 80078fc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
          speed_var = pl_block->acceleration*time_var;
 8007900:	4681      	mov	r9, r0
          mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 8007902:	f7f8 ffc7 	bl	8000894 <__aeabi_fmul>
 8007906:	4639      	mov	r1, r7
 8007908:	f7f8 febc 	bl	8000684 <__addsf3>
 800790c:	4659      	mov	r1, fp
 800790e:	f7f8 ffc1 	bl	8000894 <__aeabi_fmul>
 8007912:	4601      	mov	r1, r0
 8007914:	4650      	mov	r0, sl
 8007916:	f7f8 feb3 	bl	8000680 <__aeabi_fsub>
          if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 800791a:	9903      	ldr	r1, [sp, #12]
          mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 800791c:	4682      	mov	sl, r0
          if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 800791e:	f7f9 f957 	bl	8000bd0 <__aeabi_fcmplt>
 8007922:	2800      	cmp	r0, #0
 8007924:	d059      	beq.n	80079da <st_prep_buffer+0x3c2>
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007926:	4638      	mov	r0, r7
 8007928:	9f01      	ldr	r7, [sp, #4]
 800792a:	4639      	mov	r1, r7
 800792c:	f7f8 feaa 	bl	8000684 <__addsf3>
 8007930:	4601      	mov	r1, r0
 8007932:	9806      	ldr	r0, [sp, #24]
 8007934:	f7f9 f862 	bl	80009fc <__aeabi_fdiv>
 8007938:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800793a:	4683      	mov	fp, r0
            mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
 800793c:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8007940:	e71b      	b.n	800777a <st_prep_buffer+0x162>
          speed_var = pl_block->acceleration*time_var;
 8007942:	9b00      	ldr	r3, [sp, #0]
 8007944:	4658      	mov	r0, fp
 8007946:	6a19      	ldr	r1, [r3, #32]
 8007948:	f7f8 ffa4 	bl	8000894 <__aeabi_fmul>
 800794c:	4681      	mov	r9, r0
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 800794e:	9901      	ldr	r1, [sp, #4]
 8007950:	4638      	mov	r0, r7
 8007952:	f7f8 fe95 	bl	8000680 <__aeabi_fsub>
 8007956:	4649      	mov	r1, r9
 8007958:	f7f9 f944 	bl	8000be4 <__aeabi_fcmple>
 800795c:	2800      	cmp	r0, #0
 800795e:	d042      	beq.n	80079e6 <st_prep_buffer+0x3ce>
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007960:	4638      	mov	r0, r7
 8007962:	9f01      	ldr	r7, [sp, #4]
            prep.ramp_type = RAMP_CRUISE;
 8007964:	2501      	movs	r5, #1
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007966:	4639      	mov	r1, r7
 8007968:	f7f8 fe8c 	bl	8000684 <__addsf3>
 800796c:	4601      	mov	r1, r0
 800796e:	9806      	ldr	r0, [sp, #24]
 8007970:	f7f9 f844 	bl	80009fc <__aeabi_fdiv>
						mm_remaining = prep.accelerate_until;
 8007974:	f8dd a00c 	ldr.w	sl, [sp, #12]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007978:	4683      	mov	fp, r0
            prep.current_speed = prep.maximum_speed;
 800797a:	e6fe      	b.n	800777a <st_prep_buffer+0x162>
          mm_var = mm_remaining - prep.maximum_speed*time_var;
 800797c:	9901      	ldr	r1, [sp, #4]
 800797e:	4658      	mov	r0, fp
 8007980:	f7f8 ff88 	bl	8000894 <__aeabi_fmul>
 8007984:	4601      	mov	r1, r0
 8007986:	4650      	mov	r0, sl
 8007988:	f7f8 fe7a 	bl	8000680 <__aeabi_fsub>
          if (mm_var < prep.decelerate_after) { // End of cruise.
 800798c:	9905      	ldr	r1, [sp, #20]
          mm_var = mm_remaining - prep.maximum_speed*time_var;
 800798e:	4681      	mov	r9, r0
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8007990:	f7f9 f91e 	bl	8000bd0 <__aeabi_fcmplt>
 8007994:	b1f8      	cbz	r0, 80079d6 <st_prep_buffer+0x3be>
            time_var = (mm_remaining - prep.decelerate_after)/prep.maximum_speed;
 8007996:	4650      	mov	r0, sl
 8007998:	f8dd a014 	ldr.w	sl, [sp, #20]
            prep.ramp_type = RAMP_DECEL;
 800799c:	2502      	movs	r5, #2
            time_var = (mm_remaining - prep.decelerate_after)/prep.maximum_speed;
 800799e:	4651      	mov	r1, sl
 80079a0:	f7f8 fe6e 	bl	8000680 <__aeabi_fsub>
 80079a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079a6:	f7f8 ff75 	bl	8000894 <__aeabi_fmul>
 80079aa:	4683      	mov	fp, r0
            prep.ramp_type = RAMP_DECEL;
 80079ac:	e6e5      	b.n	800777a <st_prep_buffer+0x162>
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 80079ae:	4650      	mov	r0, sl
 80079b0:	4641      	mov	r1, r8
 80079b2:	f7f8 fe65 	bl	8000680 <__aeabi_fsub>
 80079b6:	4601      	mov	r1, r0
 80079b8:	f7f8 fe64 	bl	8000684 <__addsf3>
 80079bc:	9908      	ldr	r1, [sp, #32]
 80079be:	4681      	mov	r9, r0
 80079c0:	4638      	mov	r0, r7
          prep.current_speed = prep.exit_speed;
 80079c2:	460f      	mov	r7, r1
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 80079c4:	f7f8 fe5e 	bl	8000684 <__addsf3>
 80079c8:	4601      	mov	r1, r0
 80079ca:	4648      	mov	r0, r9
 80079cc:	f7f9 f816 	bl	80009fc <__aeabi_fdiv>
          mm_remaining = prep.mm_complete;
 80079d0:	46c2      	mov	sl, r8
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 80079d2:	4683      	mov	fp, r0
          prep.current_speed = prep.exit_speed;
 80079d4:	e6d1      	b.n	800777a <st_prep_buffer+0x162>
            mm_remaining = mm_var;
 80079d6:	46ca      	mov	sl, r9
 80079d8:	e6cf      	b.n	800777a <st_prep_buffer+0x162>
            prep.current_speed += speed_var;
 80079da:	4638      	mov	r0, r7
 80079dc:	4649      	mov	r1, r9
 80079de:	f7f8 fe51 	bl	8000684 <__addsf3>
 80079e2:	4607      	mov	r7, r0
 80079e4:	e6c9      	b.n	800777a <st_prep_buffer+0x162>
						mm_remaining -= time_var*(prep.current_speed - 0.5f*speed_var);
 80079e6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80079ea:	4648      	mov	r0, r9
 80079ec:	f7f8 ff52 	bl	8000894 <__aeabi_fmul>
 80079f0:	4639      	mov	r1, r7
 80079f2:	f7f8 fe45 	bl	8000680 <__aeabi_fsub>
 80079f6:	4659      	mov	r1, fp
 80079f8:	f7f8 ff4c 	bl	8000894 <__aeabi_fmul>
 80079fc:	4601      	mov	r1, r0
 80079fe:	4650      	mov	r0, sl
 8007a00:	f7f8 fe40 	bl	8000684 <__addsf3>
            prep.current_speed -= speed_var;
 8007a04:	4649      	mov	r1, r9
						mm_remaining -= time_var*(prep.current_speed - 0.5f*speed_var);
 8007a06:	4682      	mov	sl, r0
            prep.current_speed -= speed_var;
 8007a08:	4638      	mov	r0, r7
 8007a0a:	f7f8 fe39 	bl	8000680 <__aeabi_fsub>
 8007a0e:	4607      	mov	r7, r0
 8007a10:	e6b3      	b.n	800777a <st_prep_buffer+0x162>
        if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)) {
 8007a12:	9b00      	ldr	r3, [sp, #0]
 8007a14:	7d9b      	ldrb	r3, [r3, #22]
 8007a16:	f013 0f30 	tst.w	r3, #48	; 0x30
 8007a1a:	f040 80cf 	bne.w	8007bbc <st_prep_buffer+0x5a4>
      if (st_prep_block->is_pwm_rate_adjusted || (sys.step_control & STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 8007a1e:	4b0a      	ldr	r3, [pc, #40]	; (8007a48 <st_prep_buffer+0x430>)
 8007a20:	f893 9004 	ldrb.w	r9, [r3, #4]
          sys.spindle_speed = 0.0;
 8007a24:	2200      	movs	r2, #0
 8007a26:	4b08      	ldr	r3, [pc, #32]	; (8007a48 <st_prep_buffer+0x430>)
 8007a28:	611a      	str	r2, [r3, #16]
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	9a02      	ldr	r2, [sp, #8]
 8007a2e:	8693      	strh	r3, [r2, #52]	; 0x34
        bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8007a30:	4a05      	ldr	r2, [pc, #20]	; (8007a48 <st_prep_buffer+0x430>)
 8007a32:	f009 09f7 	and.w	r9, r9, #247	; 0xf7
 8007a36:	f882 9004 	strb.w	r9, [r2, #4]
 8007a3a:	e6cf      	b.n	80077dc <st_prep_buffer+0x1c4>
 8007a3c:	f04f 0301 	mov.w	r3, #1
 8007a40:	e645      	b.n	80076ce <st_prep_buffer+0xb6>
 8007a42:	bf00      	nop
 8007a44:	392ec33e 	.word	0x392ec33e
 8007a48:	200009d0 	.word	0x200009d0
 8007a4c:	2000149c 	.word	0x2000149c
 8007a50:	20000004 	.word	0x20000004
 8007a54:	000f4240 	.word	0x000f4240
 8007a58:	431bde83 	.word	0x431bde83
 8007a5c:	42700000 	.word	0x42700000
 8007a60:	10624dd3 	.word	0x10624dd3
 8007a64:	200014ee 	.word	0x200014ee
 8007a68:	200014ec 	.word	0x200014ec
 8007a6c:	20001460 	.word	0x20001460
        if (cycles < AMASS_LEVEL2) { prep_segment->amass_level = 1; }
 8007a70:	ebb0 2f17 	cmp.w	r0, r7, lsr #8
 8007a74:	f080 8098 	bcs.w	8007ba8 <st_prep_buffer+0x590>
 8007a78:	2301      	movs	r3, #1
 8007a7a:	4a57      	ldr	r2, [pc, #348]	; (8007bd8 <st_prep_buffer+0x5c0>)
 8007a7c:	9907      	ldr	r1, [sp, #28]
 8007a7e:	440a      	add	r2, r1
 8007a80:	7153      	strb	r3, [r2, #5]
        prep_segment->n_step <<= prep_segment->amass_level;
 8007a82:	4a55      	ldr	r2, [pc, #340]	; (8007bd8 <st_prep_buffer+0x5c0>)
 8007a84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a86:	fa08 f803 	lsl.w	r8, r8, r3
 8007a8a:	f822 8031 	strh.w	r8, [r2, r1, lsl #3]
        cycles >>= prep_segment->amass_level;
 8007a8e:	40d8      	lsrs	r0, r3
        prep_segment->n_step <<= prep_segment->amass_level;
 8007a90:	e6f7      	b.n	8007882 <st_prep_buffer+0x26a>
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8007a92:	2300      	movs	r3, #0
 8007a94:	4a51      	ldr	r2, [pc, #324]	; (8007bdc <st_prep_buffer+0x5c4>)
    prep.steps_remaining = n_steps_remaining;
 8007a96:	9e02      	ldr	r6, [sp, #8]
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8007a98:	7013      	strb	r3, [r2, #0]
    pl_block->millimeters = mm_remaining;
 8007a9a:	4b51      	ldr	r3, [pc, #324]	; (8007be0 <st_prep_buffer+0x5c8>)
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8007a9c:	4628      	mov	r0, r5
    pl_block->millimeters = mm_remaining;
 8007a9e:	681b      	ldr	r3, [r3, #0]
    prep.steps_remaining = n_steps_remaining;
 8007aa0:	60b5      	str	r5, [r6, #8]
    pl_block->millimeters = mm_remaining;
 8007aa2:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8007aa6:	f7f8 fdeb 	bl	8000680 <__aeabi_fsub>
 8007aaa:	4621      	mov	r1, r4
 8007aac:	f7f8 fef2 	bl	8000894 <__aeabi_fmul>
    if (mm_remaining == prep.mm_complete) {
 8007ab0:	69b1      	ldr	r1, [r6, #24]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8007ab2:	6070      	str	r0, [r6, #4]
    if (mm_remaining == prep.mm_complete) {
 8007ab4:	4650      	mov	r0, sl
 8007ab6:	f7f9 f881 	bl	8000bbc <__aeabi_fcmpeq>
 8007aba:	4607      	mov	r7, r0
 8007abc:	2800      	cmp	r0, #0
 8007abe:	f47f af08 	bne.w	80078d2 <st_prep_buffer+0x2ba>
  while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 8007ac2:	4b48      	ldr	r3, [pc, #288]	; (8007be4 <st_prep_buffer+0x5cc>)
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	42bb      	cmp	r3, r7
 8007ac8:	f47f adb5 	bne.w	8007636 <st_prep_buffer+0x1e>
}
 8007acc:	b00f      	add	sp, #60	; 0x3c
 8007ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) { pl_block = plan_get_system_motion_block(); }
 8007ad2:	4b45      	ldr	r3, [pc, #276]	; (8007be8 <st_prep_buffer+0x5d0>)
 8007ad4:	791b      	ldrb	r3, [r3, #4]
 8007ad6:	075a      	lsls	r2, r3, #29
 8007ad8:	d57b      	bpl.n	8007bd2 <st_prep_buffer+0x5ba>
 8007ada:	f7fc fac9 	bl	8004070 <plan_get_system_motion_block>
      else { pl_block = plan_get_current_block(); }
 8007ade:	4a40      	ldr	r2, [pc, #256]	; (8007be0 <st_prep_buffer+0x5c8>)
 8007ae0:	4601      	mov	r1, r0
 8007ae2:	9000      	str	r0, [sp, #0]
 8007ae4:	6010      	str	r0, [r2, #0]
      if (pl_block == NULL) { return; } // No planner blocks. Exit.
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	d0f0      	beq.n	8007acc <st_prep_buffer+0x4b4>
      if (prep.recalculate_flag & PREP_FLAG_RECALCULATE) {
 8007aea:	4840      	ldr	r0, [pc, #256]	; (8007bec <st_prep_buffer+0x5d4>)
 8007aec:	7845      	ldrb	r5, [r0, #1]
 8007aee:	9002      	str	r0, [sp, #8]
 8007af0:	f015 0201 	ands.w	r2, r5, #1
 8007af4:	d07e      	beq.n	8007bf4 <st_prep_buffer+0x5dc>
          prep.recalculate_flag = false;
 8007af6:	2300      	movs	r3, #0
 8007af8:	7043      	strb	r3, [r0, #1]
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8007afa:	4b3b      	ldr	r3, [pc, #236]	; (8007be8 <st_prep_buffer+0x5d0>)
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8007afc:	f8d1 a024 	ldr.w	sl, [r1, #36]	; 0x24
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8007b00:	791c      	ldrb	r4, [r3, #4]
 8007b02:	4b3b      	ldr	r3, [pc, #236]	; (8007bf0 <st_prep_buffer+0x5d8>)
 8007b04:	f004 0702 	and.w	r7, r4, #2
 8007b08:	930d      	str	r3, [sp, #52]	; 0x34
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8007b0a:	2300      	movs	r3, #0
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8007b0c:	f8dd b000 	ldr.w	fp, [sp]
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8007b10:	f8dd 8008 	ldr.w	r8, [sp, #8]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8007b14:	f8db 9020 	ldr.w	r9, [fp, #32]
 8007b18:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8007b1c:	4649      	mov	r1, r9
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8007b1e:	f8c8 3018 	str.w	r3, [r8, #24]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8007b22:	f7f8 ff6b 	bl	80009fc <__aeabi_fdiv>
 8007b26:	4601      	mov	r1, r0
 8007b28:	4606      	mov	r6, r0
			if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { // [Forced Deceleration to Zero Velocity]
 8007b2a:	2f00      	cmp	r7, #0
 8007b2c:	f000 80cd 	beq.w	8007cca <st_prep_buffer+0x6b2>
				prep.ramp_type = RAMP_DECEL;
 8007b30:	2502      	movs	r5, #2
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8007b32:	f8db 6018 	ldr.w	r6, [fp, #24]
				prep.ramp_type = RAMP_DECEL;
 8007b36:	f888 5014 	strb.w	r5, [r8, #20]
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	f7f8 feaa 	bl	8000894 <__aeabi_fmul>
 8007b40:	4601      	mov	r1, r0
 8007b42:	4650      	mov	r0, sl
 8007b44:	f7f8 fd9c 	bl	8000680 <__aeabi_fsub>
				if (decel_dist < 0.0f) {
 8007b48:	2100      	movs	r1, #0
				prep.ramp_type = RAMP_DECEL;
 8007b4a:	4647      	mov	r7, r8
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8007b4c:	4680      	mov	r8, r0
				if (decel_dist < 0.0f) {
 8007b4e:	f7f9 f83f 	bl	8000bd0 <__aeabi_fcmplt>
 8007b52:	2800      	cmp	r0, #0
 8007b54:	f040 8151 	bne.w	8007dfa <st_prep_buffer+0x7e2>
					prep.exit_speed = 0.0f;
 8007b58:	2300      	movs	r3, #0
					prep.mm_complete = decel_dist; // End of feed hold.
 8007b5a:	9e02      	ldr	r6, [sp, #8]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007b5c:	4650      	mov	r0, sl
					prep.exit_speed = 0.0f;
 8007b5e:	6273      	str	r3, [r6, #36]	; 0x24
						mm_remaining = prep.accelerate_until;
 8007b60:	6ab3      	ldr	r3, [r6, #40]	; 0x28
					prep.mm_complete = decel_dist; // End of feed hold.
 8007b62:	f8c6 8018 	str.w	r8, [r6, #24]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007b66:	4619      	mov	r1, r3
						mm_remaining = prep.accelerate_until;
 8007b68:	9303      	str	r3, [sp, #12]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007b6a:	f7f8 fd89 	bl	8000680 <__aeabi_fsub>
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8007b6e:	2300      	movs	r3, #0
 8007b70:	9308      	str	r3, [sp, #32]
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8007b72:	6a33      	ldr	r3, [r6, #32]
 8007b74:	9301      	str	r3, [sp, #4]
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8007b76:	6af3      	ldr	r3, [r6, #44]	; 0x2c
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007b78:	4606      	mov	r6, r0
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8007b7a:	9305      	str	r3, [sp, #20]
        bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 8007b7c:	4b1a      	ldr	r3, [pc, #104]	; (8007be8 <st_prep_buffer+0x5d0>)
 8007b7e:	f044 0408 	orr.w	r4, r4, #8
 8007b82:	711c      	strb	r4, [r3, #4]
 8007b84:	e574      	b.n	8007670 <st_prep_buffer+0x58>
        if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)) {
 8007b86:	9b00      	ldr	r3, [sp, #0]
 8007b88:	7d9b      	ldrb	r3, [r3, #22]
 8007b8a:	f013 0f30 	tst.w	r3, #48	; 0x30
 8007b8e:	f43f af49 	beq.w	8007a24 <st_prep_buffer+0x40c>
          float rpm = pl_block->spindle_speed;
 8007b92:	9b00      	ldr	r3, [sp, #0]
 8007b94:	6b58      	ldr	r0, [r3, #52]	; 0x34
          prep.current_spindle_pwm = spindle_compute_pwm_value(rpm);
 8007b96:	f7ff f881 	bl	8006c9c <spindle_compute_pwm_value>
        bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8007b9a:	4b13      	ldr	r3, [pc, #76]	; (8007be8 <st_prep_buffer+0x5d0>)
          prep.current_spindle_pwm = spindle_compute_pwm_value(rpm);
 8007b9c:	9a02      	ldr	r2, [sp, #8]
        bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8007b9e:	f893 9004 	ldrb.w	r9, [r3, #4]
          prep.current_spindle_pwm = spindle_compute_pwm_value(rpm);
 8007ba2:	8690      	strh	r0, [r2, #52]	; 0x34
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	e743      	b.n	8007a30 <st_prep_buffer+0x418>
        else if (cycles < AMASS_LEVEL3) { prep_segment->amass_level = 2; }
 8007ba8:	ebb0 1fd7 	cmp.w	r0, r7, lsr #7
 8007bac:	bf34      	ite	cc
 8007bae:	2302      	movcc	r3, #2
        else { prep_segment->amass_level = 3; }
 8007bb0:	2303      	movcs	r3, #3
 8007bb2:	4a09      	ldr	r2, [pc, #36]	; (8007bd8 <st_prep_buffer+0x5c0>)
 8007bb4:	9907      	ldr	r1, [sp, #28]
 8007bb6:	440a      	add	r2, r1
 8007bb8:	7153      	strb	r3, [r2, #5]
 8007bba:	e762      	b.n	8007a82 <st_prep_buffer+0x46a>
          if (st_prep_block->is_pwm_rate_adjusted) { rpm *= (prep.current_speed * prep.inv_rate); }
 8007bbc:	9b00      	ldr	r3, [sp, #0]
 8007bbe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007bc0:	9b02      	ldr	r3, [sp, #8]
 8007bc2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007bc4:	f7f8 fe66 	bl	8000894 <__aeabi_fmul>
 8007bc8:	4601      	mov	r1, r0
 8007bca:	4638      	mov	r0, r7
 8007bcc:	f7f8 fe62 	bl	8000894 <__aeabi_fmul>
 8007bd0:	e7e1      	b.n	8007b96 <st_prep_buffer+0x57e>
      else { pl_block = plan_get_current_block(); }
 8007bd2:	f7fc fa59 	bl	8004088 <plan_get_current_block>
 8007bd6:	e782      	b.n	8007ade <st_prep_buffer+0x4c6>
 8007bd8:	2000149c 	.word	0x2000149c
 8007bdc:	200014ee 	.word	0x200014ee
 8007be0:	20001460 	.word	0x20001460
 8007be4:	200014ed 	.word	0x200014ed
 8007be8:	200009d0 	.word	0x200009d0
 8007bec:	20001464 	.word	0x20001464
 8007bf0:	200015fc 	.word	0x200015fc
  block_index++;
 8007bf4:	7803      	ldrb	r3, [r0, #0]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	b2db      	uxtb	r3, r3
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 8007bfa:	2b09      	cmp	r3, #9
 8007bfc:	f000 81a6 	beq.w	8007f4c <st_prep_buffer+0x934>
        st_prep_block = &st_block_buffer[prep.st_block_index];
 8007c00:	461e      	mov	r6, r3
 8007c02:	4683      	mov	fp, r0
 8007c04:	468a      	mov	sl, r1
 8007c06:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 8007ec4 <st_prep_buffer+0x8ac>
 8007c0a:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8007c0e:	eb09 04c4 	add.w	r4, r9, r4, lsl #3
        prep.st_block_index = st_next_block_index(prep.st_block_index);
 8007c12:	f88b 3000 	strb.w	r3, [fp]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8007c16:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007c1a:	f8da 1000 	ldr.w	r1, [sl]
 8007c1e:	00df      	lsls	r7, r3, #3
 8007c20:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007c24:	00c9      	lsls	r1, r1, #3
        st_prep_block->direction_bits = pl_block->direction_bits;
 8007c26:	eb06 0846 	add.w	r8, r6, r6, lsl #1
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8007c2a:	f8da 2004 	ldr.w	r2, [sl, #4]
          st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 8007c2e:	f8da 0010 	ldr.w	r0, [sl, #16]
        st_prep_block->direction_bits = pl_block->direction_bits;
 8007c32:	f8ba c014 	ldrh.w	ip, [sl, #20]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8007c36:	00db      	lsls	r3, r3, #3
 8007c38:	f849 1038 	str.w	r1, [r9, r8, lsl #3]
        st_prep_block->direction_bits = pl_block->direction_bits;
 8007c3c:	eb09 08c8 	add.w	r8, r9, r8, lsl #3
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8007c40:	f8c8 300c 	str.w	r3, [r8, #12]
        st_prep_block = &st_block_buffer[prep.st_block_index];
 8007c44:	4ba0      	ldr	r3, [pc, #640]	; (8007ec8 <st_prep_buffer+0x8b0>)
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8007c46:	00d2      	lsls	r2, r2, #3
        st_prep_block = &st_block_buffer[prep.st_block_index];
 8007c48:	601c      	str	r4, [r3, #0]
 8007c4a:	930d      	str	r3, [sp, #52]	; 0x34
          st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 8007c4c:	00c3      	lsls	r3, r0, #3
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8007c4e:	e9c8 2701 	strd	r2, r7, [r8, #4]
          st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 8007c52:	f8c8 3010 	str.w	r3, [r8, #16]
        st_prep_block->direction_bits = pl_block->direction_bits;
 8007c56:	f8a8 c014 	strh.w	ip, [r8, #20]
        prep.steps_remaining = (float)pl_block->step_event_count;
 8007c5a:	f7f8 fdc3 	bl	80007e4 <__aeabi_ui2f>
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8007c5e:	f8da a024 	ldr.w	sl, [sl, #36]	; 0x24
        prep.steps_remaining = (float)pl_block->step_event_count;
 8007c62:	f8cb 0008 	str.w	r0, [fp, #8]
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8007c66:	4651      	mov	r1, sl
 8007c68:	f7f8 fec8 	bl	80009fc <__aeabi_fdiv>
        prep.steps_remaining = (float)pl_block->step_event_count;
 8007c6c:	465c      	mov	r4, fp
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8007c6e:	4601      	mov	r1, r0
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8007c70:	4896      	ldr	r0, [pc, #600]	; (8007ecc <st_prep_buffer+0x8b4>)
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8007c72:	60e1      	str	r1, [r4, #12]
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8007c74:	f7f8 fec2 	bl	80009fc <__aeabi_fdiv>
        prep.dt_remainder = 0.0f; // Reset for new segment block
 8007c78:	2100      	movs	r1, #0
 8007c7a:	6061      	str	r1, [r4, #4]
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8007c7c:	4994      	ldr	r1, [pc, #592]	; (8007ed0 <st_prep_buffer+0x8b8>)
        prep.dt_remainder = 0.0f; // Reset for new segment block
 8007c7e:	4622      	mov	r2, r4
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8007c80:	6120      	str	r0, [r4, #16]
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8007c82:	790c      	ldrb	r4, [r1, #4]
 8007c84:	f005 0308 	and.w	r3, r5, #8
 8007c88:	f004 0702 	and.w	r7, r4, #2
 8007c8c:	433b      	orrs	r3, r7
        st_prep_block->direction_bits = pl_block->direction_bits;
 8007c8e:	ea4f 0b46 	mov.w	fp, r6, lsl #1
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8007c92:	f040 80d0 	bne.w	8007e36 <st_prep_buffer+0x81e>
          prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 8007c96:	9301      	str	r3, [sp, #4]
 8007c98:	9b00      	ldr	r3, [sp, #0]
 8007c9a:	6998      	ldr	r0, [r3, #24]
 8007c9c:	f002 f8d0 	bl	8009e40 <sqrtf>
        st_prep_block->is_pwm_rate_adjusted = false;
 8007ca0:	9b01      	ldr	r3, [sp, #4]
 8007ca2:	f888 3016 	strb.w	r3, [r8, #22]
          prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 8007ca6:	9b02      	ldr	r3, [sp, #8]
 8007ca8:	61d8      	str	r0, [r3, #28]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8007caa:	4b8a      	ldr	r3, [pc, #552]	; (8007ed4 <st_prep_buffer+0x8bc>)
 8007cac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007cb0:	079d      	lsls	r5, r3, #30
 8007cb2:	f100 817a 	bmi.w	8007faa <st_prep_buffer+0x992>
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	9b02      	ldr	r3, [sp, #8]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8007cba:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8007cbe:	619a      	str	r2, [r3, #24]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8007cc0:	9b00      	ldr	r3, [sp, #0]
 8007cc2:	6a19      	ldr	r1, [r3, #32]
 8007cc4:	f7f8 fe9a 	bl	80009fc <__aeabi_fdiv>
 8007cc8:	4606      	mov	r6, r0
				prep.ramp_type = RAMP_ACCEL; // Initialize as acceleration ramp.
 8007cca:	2300      	movs	r3, #0
				prep.accelerate_until = pl_block->millimeters;
 8007ccc:	9a02      	ldr	r2, [sp, #8]
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8007cce:	0761      	lsls	r1, r4, #29
				prep.accelerate_until = pl_block->millimeters;
 8007cd0:	f8c2 a028 	str.w	sl, [r2, #40]	; 0x28
				prep.ramp_type = RAMP_ACCEL; // Initialize as acceleration ramp.
 8007cd4:	7513      	strb	r3, [r2, #20]
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8007cd6:	f140 80d6 	bpl.w	8007e86 <st_prep_buffer+0x86e>
          prep.exit_speed = exit_speed_sqr = 0.0f; // Enforce stop at end of system motion.
 8007cda:	2300      	movs	r3, #0
 8007cdc:	461f      	mov	r7, r3
 8007cde:	6253      	str	r3, [r2, #36]	; 0x24
        nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 8007ce0:	9800      	ldr	r0, [sp, #0]
 8007ce2:	f7fc fa0d 	bl	8004100 <plan_compute_profile_nominal_speed>
 8007ce6:	4601      	mov	r1, r0
 8007ce8:	9001      	str	r0, [sp, #4]
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 8007cea:	f7f8 fdd3 	bl	8000894 <__aeabi_fmul>
 8007cee:	4604      	mov	r4, r0
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8007cf0:	4b79      	ldr	r3, [pc, #484]	; (8007ed8 <st_prep_buffer+0x8c0>)
        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 8007cf2:	4621      	mov	r1, r4
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8007cf4:	f8d3 9000 	ldr.w	r9, [r3]
 8007cf8:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8007cfc:	f8d9 a024 	ldr.w	sl, [r9, #36]	; 0x24
        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 8007d00:	4628      	mov	r0, r5
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8007d02:	f8cd 9000 	str.w	r9, [sp]
        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 8007d06:	f7f8 ff81 	bl	8000c0c <__aeabi_fcmpgt>
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	d02c      	beq.n	8007d68 <st_prep_buffer+0x750>
          prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 8007d0e:	4629      	mov	r1, r5
 8007d10:	4620      	mov	r0, r4
 8007d12:	f7f8 fcb5 	bl	8000680 <__aeabi_fsub>
 8007d16:	4631      	mov	r1, r6
 8007d18:	f7f8 fdbc 	bl	8000894 <__aeabi_fmul>
 8007d1c:	4680      	mov	r8, r0
 8007d1e:	4650      	mov	r0, sl
 8007d20:	4641      	mov	r1, r8
 8007d22:	f7f8 fcaf 	bl	8000684 <__addsf3>
 8007d26:	f8dd b008 	ldr.w	fp, [sp, #8]
          if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 8007d2a:	2100      	movs	r1, #0
          prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 8007d2c:	f8cb 0028 	str.w	r0, [fp, #40]	; 0x28
 8007d30:	9003      	str	r0, [sp, #12]
          if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 8007d32:	f7f8 ff57 	bl	8000be4 <__aeabi_fcmple>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	f040 80d0 	bne.w	8007edc <st_prep_buffer+0x8c4>
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 8007d3c:	4639      	mov	r1, r7
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f7f8 fc9e 	bl	8000680 <__aeabi_fsub>
 8007d44:	4631      	mov	r1, r6
 8007d46:	f7f8 fda5 	bl	8000894 <__aeabi_fmul>
						prep.maximum_speed = nominal_speed;
 8007d4a:	9b02      	ldr	r3, [sp, #8]
 8007d4c:	9a01      	ldr	r2, [sp, #4]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007d4e:	f108 4600 	add.w	r6, r8, #2147483648	; 0x80000000
						prep.maximum_speed = nominal_speed;
 8007d52:	621a      	str	r2, [r3, #32]
        bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 8007d54:	4a5e      	ldr	r2, [pc, #376]	; (8007ed0 <st_prep_buffer+0x8b8>)
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8007d56:	2503      	movs	r5, #3
        bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 8007d58:	7914      	ldrb	r4, [r2, #4]
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8007d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8007d5c:	f8d3 8018 	ldr.w	r8, [r3, #24]
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8007d60:	9208      	str	r2, [sp, #32]
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 8007d62:	9005      	str	r0, [sp, #20]
 8007d64:	62d8      	str	r0, [r3, #44]	; 0x2c
            prep.ramp_type = RAMP_DECEL_OVERRIDE;
 8007d66:	e709      	b.n	8007b7c <st_prep_buffer+0x564>
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8007d68:	4639      	mov	r1, r7
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	f7f8 fc88 	bl	8000680 <__aeabi_fsub>
 8007d70:	4631      	mov	r1, r6
 8007d72:	f7f8 fd8f 	bl	8000894 <__aeabi_fmul>
 8007d76:	4651      	mov	r1, sl
 8007d78:	f7f8 fc84 	bl	8000684 <__addsf3>
				float intersect_distance =
 8007d7c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007d80:	f7f8 fd88 	bl	8000894 <__aeabi_fmul>
				} else if (intersect_distance > 0.0f) {
 8007d84:	2100      	movs	r1, #0
				float intersect_distance =
 8007d86:	4680      	mov	r8, r0
 8007d88:	9003      	str	r0, [sp, #12]
				} else if (intersect_distance > 0.0f) {
 8007d8a:	f7f8 ff3f 	bl	8000c0c <__aeabi_fcmpgt>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	f000 80c9 	beq.w	8007f26 <st_prep_buffer+0x90e>
					if (intersect_distance < pl_block->millimeters) { // Either trapezoid or triangle types
 8007d94:	4641      	mov	r1, r8
 8007d96:	4650      	mov	r0, sl
 8007d98:	f7f8 ff38 	bl	8000c0c <__aeabi_fcmpgt>
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	d07d      	beq.n	8007e9c <st_prep_buffer+0x884>
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 8007da0:	4639      	mov	r1, r7
 8007da2:	4620      	mov	r0, r4
 8007da4:	f7f8 fc6c 	bl	8000680 <__aeabi_fsub>
 8007da8:	4631      	mov	r1, r6
 8007daa:	f7f8 fd73 	bl	8000894 <__aeabi_fmul>
						if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 8007dae:	4641      	mov	r1, r8
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 8007db0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007db4:	9005      	str	r0, [sp, #20]
 8007db6:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
						if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 8007dba:	f7f8 ff09 	bl	8000bd0 <__aeabi_fcmplt>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	f000 80cd 	beq.w	8007f5e <st_prep_buffer+0x946>
							prep.maximum_speed = nominal_speed;
 8007dc4:	9b01      	ldr	r3, [sp, #4]
							if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 8007dc6:	4621      	mov	r1, r4
 8007dc8:	4628      	mov	r0, r5
							prep.maximum_speed = nominal_speed;
 8007dca:	f8c8 3020 	str.w	r3, [r8, #32]
							if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 8007dce:	f7f8 fef5 	bl	8000bbc <__aeabi_fcmpeq>
 8007dd2:	2800      	cmp	r0, #0
 8007dd4:	f000 80f7 	beq.w	8007fc6 <st_prep_buffer+0x9ae>
						mm_remaining = prep.accelerate_until;
 8007dd8:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8007ddc:	4646      	mov	r6, r8
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007dde:	4619      	mov	r1, r3
 8007de0:	4650      	mov	r0, sl
						mm_remaining = prep.accelerate_until;
 8007de2:	9303      	str	r3, [sp, #12]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007de4:	f7f8 fc4c 	bl	8000680 <__aeabi_fsub>
        bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 8007de8:	4b39      	ldr	r3, [pc, #228]	; (8007ed0 <st_prep_buffer+0x8b8>)
 8007dea:	2501      	movs	r5, #1
 8007dec:	791c      	ldrb	r4, [r3, #4]
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8007dee:	6a73      	ldr	r3, [r6, #36]	; 0x24
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8007df0:	f8d8 8018 	ldr.w	r8, [r8, #24]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007df4:	4606      	mov	r6, r0
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8007df6:	9308      	str	r3, [sp, #32]
 8007df8:	e6c0      	b.n	8007b7c <st_prep_buffer+0x564>
					prep.exit_speed = sqrtf(pl_block->entry_speed_sqr-2*pl_block->acceleration*pl_block->millimeters);
 8007dfa:	4649      	mov	r1, r9
 8007dfc:	4648      	mov	r0, r9
 8007dfe:	f7f8 fc41 	bl	8000684 <__addsf3>
 8007e02:	4651      	mov	r1, sl
 8007e04:	f7f8 fd46 	bl	8000894 <__aeabi_fmul>
 8007e08:	4601      	mov	r1, r0
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	f7f8 fc38 	bl	8000680 <__aeabi_fsub>
 8007e10:	f002 f816 	bl	8009e40 <sqrtf>
 8007e14:	4603      	mov	r3, r0
						mm_remaining = prep.accelerate_until;
 8007e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
					prep.exit_speed = sqrtf(pl_block->entry_speed_sqr-2*pl_block->acceleration*pl_block->millimeters);
 8007e18:	627b      	str	r3, [r7, #36]	; 0x24
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007e1a:	4611      	mov	r1, r2
						mm_remaining = prep.accelerate_until;
 8007e1c:	9203      	str	r2, [sp, #12]
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8007e1e:	6a3a      	ldr	r2, [r7, #32]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007e20:	4650      	mov	r0, sl
					prep.exit_speed = sqrtf(pl_block->entry_speed_sqr-2*pl_block->acceleration*pl_block->millimeters);
 8007e22:	9308      	str	r3, [sp, #32]
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8007e24:	9201      	str	r2, [sp, #4]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007e26:	f7f8 fc2b 	bl	8000680 <__aeabi_fsub>
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8007e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2c:	f04f 0800 	mov.w	r8, #0
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007e30:	4606      	mov	r6, r0
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8007e32:	9305      	str	r3, [sp, #20]
 8007e34:	e6a2      	b.n	8007b7c <st_prep_buffer+0x564>
          prep.current_speed = prep.exit_speed;
 8007e36:	6a51      	ldr	r1, [r2, #36]	; 0x24
          prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 8007e38:	f025 0508 	bic.w	r5, r5, #8
          prep.current_speed = prep.exit_speed;
 8007e3c:	61d1      	str	r1, [r2, #28]
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8007e3e:	4608      	mov	r0, r1
 8007e40:	f7f8 fd28 	bl	8000894 <__aeabi_fmul>
 8007e44:	9b00      	ldr	r3, [sp, #0]
          prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 8007e46:	9a02      	ldr	r2, [sp, #8]
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8007e48:	6198      	str	r0, [r3, #24]
        st_prep_block->is_pwm_rate_adjusted = false;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	f888 3016 	strb.w	r3, [r8, #22]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8007e50:	4b20      	ldr	r3, [pc, #128]	; (8007ed4 <st_prep_buffer+0x8bc>)
          prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 8007e52:	7055      	strb	r5, [r2, #1]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8007e54:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007e58:	079b      	lsls	r3, r3, #30
 8007e5a:	f57f ae56 	bpl.w	8007b0a <st_prep_buffer+0x4f2>
          if (pl_block->condition & PL_COND_FLAG_SPINDLE_CCW) {
 8007e5e:	9b00      	ldr	r3, [sp, #0]
 8007e60:	7d9b      	ldrb	r3, [r3, #22]
 8007e62:	0698      	lsls	r0, r3, #26
 8007e64:	f57f ae51 	bpl.w	8007b0a <st_prep_buffer+0x4f2>
            prep.inv_rate = 1.0f / pl_block->programmed_rate;
 8007e68:	9b00      	ldr	r3, [sp, #0]
 8007e6a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007e6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007e70:	f7f8 fdc4 	bl	80009fc <__aeabi_fdiv>
 8007e74:	9b02      	ldr	r3, [sp, #8]
            st_prep_block->is_pwm_rate_adjusted = true;
 8007e76:	445e      	add	r6, fp
            prep.inv_rate = 1.0f / pl_block->programmed_rate;
 8007e78:	6318      	str	r0, [r3, #48]	; 0x30
            st_prep_block->is_pwm_rate_adjusted = true;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	eb09 09c6 	add.w	r9, r9, r6, lsl #3
 8007e80:	f889 3016 	strb.w	r3, [r9, #22]
 8007e84:	e641      	b.n	8007b0a <st_prep_buffer+0x4f2>
          exit_speed_sqr = plan_get_exec_block_exit_speed_sqr();
 8007e86:	f7fc f913 	bl	80040b0 <plan_get_exec_block_exit_speed_sqr>
 8007e8a:	4607      	mov	r7, r0
          prep.exit_speed = sqrtf(exit_speed_sqr);
 8007e8c:	f001 ffd8 	bl	8009e40 <sqrtf>
 8007e90:	9b02      	ldr	r3, [sp, #8]
 8007e92:	6258      	str	r0, [r3, #36]	; 0x24
        nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 8007e94:	4b10      	ldr	r3, [pc, #64]	; (8007ed8 <st_prep_buffer+0x8c0>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	9300      	str	r3, [sp, #0]
 8007e9a:	e721      	b.n	8007ce0 <st_prep_buffer+0x6c8>
						mm_remaining = prep.accelerate_until;
 8007e9c:	9e02      	ldr	r6, [sp, #8]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007e9e:	4650      	mov	r0, sl
						mm_remaining = prep.accelerate_until;
 8007ea0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8007ea2:	2502      	movs	r5, #2
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007ea4:	4619      	mov	r1, r3
						mm_remaining = prep.accelerate_until;
 8007ea6:	9303      	str	r3, [sp, #12]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007ea8:	f7f8 fbea 	bl	8000680 <__aeabi_fsub>
        bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 8007eac:	4b08      	ldr	r3, [pc, #32]	; (8007ed0 <st_prep_buffer+0x8b8>)
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8007eae:	f8d6 8018 	ldr.w	r8, [r6, #24]
        bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 8007eb2:	791c      	ldrb	r4, [r3, #4]
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8007eb4:	6a33      	ldr	r3, [r6, #32]
 8007eb6:	9301      	str	r3, [sp, #4]
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8007eb8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8007eba:	9305      	str	r3, [sp, #20]
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8007ebc:	6a73      	ldr	r3, [r6, #36]	; 0x24
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007ebe:	4606      	mov	r6, r0
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8007ec0:	9308      	str	r3, [sp, #32]
 8007ec2:	e65b      	b.n	8007b7c <st_prep_buffer+0x564>
 8007ec4:	20001524 	.word	0x20001524
 8007ec8:	200015fc 	.word	0x200015fc
 8007ecc:	3fa00000 	.word	0x3fa00000
 8007ed0:	200009d0 	.word	0x200009d0
 8007ed4:	200013ec 	.word	0x200013ec
 8007ed8:	20001460 	.word	0x20001460
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 8007edc:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8007ee0:	4650      	mov	r0, sl
 8007ee2:	f7f8 fcd7 	bl	8000894 <__aeabi_fmul>
 8007ee6:	4601      	mov	r1, r0
 8007ee8:	f7f8 fbcc 	bl	8000684 <__addsf3>
 8007eec:	4601      	mov	r1, r0
 8007eee:	4628      	mov	r0, r5
 8007ef0:	f7f8 fbc6 	bl	8000680 <__aeabi_fsub>
 8007ef4:	f001 ffa4 	bl	8009e40 <sqrtf>
            prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as deceleration override.
 8007ef8:	f89b 3001 	ldrb.w	r3, [fp, #1]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007efc:	f108 4600 	add.w	r6, r8, #2147483648	; 0x80000000
            prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as deceleration override.
 8007f00:	f043 0308 	orr.w	r3, r3, #8
 8007f04:	f88b 3001 	strb.w	r3, [fp, #1]
        bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 8007f08:	4b38      	ldr	r3, [pc, #224]	; (8007fec <st_prep_buffer+0x9d4>)
 8007f0a:	2502      	movs	r5, #2
 8007f0c:	791c      	ldrb	r4, [r3, #4]
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8007f0e:	f8db 3020 	ldr.w	r3, [fp, #32]
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8007f12:	f8db 8018 	ldr.w	r8, [fp, #24]
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8007f16:	9301      	str	r3, [sp, #4]
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8007f18:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 8007f1c:	9008      	str	r0, [sp, #32]
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8007f1e:	9305      	str	r3, [sp, #20]
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 8007f20:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
            prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as deceleration override.
 8007f24:	e62a      	b.n	8007b7c <st_prep_buffer+0x564>
					prep.accelerate_until = 0.0f;
 8007f26:	2200      	movs	r2, #0
 8007f28:	9b02      	ldr	r3, [sp, #8]
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8007f2a:	4656      	mov	r6, sl
					prep.accelerate_until = 0.0f;
 8007f2c:	629a      	str	r2, [r3, #40]	; 0x28
					prep.maximum_speed = prep.exit_speed;
 8007f2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8007f30:	f8d3 8018 	ldr.w	r8, [r3, #24]
					prep.maximum_speed = prep.exit_speed;
 8007f34:	9201      	str	r2, [sp, #4]
 8007f36:	621a      	str	r2, [r3, #32]
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8007f38:	9208      	str	r2, [sp, #32]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	9203      	str	r2, [sp, #12]
        bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 8007f3e:	4a2b      	ldr	r2, [pc, #172]	; (8007fec <st_prep_buffer+0x9d4>)
 8007f40:	7d1d      	ldrb	r5, [r3, #20]
 8007f42:	7914      	ldrb	r4, [r2, #4]
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8007f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f46:	9205      	str	r2, [sp, #20]
 8007f48:	e618      	b.n	8007b7c <st_prep_buffer+0x564>
 8007f4a:	4770      	bx	lr
 8007f4c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8007ff0 <st_prep_buffer+0x9d8>
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 8007f50:	4613      	mov	r3, r2
 8007f52:	464c      	mov	r4, r9
 8007f54:	4616      	mov	r6, r2
 8007f56:	468a      	mov	sl, r1
 8007f58:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007f5c:	e659      	b.n	8007c12 <st_prep_buffer+0x5fa>
							prep.accelerate_until = intersect_distance;
 8007f5e:	9c03      	ldr	r4, [sp, #12]
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 8007f60:	f8d9 1020 	ldr.w	r1, [r9, #32]
							prep.accelerate_until = intersect_distance;
 8007f64:	f8c8 4028 	str.w	r4, [r8, #40]	; 0x28
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 8007f68:	4608      	mov	r0, r1
							prep.decelerate_after = intersect_distance;
 8007f6a:	f8c8 402c 	str.w	r4, [r8, #44]	; 0x2c
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8007f6e:	9405      	str	r4, [sp, #20]
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 8007f70:	f7f8 fb88 	bl	8000684 <__addsf3>
 8007f74:	4621      	mov	r1, r4
 8007f76:	f7f8 fc8d 	bl	8000894 <__aeabi_fmul>
 8007f7a:	4639      	mov	r1, r7
 8007f7c:	f7f8 fb82 	bl	8000684 <__addsf3>
 8007f80:	f001 ff5e 	bl	8009e40 <sqrtf>
 8007f84:	4683      	mov	fp, r0
 8007f86:	4645      	mov	r5, r8
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007f88:	4650      	mov	r0, sl
        bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 8007f8a:	4b18      	ldr	r3, [pc, #96]	; (8007fec <st_prep_buffer+0x9d4>)
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007f8c:	4621      	mov	r1, r4
        bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 8007f8e:	791c      	ldrb	r4, [r3, #4]
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 8007f90:	f8cd b004 	str.w	fp, [sp, #4]
 8007f94:	f8c8 b020 	str.w	fp, [r8, #32]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007f98:	f7f8 fb72 	bl	8000680 <__aeabi_fsub>
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8007f9c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8007f9e:	f8d5 8018 	ldr.w	r8, [r5, #24]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007fa2:	4606      	mov	r6, r0
 8007fa4:	7d2d      	ldrb	r5, [r5, #20]
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8007fa6:	9308      	str	r3, [sp, #32]
 8007fa8:	e5e8      	b.n	8007b7c <st_prep_buffer+0x564>
          if (pl_block->condition & PL_COND_FLAG_SPINDLE_CCW) {
 8007faa:	9b00      	ldr	r3, [sp, #0]
 8007fac:	7d9b      	ldrb	r3, [r3, #22]
 8007fae:	069b      	lsls	r3, r3, #26
 8007fb0:	f53f af5a 	bmi.w	8007e68 <st_prep_buffer+0x850>
 8007fb4:	e67f      	b.n	8007cb6 <st_prep_buffer+0x69e>
          bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 8007fb6:	4b0d      	ldr	r3, [pc, #52]	; (8007fec <st_prep_buffer+0x9d4>)
 8007fb8:	f049 0a01 	orr.w	sl, r9, #1
 8007fbc:	f883 a004 	strb.w	sl, [r3, #4]
}
 8007fc0:	b00f      	add	sp, #60	; 0x3c
 8007fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
								prep.accelerate_until -= inv_2_accel*(nominal_speed_sqr-pl_block->entry_speed_sqr);
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	4628      	mov	r0, r5
 8007fca:	f7f8 fb59 	bl	8000680 <__aeabi_fsub>
 8007fce:	4631      	mov	r1, r6
 8007fd0:	f7f8 fc60 	bl	8000894 <__aeabi_fmul>
 8007fd4:	9d02      	ldr	r5, [sp, #8]
 8007fd6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8007fd8:	f7f8 fb54 	bl	8000684 <__addsf3>
 8007fdc:	4603      	mov	r3, r0
        bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 8007fde:	4a03      	ldr	r2, [pc, #12]	; (8007fec <st_prep_buffer+0x9d4>)
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007fe0:	4650      	mov	r0, sl
 8007fe2:	4619      	mov	r1, r3
        bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 8007fe4:	7914      	ldrb	r4, [r2, #4]
								prep.accelerate_until -= inv_2_accel*(nominal_speed_sqr-pl_block->entry_speed_sqr);
 8007fe6:	9303      	str	r3, [sp, #12]
 8007fe8:	62ab      	str	r3, [r5, #40]	; 0x28
 8007fea:	e7d5      	b.n	8007f98 <st_prep_buffer+0x980>
 8007fec:	200009d0 	.word	0x200009d0
 8007ff0:	20001524 	.word	0x20001524

08007ff4 <st_get_realtime_rate>:
  if (sys.state & (STATE_CYCLE | STATE_HOMING | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)){
 8007ff4:	4b04      	ldr	r3, [pc, #16]	; (8008008 <st_get_realtime_rate+0x14>)
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	f013 0f7c 	tst.w	r3, #124	; 0x7c
    return prep.current_speed;
 8007ffc:	bf1a      	itte	ne
 8007ffe:	4b03      	ldrne	r3, [pc, #12]	; (800800c <st_get_realtime_rate+0x18>)
 8008000:	69d8      	ldrne	r0, [r3, #28]
  return 0.0f;
 8008002:	2000      	moveq	r0, #0
}
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	200009d0 	.word	0x200009d0
 800800c:	20001464 	.word	0x20001464

08008010 <system_init>:

#include "grbl.h"


void system_init()
{
 8008010:	b510      	push	{r4, lr}
  CONTROL_PCMSK |= CONTROL_MASK;  // Enable specific pins of the Pin Change Interrupt
  PCICR |= (1 << CONTROL_INT);   // Enable Pin Change Interrupt
#endif
#ifdef STM32F103C8
  GPIO_InitTypeDef GPIO_InitStructure;
  RCC_APB2PeriphClockCmd(RCC_CONTROL_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8008012:	2101      	movs	r1, #1
{
 8008014:	b084      	sub	sp, #16
  RCC_APB2PeriphClockCmd(RCC_CONTROL_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8008016:	2009      	movs	r0, #9
 8008018:	f7f9 f9c4 	bl	80013a4 <RCC_APB2PeriphClockCmd>
#ifdef ABC_AXIS
  // Full SWJ Disabled (JTAG-DP + SW-DP)
  // SWD will work only with "flash under reset" option
  GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE); // to enable PA15, PB3, PB4, PA13, PA14 pins
#else
  GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE); // to enable PA15, PB3, PB4 pins
 800801c:	2101      	movs	r1, #1
 800801e:	4818      	ldr	r0, [pc, #96]	; (8008080 <system_init+0x70>)
 8008020:	f7f9 f96c 	bl	80012fc <GPIO_PinRemapConfig>
#ifdef DISABLE_CONTROL_PIN_PULL_UP
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
  GPIO_InitStructure.GPIO_Pin = CONTROL_MASK;
 8008024:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8008028:	f644 0303 	movw	r3, #18435	; 0x4803
  GPIO_Init(CONTROL_PORT, &GPIO_InitStructure);
 800802c:	4669      	mov	r1, sp
 800802e:	4815      	ldr	r0, [pc, #84]	; (8008084 <system_init+0x74>)
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8008030:	f8ad 3002 	strh.w	r3, [sp, #2]
  GPIO_InitStructure.GPIO_Pin = CONTROL_MASK;
 8008034:	f8ad 4000 	strh.w	r4, [sp]
  GPIO_Init(CONTROL_PORT, &GPIO_InitStructure);
 8008038:	f7f8 ffba 	bl	8000fb0 <GPIO_Init>

  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_RESET_BIT);
 800803c:	2105      	movs	r1, #5
 800803e:	2001      	movs	r0, #1
 8008040:	f7f9 f994 	bl	800136c <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_FEED_HOLD_BIT);
 8008044:	2106      	movs	r1, #6
 8008046:	2001      	movs	r0, #1
 8008048:	f7f9 f990 	bl	800136c <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_CYCLE_START_BIT);
 800804c:	2107      	movs	r1, #7
 800804e:	2001      	movs	r0, #1
 8008050:	f7f9 f98c 	bl	800136c <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_SAFETY_DOOR_BIT);
 8008054:	2108      	movs	r1, #8
 8008056:	2001      	movs	r0, #1
 8008058:	f7f9 f988 	bl	800136c <GPIO_EXTILineConfig>

  EXTI_InitTypeDef EXTI_InitStructure;
  EXTI_InitStructure.EXTI_Line = CONTROL_MASK;    //
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 800805c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8008060:	2301      	movs	r3, #1
  EXTI_Init(&EXTI_InitStructure);
 8008062:	a802      	add	r0, sp, #8
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8008064:	f8ad 200c 	strh.w	r2, [sp, #12]
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8008068:	f88d 300e 	strb.w	r3, [sp, #14]
  EXTI_InitStructure.EXTI_Line = CONTROL_MASK;    //
 800806c:	9402      	str	r4, [sp, #8]
  EXTI_Init(&EXTI_InitStructure);
 800806e:	f7f8 fe73 	bl	8000d58 <EXTI_Init>

  NVIC_InitTypeDef NVIC_InitStructure;
  NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn; //Enable keypad external interrupt channel
 8008072:	4b05      	ldr	r3, [pc, #20]	; (8008088 <system_init+0x78>)
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02; //Priority 2,
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02; //Sub priority 2
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //Enable external interrupt channel
  NVIC_Init(&NVIC_InitStructure);
 8008074:	a801      	add	r0, sp, #4
  NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn; //Enable keypad external interrupt channel
 8008076:	9301      	str	r3, [sp, #4]
  NVIC_Init(&NVIC_InitStructure);
 8008078:	f7f8 fe38 	bl	8000cec <NVIC_Init>
#endif
}
 800807c:	b004      	add	sp, #16
 800807e:	bd10      	pop	{r4, pc}
 8008080:	00300200 	.word	0x00300200
 8008084:	40010c00 	.word	0x40010c00
 8008088:	01020217 	.word	0x01020217

0800808c <system_control_get_state>:

// Returns control pin state as a uint8 bitfield. Each bit indicates the input pin state, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Bitfield organization is
// defined by the CONTROL_PIN_INDEX in the header file.
uint8_t system_control_get_state()
{
 800808c:	b508      	push	{r3, lr}
#endif
#ifdef WIN32
  uint8_t pin = 0;
#endif
#ifdef STM32F103C8
  uint16_t pin= GPIO_ReadInputData(CONTROL_PIN_PORT);
 800808e:	4809      	ldr	r0, [pc, #36]	; (80080b4 <system_control_get_state+0x28>)
 8008090:	f7f9 f922 	bl	80012d8 <GPIO_ReadInputData>
#endif
  #ifdef INVERT_CONTROL_PIN_MASK
    pin ^= INVERT_CONTROL_PIN_MASK;
  #endif
  if (pin) {
 8008094:	4603      	mov	r3, r0
 8008096:	b158      	cbz	r0, 80080b0 <system_control_get_state+0x24>
    #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
      if (bit_isfalse(pin,(1<<CONTROL_SAFETY_DOOR_BIT))) { control_state |= CONTROL_PIN_INDEX_SAFETY_DOOR; }
    #endif
    if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
 8008098:	f080 0020 	eor.w	r0, r0, #32
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 800809c:	065a      	lsls	r2, r3, #25
    if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
 800809e:	f3c0 1040 	ubfx	r0, r0, #5, #1
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 80080a2:	bf58      	it	pl
 80080a4:	f040 0002 	orrpl.w	r0, r0, #2
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 80080a8:	061b      	lsls	r3, r3, #24
 80080aa:	d401      	bmi.n	80080b0 <system_control_get_state+0x24>
 80080ac:	f040 0004 	orr.w	r0, r0, #4
  }
  return(control_state);
}
 80080b0:	bd08      	pop	{r3, pc}
 80080b2:	bf00      	nop
 80080b4:	40010c00 	.word	0x40010c00

080080b8 <EXTI9_5_IRQHandler>:
}
#endif
#if defined (STM32F103C8)
void EXTI9_5_IRQHandler(void)
{
    EXTI_ClearITPendingBit((1 << CONTROL_RESET_BIT) | (1 << CONTROL_FEED_HOLD_BIT) | (1 << CONTROL_CYCLE_START_BIT) | (1 << CONTROL_SAFETY_DOOR_BIT));
 80080b8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
{
 80080bc:	b508      	push	{r3, lr}
    EXTI_ClearITPendingBit((1 << CONTROL_RESET_BIT) | (1 << CONTROL_FEED_HOLD_BIT) | (1 << CONTROL_CYCLE_START_BIT) | (1 << CONTROL_SAFETY_DOOR_BIT));
 80080be:	f7f8 fe99 	bl	8000df4 <EXTI_ClearITPendingBit>
  uint16_t pin= GPIO_ReadInputData(CONTROL_PIN_PORT);
 80080c2:	4810      	ldr	r0, [pc, #64]	; (8008104 <EXTI9_5_IRQHandler+0x4c>)
 80080c4:	f7f9 f908 	bl	80012d8 <GPIO_ReadInputData>
  if (pin) {
 80080c8:	b140      	cbz	r0, 80080dc <EXTI9_5_IRQHandler+0x24>
    if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
 80080ca:	0683      	lsls	r3, r0, #26
 80080cc:	d407      	bmi.n	80080de <EXTI9_5_IRQHandler+0x26>
	uint8_t pin = system_control_get_state();
	if (pin) 
	{ 
		if (bit_istrue(pin,CONTROL_PIN_INDEX_RESET)) 
		{
			mc_reset();
 80080ce:	f7fb fcaf 	bl	8003a30 <mc_reset>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 80080d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80080d6:	4b0c      	ldr	r3, [pc, #48]	; (8008108 <EXTI9_5_IRQHandler+0x50>)
 80080d8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
		}
#endif
		NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
}
}
 80080dc:	bd08      	pop	{r3, pc}
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 80080de:	0641      	lsls	r1, r0, #25
 80080e0:	d407      	bmi.n	80080f2 <EXTI9_5_IRQHandler+0x3a>
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 80080e2:	0603      	lsls	r3, r0, #24
 80080e4:	d507      	bpl.n	80080f6 <EXTI9_5_IRQHandler+0x3e>
			bit_true(sys_rt_exec_state, EXEC_FEED_HOLD);
 80080e6:	4a09      	ldr	r2, [pc, #36]	; (800810c <EXTI9_5_IRQHandler+0x54>)
 80080e8:	7813      	ldrb	r3, [r2, #0]
 80080ea:	f043 0308 	orr.w	r3, r3, #8
 80080ee:	7013      	strb	r3, [r2, #0]
 80080f0:	e7ef      	b.n	80080d2 <EXTI9_5_IRQHandler+0x1a>
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 80080f2:	0602      	lsls	r2, r0, #24
 80080f4:	d4f2      	bmi.n	80080dc <EXTI9_5_IRQHandler+0x24>
			bit_true(sys_rt_exec_state, EXEC_CYCLE_START);
 80080f6:	4a05      	ldr	r2, [pc, #20]	; (800810c <EXTI9_5_IRQHandler+0x54>)
 80080f8:	7813      	ldrb	r3, [r2, #0]
 80080fa:	f043 0302 	orr.w	r3, r3, #2
 80080fe:	7013      	strb	r3, [r2, #0]
 8008100:	e7e7      	b.n	80080d2 <EXTI9_5_IRQHandler+0x1a>
 8008102:	bf00      	nop
 8008104:	40010c00 	.word	0x40010c00
 8008108:	e000e100 	.word	0xe000e100
 800810c:	20000a08 	.word	0x20000a08

08008110 <system_check_safety_door_ajar>:
  #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
    return(system_control_get_state() & CONTROL_PIN_INDEX_SAFETY_DOOR);
  #else
    return(false); // Input pin not enabled, so just return that it's closed.
  #endif
}
 8008110:	2000      	movs	r0, #0
 8008112:	4770      	bx	lr

08008114 <system_execute_startup>:


// Executes user startup script, if stored.
void system_execute_startup(char *line)
{
 8008114:	b538      	push	{r3, r4, r5, lr}
 8008116:	4604      	mov	r4, r0
 8008118:	2500      	movs	r5, #0
  uint8_t n;
  for (n=0; n < N_STARTUP_LINE; n++) {
    if (!(settings_read_startup_line(n, line))) {
 800811a:	4621      	mov	r1, r4
 800811c:	4628      	mov	r0, r5
 800811e:	f7fe fb41 	bl	80067a4 <settings_read_startup_line>
 8008122:	4603      	mov	r3, r0
 8008124:	b158      	cbz	r0, 800813e <system_execute_startup+0x2a>
      line[0] = 0;
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
    } else {
      if (line[0] != 0) {
 8008126:	7823      	ldrb	r3, [r4, #0]
 8008128:	b97b      	cbnz	r3, 800814a <system_execute_startup+0x36>
  for (n=0; n < N_STARTUP_LINE; n++) {
 800812a:	b105      	cbz	r5, 800812e <system_execute_startup+0x1a>
        uint8_t status_code = gc_execute_line(line);
        report_execute_startup_message(line,status_code);
      }
    }
  }
}
 800812c:	bd38      	pop	{r3, r4, r5, pc}
 800812e:	2501      	movs	r5, #1
    if (!(settings_read_startup_line(n, line))) {
 8008130:	4621      	mov	r1, r4
 8008132:	4628      	mov	r0, r5
 8008134:	f7fe fb36 	bl	80067a4 <settings_read_startup_line>
 8008138:	4603      	mov	r3, r0
 800813a:	2800      	cmp	r0, #0
 800813c:	d1f3      	bne.n	8008126 <system_execute_startup+0x12>
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
 800813e:	2107      	movs	r1, #7
 8008140:	4620      	mov	r0, r4
      line[0] = 0;
 8008142:	7023      	strb	r3, [r4, #0]
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
 8008144:	f7fd feee 	bl	8005f24 <report_execute_startup_message>
 8008148:	e7ef      	b.n	800812a <system_execute_startup+0x16>
        uint8_t status_code = gc_execute_line(line);
 800814a:	4620      	mov	r0, r4
 800814c:	f7f9 fb7a 	bl	8001844 <gc_execute_line>
 8008150:	4601      	mov	r1, r0
        report_execute_startup_message(line,status_code);
 8008152:	4620      	mov	r0, r4
 8008154:	f7fd fee6 	bl	8005f24 <report_execute_startup_message>
 8008158:	e7e7      	b.n	800812a <system_execute_startup+0x16>
 800815a:	bf00      	nop

0800815c <system_execute_line>:
// the lines that are processed afterward, not necessarily real-time during a cycle,
// since there are motions already stored in the buffer. However, this 'lag' should not
// be an issue, since these commands are not typically used during a cycle.
uint8_t system_execute_line(char *line)
{
  uint8_t char_counter = 1;
 800815c:	2301      	movs	r3, #1
{
 800815e:	b570      	push	{r4, r5, r6, lr}
  uint8_t helper_var = 0; // Helper variable
  float parameter, value;
  switch( line[char_counter] ) {
 8008160:	7844      	ldrb	r4, [r0, #1]
{
 8008162:	b084      	sub	sp, #16
  switch( line[char_counter] ) {
 8008164:	2c58      	cmp	r4, #88	; 0x58
{
 8008166:	4605      	mov	r5, r0
  uint8_t char_counter = 1;
 8008168:	f88d 3007 	strb.w	r3, [sp, #7]
  switch( line[char_counter] ) {
 800816c:	d81a      	bhi.n	80081a4 <system_execute_line+0x48>
 800816e:	2c42      	cmp	r4, #66	; 0x42
 8008170:	d805      	bhi.n	800817e <system_execute_line+0x22>
 8008172:	b9ac      	cbnz	r4, 80081a0 <system_execute_line+0x44>
    case 0 : report_grbl_help(); break;
 8008174:	f7fd fb2c 	bl	80057d0 <report_grbl_help>
            return(settings_store_global_setting((uint8_t)parameter, value));
          }
      }
  }
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
}
 8008178:	4620      	mov	r0, r4
 800817a:	b004      	add	sp, #16
 800817c:	bd70      	pop	{r4, r5, r6, pc}
  switch( line[char_counter] ) {
 800817e:	f1a4 0343 	sub.w	r3, r4, #67	; 0x43
 8008182:	2b15      	cmp	r3, #21
 8008184:	d80e      	bhi.n	80081a4 <system_execute_line+0x48>
 8008186:	e8df f003 	tbb	[pc, r3]
 800818a:	0d75      	.short	0x0d75
 800818c:	0d750d0d 	.word	0x0d750d0d
 8008190:	0d0d280d 	.word	0x0d0d280d
 8008194:	0d0d0d0d 	.word	0x0d0d0d0d
 8008198:	0d0d0d0d 	.word	0x0d0d0d0d
 800819c:	750d0d0d 	.word	0x750d0d0d
 80081a0:	2c24      	cmp	r4, #36	; 0x24
 80081a2:	d02a      	beq.n	80081fa <system_execute_line+0x9e>
      if ( !(sys.state == STATE_IDLE || sys.state == STATE_ALARM) ) { return(STATUS_IDLE_ERROR); }
 80081a4:	4ea5      	ldr	r6, [pc, #660]	; (800843c <system_execute_line+0x2e0>)
 80081a6:	7833      	ldrb	r3, [r6, #0]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d81b      	bhi.n	80081e4 <system_execute_line+0x88>
      switch( line[1] ) {
 80081ac:	2c23      	cmp	r4, #35	; 0x23
 80081ae:	f000 811d 	beq.w	80083ec <system_execute_line+0x290>
 80081b2:	3c48      	subs	r4, #72	; 0x48
 80081b4:	b2e2      	uxtb	r2, r4
 80081b6:	2a0b      	cmp	r2, #11
 80081b8:	d82e      	bhi.n	8008218 <system_execute_line+0xbc>
 80081ba:	2c0b      	cmp	r4, #11
 80081bc:	d82c      	bhi.n	8008218 <system_execute_line+0xbc>
 80081be:	e8df f014 	tbh	[pc, r4, lsl #1]
 80081c2:	00d2      	.short	0x00d2
 80081c4:	002b00b9 	.word	0x002b00b9
 80081c8:	002b002b 	.word	0x002b002b
 80081cc:	009b002b 	.word	0x009b002b
 80081d0:	002b002b 	.word	0x002b002b
 80081d4:	007d002b 	.word	0x007d002b
 80081d8:	006c      	.short	0x006c
      if (sys.state != STATE_IDLE && sys.state != STATE_JOG) { return(STATUS_IDLE_ERROR); }
 80081da:	4b98      	ldr	r3, [pc, #608]	; (800843c <system_execute_line+0x2e0>)
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 80081e2:	d003      	beq.n	80081ec <system_execute_line+0x90>
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 80081e4:	2408      	movs	r4, #8
}
 80081e6:	4620      	mov	r0, r4
 80081e8:	b004      	add	sp, #16
 80081ea:	bd70      	pop	{r4, r5, r6, pc}
      if(line[2] != '=') { return(STATUS_INVALID_STATEMENT); }
 80081ec:	7883      	ldrb	r3, [r0, #2]
 80081ee:	2b3d      	cmp	r3, #61	; 0x3d
 80081f0:	d00e      	beq.n	8008210 <system_execute_line+0xb4>
 80081f2:	2403      	movs	r4, #3
}
 80081f4:	4620      	mov	r0, r4
 80081f6:	b004      	add	sp, #16
 80081f8:	bd70      	pop	{r4, r5, r6, pc}
      if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 80081fa:	7883      	ldrb	r3, [r0, #2]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1f8      	bne.n	80081f2 <system_execute_line+0x96>
          if ( sys.state & (STATE_CYCLE | STATE_HOLD) ) { return(STATUS_IDLE_ERROR); } // Block during cycle. Takes too long to print.
 8008200:	4b8e      	ldr	r3, [pc, #568]	; (800843c <system_execute_line+0x2e0>)
 8008202:	781c      	ldrb	r4, [r3, #0]
 8008204:	f014 0418 	ands.w	r4, r4, #24
 8008208:	d1ec      	bne.n	80081e4 <system_execute_line+0x88>
          else { report_grbl_settings(); }
 800820a:	f7fd faef 	bl	80057ec <report_grbl_settings>
          break;
 800820e:	e7b3      	b.n	8008178 <system_execute_line+0x1c>
      return(gc_execute_line(line)); // NOTE: $J= is ignored inside g-code parser and used to detect jog motions.
 8008210:	f7f9 fb18 	bl	8001844 <gc_execute_line>
 8008214:	4604      	mov	r4, r0
 8008216:	e7af      	b.n	8008178 <system_execute_line+0x1c>
 8008218:	2400      	movs	r4, #0
          if(!read_float(line, &char_counter, &parameter)) { return(STATUS_BAD_NUMBER_FORMAT); }
 800821a:	4628      	mov	r0, r5
 800821c:	f10d 0107 	add.w	r1, sp, #7
 8008220:	aa02      	add	r2, sp, #8
 8008222:	f7fb fc35 	bl	8003a90 <read_float>
 8008226:	2800      	cmp	r0, #0
 8008228:	f000 80c3 	beq.w	80083b2 <system_execute_line+0x256>
          if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 800822c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008230:	1c53      	adds	r3, r2, #1
 8008232:	5caa      	ldrb	r2, [r5, r2]
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2a3d      	cmp	r2, #61	; 0x3d
 8008238:	f88d 3007 	strb.w	r3, [sp, #7]
 800823c:	d1d9      	bne.n	80081f2 <system_execute_line+0x96>
          if (helper_var) { // Store startup line
 800823e:	2c00      	cmp	r4, #0
 8008240:	f000 8102 	beq.w	8008448 <system_execute_line+0x2ec>
              line[char_counter-helper_var] = line[char_counter];
 8008244:	4618      	mov	r0, r3
 8008246:	5cea      	ldrb	r2, [r5, r3]
 8008248:	1a19      	subs	r1, r3, r0
            } while (line[char_counter++] != 0);
 800824a:	3301      	adds	r3, #1
              line[char_counter-helper_var] = line[char_counter];
 800824c:	546a      	strb	r2, [r5, r1]
            } while (line[char_counter++] != 0);
 800824e:	b2db      	uxtb	r3, r3
 8008250:	2a00      	cmp	r2, #0
 8008252:	d1f8      	bne.n	8008246 <system_execute_line+0xea>
            helper_var = gc_execute_line(line); // Set helper_var to returned status code.
 8008254:	4628      	mov	r0, r5
 8008256:	f88d 3007 	strb.w	r3, [sp, #7]
 800825a:	f7f9 faf3 	bl	8001844 <gc_execute_line>
            if (helper_var) { return(helper_var); }
 800825e:	4604      	mov	r4, r0
 8008260:	2800      	cmp	r0, #0
 8008262:	d189      	bne.n	8008178 <system_execute_line+0x1c>
              helper_var = truncf(parameter); // Set helper_var to int value of parameter
 8008264:	9802      	ldr	r0, [sp, #8]
 8008266:	f7f8 fd17 	bl	8000c98 <__aeabi_f2uiz>
              settings_store_startup_line(helper_var,line);
 800826a:	4629      	mov	r1, r5
 800826c:	b2c0      	uxtb	r0, r0
 800826e:	f7fe f9d7 	bl	8006620 <settings_store_startup_line>
 8008272:	e781      	b.n	8008178 <system_execute_line+0x1c>
      if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 8008274:	7885      	ldrb	r5, [r0, #2]
 8008276:	2d00      	cmp	r5, #0
 8008278:	d1bb      	bne.n	80081f2 <system_execute_line+0x96>
      switch( line[1] ) {
 800827a:	2c47      	cmp	r4, #71	; 0x47
 800827c:	f000 80b3 	beq.w	80083e6 <system_execute_line+0x28a>
 8008280:	f240 80a1 	bls.w	80083c6 <system_execute_line+0x26a>
 8008284:	2c58      	cmp	r4, #88	; 0x58
 8008286:	d104      	bne.n	8008292 <system_execute_line+0x136>
          if (sys.state == STATE_ALARM) {
 8008288:	4e6c      	ldr	r6, [pc, #432]	; (800843c <system_execute_line+0x2e0>)
 800828a:	7833      	ldrb	r3, [r6, #0]
 800828c:	2b01      	cmp	r3, #1
 800828e:	f000 80c0 	beq.w	8008412 <system_execute_line+0x2b6>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 8008292:	2400      	movs	r4, #0
}
 8008294:	4620      	mov	r0, r4
 8008296:	b004      	add	sp, #16
 8008298:	bd70      	pop	{r4, r5, r6, pc}
          if ((line[2] != 'L') || (line[3] != 'P') || (line[4] != 0)) { return(STATUS_INVALID_STATEMENT); }
 800829a:	78ab      	ldrb	r3, [r5, #2]
 800829c:	2b4c      	cmp	r3, #76	; 0x4c
 800829e:	d1a8      	bne.n	80081f2 <system_execute_line+0x96>
 80082a0:	78eb      	ldrb	r3, [r5, #3]
 80082a2:	2b50      	cmp	r3, #80	; 0x50
 80082a4:	d1a5      	bne.n	80081f2 <system_execute_line+0x96>
 80082a6:	792c      	ldrb	r4, [r5, #4]
 80082a8:	2c00      	cmp	r4, #0
 80082aa:	d1a2      	bne.n	80081f2 <system_execute_line+0x96>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80082ac:	b672      	cpsid	i
  sys_rt_exec_state |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_state |= (mask);
 80082ae:	4a64      	ldr	r2, [pc, #400]	; (8008440 <system_execute_line+0x2e4>)
 80082b0:	7813      	ldrb	r3, [r2, #0]
 80082b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082b6:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i");
 80082b8:	b662      	cpsie	i
  __enable_irq();
#endif
}
 80082ba:	e75d      	b.n	8008178 <system_execute_line+0x1c>
          if ((line[2] != 'S') || (line[3] != 'T') || (line[4] != '=') || (line[6] != 0)) { return(STATUS_INVALID_STATEMENT); }
 80082bc:	78ab      	ldrb	r3, [r5, #2]
 80082be:	2b53      	cmp	r3, #83	; 0x53
 80082c0:	d197      	bne.n	80081f2 <system_execute_line+0x96>
 80082c2:	78eb      	ldrb	r3, [r5, #3]
 80082c4:	2b54      	cmp	r3, #84	; 0x54
 80082c6:	d194      	bne.n	80081f2 <system_execute_line+0x96>
 80082c8:	792b      	ldrb	r3, [r5, #4]
 80082ca:	2b3d      	cmp	r3, #61	; 0x3d
 80082cc:	d191      	bne.n	80081f2 <system_execute_line+0x96>
 80082ce:	79ac      	ldrb	r4, [r5, #6]
 80082d0:	2c00      	cmp	r4, #0
 80082d2:	d18e      	bne.n	80081f2 <system_execute_line+0x96>
          switch (line[5]) {
 80082d4:	796b      	ldrb	r3, [r5, #5]
 80082d6:	2b24      	cmp	r3, #36	; 0x24
 80082d8:	f000 80dc 	beq.w	8008494 <system_execute_line+0x338>
 80082dc:	2b2a      	cmp	r3, #42	; 0x2a
 80082de:	f000 80d5 	beq.w	800848c <system_execute_line+0x330>
 80082e2:	2b23      	cmp	r3, #35	; 0x23
 80082e4:	d185      	bne.n	80081f2 <system_execute_line+0x96>
              case '#': settings_restore(SETTINGS_RESTORE_PARAMETERS); break;
 80082e6:	2002      	movs	r0, #2
 80082e8:	f7fe f9c2 	bl	8006670 <settings_restore>
          report_feedback_message(MESSAGE_RESTORE_DEFAULTS);
 80082ec:	2009      	movs	r0, #9
 80082ee:	f7fd fa0b 	bl	8005708 <report_feedback_message>
          mc_reset(); // Force reset to ensure settings are initialized correctly.
 80082f2:	f7fb fb9d 	bl	8003a30 <mc_reset>
          break;
 80082f6:	e73f      	b.n	8008178 <system_execute_line+0x1c>
          if ( line[++char_counter] == 0 ) { // Print startup lines
 80082f8:	2202      	movs	r2, #2
 80082fa:	78ac      	ldrb	r4, [r5, #2]
 80082fc:	f88d 2007 	strb.w	r2, [sp, #7]
 8008300:	2c00      	cmp	r4, #0
 8008302:	d17a      	bne.n	80083fa <system_execute_line+0x29e>
              if (!(settings_read_startup_line(helper_var, line))) {
 8008304:	4629      	mov	r1, r5
 8008306:	4620      	mov	r0, r4
 8008308:	f7fe fa4c 	bl	80067a4 <settings_read_startup_line>
 800830c:	2800      	cmp	r0, #0
 800830e:	f000 8091 	beq.w	8008434 <system_execute_line+0x2d8>
                report_startup_line(helper_var,line);
 8008312:	4629      	mov	r1, r5
 8008314:	4620      	mov	r0, r4
 8008316:	f7fd fded 	bl	8005ef4 <report_startup_line>
              if (!(settings_read_startup_line(helper_var, line))) {
 800831a:	4629      	mov	r1, r5
 800831c:	2001      	movs	r0, #1
 800831e:	f7fe fa41 	bl	80067a4 <settings_read_startup_line>
 8008322:	4604      	mov	r4, r0
 8008324:	2800      	cmp	r0, #0
 8008326:	f000 8081 	beq.w	800842c <system_execute_line+0x2d0>
                report_startup_line(helper_var,line);
 800832a:	4629      	mov	r1, r5
 800832c:	2001      	movs	r0, #1
 800832e:	f7fd fde1 	bl	8005ef4 <report_startup_line>
 8008332:	e7ae      	b.n	8008292 <system_execute_line+0x136>
          if ( line[++char_counter] == 0 ) {
 8008334:	2302      	movs	r3, #2
 8008336:	78ac      	ldrb	r4, [r5, #2]
 8008338:	f88d 3007 	strb.w	r3, [sp, #7]
 800833c:	2c00      	cmp	r4, #0
 800833e:	d061      	beq.n	8008404 <system_execute_line+0x2a8>
              if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 8008340:	2c3d      	cmp	r4, #61	; 0x3d
 8008342:	f04f 0303 	mov.w	r3, #3
 8008346:	f47f af54 	bne.w	80081f2 <system_execute_line+0x96>
                line[char_counter-helper_var] = line[char_counter];
 800834a:	5cec      	ldrb	r4, [r5, r3]
 800834c:	18ea      	adds	r2, r5, r3
              } while (line[char_counter++] != 0);
 800834e:	3301      	adds	r3, #1
                line[char_counter-helper_var] = line[char_counter];
 8008350:	f802 4c03 	strb.w	r4, [r2, #-3]
              } while (line[char_counter++] != 0);
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2c00      	cmp	r4, #0
 8008358:	d1f7      	bne.n	800834a <system_execute_line+0x1ee>
              settings_store_build_info(line);
 800835a:	4628      	mov	r0, r5
 800835c:	f88d 3007 	strb.w	r3, [sp, #7]
 8008360:	f7fe f970 	bl	8006644 <settings_store_build_info>
 8008364:	e708      	b.n	8008178 <system_execute_line+0x1c>
          if (bit_isfalse(settings.flags,BITFLAG_HOMING_ENABLE)) {return(STATUS_SETTING_DISABLED); }
 8008366:	4b37      	ldr	r3, [pc, #220]	; (8008444 <system_execute_line+0x2e8>)
 8008368:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800836c:	06db      	lsls	r3, r3, #27
 800836e:	f140 808b 	bpl.w	8008488 <system_execute_line+0x32c>
          sys.state = STATE_HOMING; // Set system state variable
 8008372:	2304      	movs	r3, #4
          if (line[2] == 0) {
 8008374:	78a8      	ldrb	r0, [r5, #2]
          sys.state = STATE_HOMING; // Set system state variable
 8008376:	7033      	strb	r3, [r6, #0]
          if (line[2] == 0) {
 8008378:	2800      	cmp	r0, #0
 800837a:	f47f af3a 	bne.w	80081f2 <system_execute_line+0x96>
            mc_homing_cycle(HOMING_CYCLE_ALL);
 800837e:	f7fb fac9 	bl	8003914 <mc_homing_cycle>
          if (!sys.abort) {  // Execute startup scripts after successful homing.
 8008382:	7873      	ldrb	r3, [r6, #1]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d184      	bne.n	8008292 <system_execute_line+0x136>
            sys.state = STATE_IDLE; // Set to IDLE when complete.
 8008388:	7033      	strb	r3, [r6, #0]
            st_go_idle(); // Set steppers to the settings idle state before returning.
 800838a:	f7fe fe57 	bl	800703c <st_go_idle>
            if (line[2] == 0) { system_execute_startup(line); }
 800838e:	78ac      	ldrb	r4, [r5, #2]
 8008390:	2c00      	cmp	r4, #0
 8008392:	f47f af7e 	bne.w	8008292 <system_execute_line+0x136>
    if (!(settings_read_startup_line(n, line))) {
 8008396:	4629      	mov	r1, r5
 8008398:	4620      	mov	r0, r4
 800839a:	f7fe fa03 	bl	80067a4 <settings_read_startup_line>
 800839e:	4603      	mov	r3, r0
 80083a0:	2800      	cmp	r0, #0
 80083a2:	d07b      	beq.n	800849c <system_execute_line+0x340>
      if (line[0] != 0) {
 80083a4:	782b      	ldrb	r3, [r5, #0]
 80083a6:	b933      	cbnz	r3, 80083b6 <system_execute_line+0x25a>
  for (n=0; n < N_STARTUP_LINE; n++) {
 80083a8:	2c00      	cmp	r4, #0
 80083aa:	f47f af72 	bne.w	8008292 <system_execute_line+0x136>
 80083ae:	2401      	movs	r4, #1
 80083b0:	e7f1      	b.n	8008396 <system_execute_line+0x23a>
          if(!read_float(line, &char_counter, &parameter)) { return(STATUS_BAD_NUMBER_FORMAT); }
 80083b2:	2402      	movs	r4, #2
 80083b4:	e6e0      	b.n	8008178 <system_execute_line+0x1c>
        uint8_t status_code = gc_execute_line(line);
 80083b6:	4628      	mov	r0, r5
 80083b8:	f7f9 fa44 	bl	8001844 <gc_execute_line>
 80083bc:	4601      	mov	r1, r0
        report_execute_startup_message(line,status_code);
 80083be:	4628      	mov	r0, r5
 80083c0:	f7fd fdb0 	bl	8005f24 <report_execute_startup_message>
 80083c4:	e7f0      	b.n	80083a8 <system_execute_line+0x24c>
 80083c6:	2c43      	cmp	r4, #67	; 0x43
 80083c8:	f47f af63 	bne.w	8008292 <system_execute_line+0x136>
          if ( sys.state == STATE_CHECK_MODE ) {
 80083cc:	4b1b      	ldr	r3, [pc, #108]	; (800843c <system_execute_line+0x2e0>)
 80083ce:	781c      	ldrb	r4, [r3, #0]
 80083d0:	2c02      	cmp	r4, #2
 80083d2:	d024      	beq.n	800841e <system_execute_line+0x2c2>
            if (sys.state) { return(STATUS_IDLE_ERROR); } // Requires no alarm mode.
 80083d4:	2c00      	cmp	r4, #0
 80083d6:	f47f af05 	bne.w	80081e4 <system_execute_line+0x88>
            sys.state = STATE_CHECK_MODE;
 80083da:	2202      	movs	r2, #2
            report_feedback_message(MESSAGE_ENABLED);
 80083dc:	2004      	movs	r0, #4
            sys.state = STATE_CHECK_MODE;
 80083de:	701a      	strb	r2, [r3, #0]
            report_feedback_message(MESSAGE_ENABLED);
 80083e0:	f7fd f992 	bl	8005708 <report_feedback_message>
 80083e4:	e6c8      	b.n	8008178 <system_execute_line+0x1c>
          report_gcode_modes();
 80083e6:	f7fd fccb 	bl	8005d80 <report_gcode_modes>
          break;
 80083ea:	e752      	b.n	8008292 <system_execute_line+0x136>
          if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 80083ec:	78ac      	ldrb	r4, [r5, #2]
 80083ee:	2c00      	cmp	r4, #0
 80083f0:	f47f aeff 	bne.w	80081f2 <system_execute_line+0x96>
          else { report_ngc_parameters(); }
 80083f4:	f7fd fc18 	bl	8005c28 <report_ngc_parameters>
          break;
 80083f8:	e6be      	b.n	8008178 <system_execute_line+0x1c>
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f47f aef2 	bne.w	80081e4 <system_execute_line+0x88>
            helper_var = true;  // Set helper_var to flag storing method.
 8008400:	2401      	movs	r4, #1
 8008402:	e70a      	b.n	800821a <system_execute_line+0xbe>
            settings_read_build_info(line);
 8008404:	4628      	mov	r0, r5
 8008406:	f7fe f9e9 	bl	80067dc <settings_read_build_info>
            report_build_info(line);
 800840a:	4628      	mov	r0, r5
 800840c:	f7fd fdae 	bl	8005f6c <report_build_info>
 8008410:	e6b2      	b.n	8008178 <system_execute_line+0x1c>
            report_feedback_message(MESSAGE_ALARM_UNLOCK);
 8008412:	2003      	movs	r0, #3
 8008414:	f7fd f978 	bl	8005708 <report_feedback_message>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 8008418:	462c      	mov	r4, r5
            sys.state = STATE_IDLE;
 800841a:	7035      	strb	r5, [r6, #0]
 800841c:	e6ac      	b.n	8008178 <system_execute_line+0x1c>
            mc_reset();
 800841e:	f7fb fb07 	bl	8003a30 <mc_reset>
            report_feedback_message(MESSAGE_DISABLED);
 8008422:	2005      	movs	r0, #5
 8008424:	f7fd f970 	bl	8005708 <report_feedback_message>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 8008428:	462c      	mov	r4, r5
 800842a:	e6a5      	b.n	8008178 <system_execute_line+0x1c>
                report_status_message(STATUS_SETTING_READ_FAIL);
 800842c:	2007      	movs	r0, #7
 800842e:	f7fd f93d 	bl	80056ac <report_status_message>
 8008432:	e6a1      	b.n	8008178 <system_execute_line+0x1c>
 8008434:	2007      	movs	r0, #7
 8008436:	f7fd f939 	bl	80056ac <report_status_message>
 800843a:	e76e      	b.n	800831a <system_execute_line+0x1be>
 800843c:	200009d0 	.word	0x200009d0
 8008440:	20000a08 	.word	0x20000a08
 8008444:	200013ec 	.word	0x200013ec
            if(!read_float(line, &char_counter, &value)) { return(STATUS_BAD_NUMBER_FORMAT); }
 8008448:	4628      	mov	r0, r5
 800844a:	f10d 0107 	add.w	r1, sp, #7
 800844e:	aa03      	add	r2, sp, #12
 8008450:	f7fb fb1e 	bl	8003a90 <read_float>
 8008454:	2800      	cmp	r0, #0
 8008456:	d0ac      	beq.n	80083b2 <system_execute_line+0x256>
            if((line[char_counter] != 0) || (parameter > 255)) { return(STATUS_INVALID_STATEMENT); }
 8008458:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800845c:	5ceb      	ldrb	r3, [r5, r3]
 800845e:	2b00      	cmp	r3, #0
 8008460:	f47f aec7 	bne.w	80081f2 <system_execute_line+0x96>
 8008464:	9c02      	ldr	r4, [sp, #8]
 8008466:	4910      	ldr	r1, [pc, #64]	; (80084a8 <system_execute_line+0x34c>)
 8008468:	4620      	mov	r0, r4
 800846a:	f7f8 fbcf 	bl	8000c0c <__aeabi_fcmpgt>
 800846e:	2800      	cmp	r0, #0
 8008470:	f47f aebf 	bne.w	80081f2 <system_execute_line+0x96>
            return(settings_store_global_setting((uint8_t)parameter, value));
 8008474:	4620      	mov	r0, r4
 8008476:	f7f8 fc0f 	bl	8000c98 <__aeabi_f2uiz>
 800847a:	9d03      	ldr	r5, [sp, #12]
 800847c:	b2c0      	uxtb	r0, r0
 800847e:	4629      	mov	r1, r5
 8008480:	f7fe f9de 	bl	8006840 <settings_store_global_setting>
 8008484:	4604      	mov	r4, r0
 8008486:	e677      	b.n	8008178 <system_execute_line+0x1c>
          if (bit_isfalse(settings.flags,BITFLAG_HOMING_ENABLE)) {return(STATUS_SETTING_DISABLED); }
 8008488:	2405      	movs	r4, #5
 800848a:	e675      	b.n	8008178 <system_execute_line+0x1c>
              case '*': settings_restore(SETTINGS_RESTORE_ALL); break;
 800848c:	20ff      	movs	r0, #255	; 0xff
 800848e:	f7fe f8ef 	bl	8006670 <settings_restore>
 8008492:	e72b      	b.n	80082ec <system_execute_line+0x190>
              case '$': settings_restore(SETTINGS_RESTORE_DEFAULTS); break;
 8008494:	2001      	movs	r0, #1
 8008496:	f7fe f8eb 	bl	8006670 <settings_restore>
 800849a:	e727      	b.n	80082ec <system_execute_line+0x190>
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
 800849c:	2107      	movs	r1, #7
 800849e:	4628      	mov	r0, r5
      line[0] = 0;
 80084a0:	702b      	strb	r3, [r5, #0]
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
 80084a2:	f7fd fd3f 	bl	8005f24 <report_execute_startup_message>
 80084a6:	e77f      	b.n	80083a8 <system_execute_line+0x24c>
 80084a8:	437f0000 	.word	0x437f0000

080084ac <system_flag_wco_change>:
{
 80084ac:	b508      	push	{r3, lr}
    protocol_buffer_synchronize();
 80084ae:	f7fd f8e1 	bl	8005674 <protocol_buffer_synchronize>
  sys.report_wco_counter = 0;
 80084b2:	2200      	movs	r2, #0
 80084b4:	4b01      	ldr	r3, [pc, #4]	; (80084bc <system_flag_wco_change+0x10>)
 80084b6:	735a      	strb	r2, [r3, #13]
}
 80084b8:	bd08      	pop	{r3, pc}
 80084ba:	bf00      	nop
 80084bc:	200009d0 	.word	0x200009d0

080084c0 <system_convert_array_steps_to_mpos>:
{
 80084c0:	b570      	push	{r4, r5, r6, lr}
    pos = steps[idx]/settings.steps_per_mm[idx];
 80084c2:	4e11      	ldr	r6, [pc, #68]	; (8008508 <system_convert_array_steps_to_mpos+0x48>)
{
 80084c4:	4604      	mov	r4, r0
    pos = steps[idx]/settings.steps_per_mm[idx];
 80084c6:	6808      	ldr	r0, [r1, #0]
{
 80084c8:	460d      	mov	r5, r1
    pos = steps[idx]/settings.steps_per_mm[idx];
 80084ca:	f7f8 f98f 	bl	80007ec <__aeabi_i2f>
 80084ce:	6831      	ldr	r1, [r6, #0]
 80084d0:	f7f8 fa94 	bl	80009fc <__aeabi_fdiv>
 80084d4:	4603      	mov	r3, r0
 80084d6:	6868      	ldr	r0, [r5, #4]
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 80084d8:	6023      	str	r3, [r4, #0]
    pos = steps[idx]/settings.steps_per_mm[idx];
 80084da:	f7f8 f987 	bl	80007ec <__aeabi_i2f>
 80084de:	6871      	ldr	r1, [r6, #4]
 80084e0:	f7f8 fa8c 	bl	80009fc <__aeabi_fdiv>
 80084e4:	4603      	mov	r3, r0
 80084e6:	68a8      	ldr	r0, [r5, #8]
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 80084e8:	6063      	str	r3, [r4, #4]
    pos = steps[idx]/settings.steps_per_mm[idx];
 80084ea:	f7f8 f97f 	bl	80007ec <__aeabi_i2f>
 80084ee:	68b1      	ldr	r1, [r6, #8]
 80084f0:	f7f8 fa84 	bl	80009fc <__aeabi_fdiv>
 80084f4:	4603      	mov	r3, r0
 80084f6:	68e8      	ldr	r0, [r5, #12]
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 80084f8:	60a3      	str	r3, [r4, #8]
    pos = steps[idx]/settings.steps_per_mm[idx];
 80084fa:	f7f8 f977 	bl	80007ec <__aeabi_i2f>
 80084fe:	68f1      	ldr	r1, [r6, #12]
 8008500:	f7f8 fa7c 	bl	80009fc <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 8008504:	60e0      	str	r0, [r4, #12]
}
 8008506:	bd70      	pop	{r4, r5, r6, pc}
 8008508:	200013ec 	.word	0x200013ec

0800850c <system_check_travel_limits>:
{
 800850c:	b570      	push	{r4, r5, r6, lr}
      if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 800850e:	6806      	ldr	r6, [r0, #0]
{
 8008510:	4604      	mov	r4, r0
      if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 8008512:	2100      	movs	r1, #0
 8008514:	4630      	mov	r0, r6
 8008516:	f7f8 fb79 	bl	8000c0c <__aeabi_fcmpgt>
 800851a:	bb48      	cbnz	r0, 8008570 <system_check_travel_limits+0x64>
 800851c:	4d15      	ldr	r5, [pc, #84]	; (8008574 <system_check_travel_limits+0x68>)
 800851e:	4630      	mov	r0, r6
 8008520:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8008522:	f7f8 fb55 	bl	8000bd0 <__aeabi_fcmplt>
 8008526:	bb18      	cbnz	r0, 8008570 <system_check_travel_limits+0x64>
 8008528:	6866      	ldr	r6, [r4, #4]
 800852a:	2100      	movs	r1, #0
 800852c:	4630      	mov	r0, r6
 800852e:	f7f8 fb6d 	bl	8000c0c <__aeabi_fcmpgt>
 8008532:	b9e8      	cbnz	r0, 8008570 <system_check_travel_limits+0x64>
 8008534:	4630      	mov	r0, r6
 8008536:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8008538:	f7f8 fb4a 	bl	8000bd0 <__aeabi_fcmplt>
 800853c:	b9c0      	cbnz	r0, 8008570 <system_check_travel_limits+0x64>
 800853e:	68a6      	ldr	r6, [r4, #8]
 8008540:	2100      	movs	r1, #0
 8008542:	4630      	mov	r0, r6
 8008544:	f7f8 fb62 	bl	8000c0c <__aeabi_fcmpgt>
 8008548:	b990      	cbnz	r0, 8008570 <system_check_travel_limits+0x64>
 800854a:	4630      	mov	r0, r6
 800854c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800854e:	f7f8 fb3f 	bl	8000bd0 <__aeabi_fcmplt>
 8008552:	b968      	cbnz	r0, 8008570 <system_check_travel_limits+0x64>
 8008554:	68e4      	ldr	r4, [r4, #12]
 8008556:	2100      	movs	r1, #0
 8008558:	4620      	mov	r0, r4
 800855a:	f7f8 fb57 	bl	8000c0c <__aeabi_fcmpgt>
 800855e:	b938      	cbnz	r0, 8008570 <system_check_travel_limits+0x64>
 8008560:	4620      	mov	r0, r4
 8008562:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8008564:	f7f8 fb34 	bl	8000bd0 <__aeabi_fcmplt>
 8008568:	3800      	subs	r0, #0
 800856a:	bf18      	it	ne
 800856c:	2001      	movne	r0, #1
}
 800856e:	bd70      	pop	{r4, r5, r6, pc}
      if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 8008570:	2001      	movs	r0, #1
}
 8008572:	bd70      	pop	{r4, r5, r6, pc}
 8008574:	200013ec 	.word	0x200013ec

08008578 <system_set_exec_state_flag>:
  __ASM volatile ("cpsid i");
 8008578:	b672      	cpsid	i
  sys_rt_exec_state |= (mask);
 800857a:	4a03      	ldr	r2, [pc, #12]	; (8008588 <system_set_exec_state_flag+0x10>)
 800857c:	7813      	ldrb	r3, [r2, #0]
 800857e:	4318      	orrs	r0, r3
 8008580:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8008582:	b662      	cpsie	i
}
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	20000a08 	.word	0x20000a08

0800858c <system_clear_exec_state_flag>:
  __ASM volatile ("cpsid i");
 800858c:	b672      	cpsid	i
  sys_rt_exec_state &= ~(mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_state &= ~(mask);
 800858e:	4a03      	ldr	r2, [pc, #12]	; (800859c <system_clear_exec_state_flag+0x10>)
 8008590:	7813      	ldrb	r3, [r2, #0]
 8008592:	ea23 0000 	bic.w	r0, r3, r0
 8008596:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8008598:	b662      	cpsie	i
  __enable_irq();
#endif
}
 800859a:	4770      	bx	lr
 800859c:	20000a08 	.word	0x20000a08

080085a0 <system_set_exec_alarm>:
  __ASM volatile ("cpsid i");
 80085a0:	b672      	cpsid	i
  sys_rt_exec_alarm = (code);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_alarm = (code);
 80085a2:	4b02      	ldr	r3, [pc, #8]	; (80085ac <system_set_exec_alarm+0xc>)
 80085a4:	7018      	strb	r0, [r3, #0]
  __ASM volatile ("cpsie i");
 80085a6:	b662      	cpsie	i
  __enable_irq();
#endif
}
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	20000a06 	.word	0x20000a06

080085b0 <system_clear_exec_alarm>:
  __ASM volatile ("cpsid i");
 80085b0:	b672      	cpsid	i
  sys_rt_exec_alarm = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_alarm = 0;
 80085b2:	2200      	movs	r2, #0
 80085b4:	4b01      	ldr	r3, [pc, #4]	; (80085bc <system_clear_exec_alarm+0xc>)
 80085b6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 80085b8:	b662      	cpsie	i
  __enable_irq();
#endif
}
 80085ba:	4770      	bx	lr
 80085bc:	20000a06 	.word	0x20000a06

080085c0 <system_set_exec_motion_override_flag>:
  __ASM volatile ("cpsid i");
 80085c0:	b672      	cpsid	i
  sys_rt_exec_motion_override |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_motion_override |= (mask);
 80085c2:	4a03      	ldr	r2, [pc, #12]	; (80085d0 <system_set_exec_motion_override_flag+0x10>)
 80085c4:	7813      	ldrb	r3, [r2, #0]
 80085c6:	4318      	orrs	r0, r3
 80085c8:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 80085ca:	b662      	cpsie	i
  __enable_irq();
#endif
}
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	20000a07 	.word	0x20000a07

080085d4 <system_set_exec_accessory_override_flag>:
  __ASM volatile ("cpsid i");
 80085d4:	b672      	cpsid	i
  sys_rt_exec_accessory_override |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_accessory_override |= (mask);
 80085d6:	4a03      	ldr	r2, [pc, #12]	; (80085e4 <system_set_exec_accessory_override_flag+0x10>)
 80085d8:	7813      	ldrb	r3, [r2, #0]
 80085da:	4318      	orrs	r0, r3
 80085dc:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 80085de:	b662      	cpsie	i
  __enable_irq();
#endif
}
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	20000a05 	.word	0x20000a05

080085e8 <system_clear_exec_motion_overrides>:
  __ASM volatile ("cpsid i");
 80085e8:	b672      	cpsid	i
  sys_rt_exec_motion_override = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_motion_override = 0;
 80085ea:	2200      	movs	r2, #0
 80085ec:	4b01      	ldr	r3, [pc, #4]	; (80085f4 <system_clear_exec_motion_overrides+0xc>)
 80085ee:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 80085f0:	b662      	cpsie	i
  __enable_irq();
#endif
}
 80085f2:	4770      	bx	lr
 80085f4:	20000a07 	.word	0x20000a07

080085f8 <system_clear_exec_accessory_overrides>:
  __ASM volatile ("cpsid i");
 80085f8:	b672      	cpsid	i
  sys_rt_exec_accessory_override = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_accessory_override = 0;
 80085fa:	2200      	movs	r2, #0
 80085fc:	4b01      	ldr	r3, [pc, #4]	; (8008604 <system_clear_exec_accessory_overrides+0xc>)
 80085fe:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 8008600:	b662      	cpsie	i
  __enable_irq();
#endif
}
 8008602:	4770      	bx	lr
 8008604:	20000a05 	.word	0x20000a05

08008608 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008608:	b410      	push	{r4}
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800860a:	2000      	movs	r0, #0
  RCC->CIR = 0x009F0000;
 800860c:	f44f 041f 	mov.w	r4, #10420224	; 0x9f0000
  RCC->CR |= (uint32_t)0x00000001;
 8008610:	4a39      	ldr	r2, [pc, #228]	; (80086f8 <SystemInit+0xf0>)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8008612:	4b3a      	ldr	r3, [pc, #232]	; (80086fc <SystemInit+0xf4>)
  RCC->CR |= (uint32_t)0x00000001;
 8008614:	6811      	ldr	r1, [r2, #0]
{
 8008616:	b083      	sub	sp, #12
  RCC->CR |= (uint32_t)0x00000001;
 8008618:	f041 0101 	orr.w	r1, r1, #1
 800861c:	6011      	str	r1, [r2, #0]
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800861e:	6851      	ldr	r1, [r2, #4]
 8008620:	400b      	ands	r3, r1
 8008622:	6053      	str	r3, [r2, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008624:	6813      	ldr	r3, [r2, #0]
 8008626:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800862a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800862e:	6013      	str	r3, [r2, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008630:	6813      	ldr	r3, [r2, #0]
 8008632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008636:	6013      	str	r3, [r2, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8008638:	6853      	ldr	r3, [r2, #4]
 800863a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800863e:	6053      	str	r3, [r2, #4]
  RCC->CIR = 0x009F0000;
 8008640:	6094      	str	r4, [r2, #8]
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8008642:	9000      	str	r0, [sp, #0]
 8008644:	9001      	str	r0, [sp, #4]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8008646:	6813      	ldr	r3, [r2, #0]
 8008648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800864c:	6013      	str	r3, [r2, #0]
 800864e:	e003      	b.n	8008658 <SystemInit+0x50>
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8008650:	9b00      	ldr	r3, [sp, #0]
 8008652:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008656:	d009      	beq.n	800866c <SystemInit+0x64>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8008658:	6813      	ldr	r3, [r2, #0]
 800865a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800865e:	9301      	str	r3, [sp, #4]
    StartUpCounter++;  
 8008660:	9b00      	ldr	r3, [sp, #0]
 8008662:	3301      	adds	r3, #1
 8008664:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8008666:	9b01      	ldr	r3, [sp, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d0f1      	beq.n	8008650 <SystemInit+0x48>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800866c:	4b22      	ldr	r3, [pc, #136]	; (80086f8 <SystemInit+0xf0>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8008674:	bf18      	it	ne
 8008676:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8008678:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800867a:	9b01      	ldr	r3, [sp, #4]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d006      	beq.n	800868e <SystemInit+0x86>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8008680:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008684:	4b1e      	ldr	r3, [pc, #120]	; (8008700 <SystemInit+0xf8>)
 8008686:	609a      	str	r2, [r3, #8]
}
 8008688:	b003      	add	sp, #12
 800868a:	bc10      	pop	{r4}
 800868c:	4770      	bx	lr
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800868e:	4a1d      	ldr	r2, [pc, #116]	; (8008704 <SystemInit+0xfc>)
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8008690:	4b19      	ldr	r3, [pc, #100]	; (80086f8 <SystemInit+0xf0>)
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8008692:	6811      	ldr	r1, [r2, #0]
 8008694:	f041 0110 	orr.w	r1, r1, #16
 8008698:	6011      	str	r1, [r2, #0]
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800869a:	6811      	ldr	r1, [r2, #0]
 800869c:	f021 0103 	bic.w	r1, r1, #3
 80086a0:	6011      	str	r1, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80086a2:	6811      	ldr	r1, [r2, #0]
 80086a4:	f041 0102 	orr.w	r1, r1, #2
 80086a8:	6011      	str	r1, [r2, #0]
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80086ae:	685a      	ldr	r2, [r3, #4]
 80086b0:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80086b2:	685a      	ldr	r2, [r3, #4]
 80086b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80086b8:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80086c0:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80086c2:	685a      	ldr	r2, [r3, #4]
 80086c4:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 80086c8:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80086d0:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	0192      	lsls	r2, r2, #6
 80086d6:	d5fc      	bpl.n	80086d2 <SystemInit+0xca>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80086d8:	6859      	ldr	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80086da:	4a07      	ldr	r2, [pc, #28]	; (80086f8 <SystemInit+0xf0>)
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80086dc:	f021 0103 	bic.w	r1, r1, #3
 80086e0:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80086e2:	6859      	ldr	r1, [r3, #4]
 80086e4:	f041 0102 	orr.w	r1, r1, #2
 80086e8:	6059      	str	r1, [r3, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80086ea:	6853      	ldr	r3, [r2, #4]
 80086ec:	f003 030c 	and.w	r3, r3, #12
 80086f0:	2b08      	cmp	r3, #8
 80086f2:	d1fa      	bne.n	80086ea <SystemInit+0xe2>
 80086f4:	e7c4      	b.n	8008680 <SystemInit+0x78>
 80086f6:	bf00      	nop
 80086f8:	40021000 	.word	0x40021000
 80086fc:	f8ff0000 	.word	0xf8ff0000
 8008700:	e000ed00 	.word	0xe000ed00
 8008704:	40022000 	.word	0x40022000

08008708 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 8008708:	b508      	push	{r3, lr}
  if (Length == 0)
 800870a:	b138      	cbz	r0, 800871c <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 800870c:	4b06      	ldr	r3, [pc, #24]	; (8008728 <Standard_GetConfiguration+0x20>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 8008714:	4b05      	ldr	r3, [pc, #20]	; (800872c <Standard_GetConfiguration+0x24>)
 8008716:	6818      	ldr	r0, [r3, #0]
 8008718:	300a      	adds	r0, #10
}
 800871a:	bd08      	pop	{r3, pc}
    pInformation->Ctrl_Info.Usb_wLength =
 800871c:	2201      	movs	r2, #1
 800871e:	4b03      	ldr	r3, [pc, #12]	; (800872c <Standard_GetConfiguration+0x24>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	821a      	strh	r2, [r3, #16]
}
 8008724:	bd08      	pop	{r3, pc}
 8008726:	bf00      	nop
 8008728:	20001634 	.word	0x20001634
 800872c:	2000162c 	.word	0x2000162c

08008730 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 8008730:	b508      	push	{r3, lr}
  if (Length == 0)
 8008732:	b138      	cbz	r0, 8008744 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 8008734:	4b06      	ldr	r3, [pc, #24]	; (8008750 <Standard_GetInterface+0x20>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 800873c:	4b05      	ldr	r3, [pc, #20]	; (8008754 <Standard_GetInterface+0x24>)
 800873e:	6818      	ldr	r0, [r3, #0]
 8008740:	300c      	adds	r0, #12
}
 8008742:	bd08      	pop	{r3, pc}
    pInformation->Ctrl_Info.Usb_wLength =
 8008744:	2201      	movs	r2, #1
 8008746:	4b03      	ldr	r3, [pc, #12]	; (8008754 <Standard_GetInterface+0x24>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	821a      	strh	r2, [r3, #16]
}
 800874c:	bd08      	pop	{r3, pc}
 800874e:	bf00      	nop
 8008750:	20001634 	.word	0x20001634
 8008754:	2000162c 	.word	0x2000162c

08008758 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 8008758:	b508      	push	{r3, lr}
  if (Length == 0)
 800875a:	2800      	cmp	r0, #0
 800875c:	d036      	beq.n	80087cc <Standard_GetStatus+0x74>
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 800875e:	2000      	movs	r0, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8008760:	4b1e      	ldr	r3, [pc, #120]	; (80087dc <Standard_GetStatus+0x84>)
  StatusInfo.w = 0;
 8008762:	491f      	ldr	r1, [pc, #124]	; (80087e0 <Standard_GetStatus+0x88>)
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8008764:	681a      	ldr	r2, [r3, #0]
  StatusInfo.w = 0;
 8008766:	8008      	strh	r0, [r1, #0]
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8008768:	7813      	ldrb	r3, [r2, #0]
 800876a:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 800876e:	d016      	beq.n	800879e <Standard_GetStatus+0x46>
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8008770:	2b01      	cmp	r3, #1
 8008772:	d030      	beq.n	80087d6 <Standard_GetStatus+0x7e>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8008774:	2b02      	cmp	r3, #2
 8008776:	d123      	bne.n	80087c0 <Standard_GetStatus+0x68>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 8008778:	7952      	ldrb	r2, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 800877a:	f002 030f 	and.w	r3, r2, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008784:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    if (ValBit(wIndex0, 7))
 8008788:	0612      	lsls	r2, r2, #24
      if (_GetTxStallStatus(Related_Endpoint))
 800878a:	681b      	ldr	r3, [r3, #0]
    if (ValBit(wIndex0, 7))
 800878c:	d419      	bmi.n	80087c2 <Standard_GetStatus+0x6a>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800878e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008796:	d10e      	bne.n	80087b6 <Standard_GetStatus+0x5e>
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 8008798:	2301      	movs	r3, #1
 800879a:	700b      	strb	r3, [r1, #0]
 800879c:	e00b      	b.n	80087b6 <Standard_GetStatus+0x5e>
    uint8_t Feature = pInformation->Current_Feature;
 800879e:	7a52      	ldrb	r2, [r2, #9]
    if (ValBit(Feature, 5))
 80087a0:	f012 0320 	ands.w	r3, r2, #32
 80087a4:	bf1a      	itte	ne
 80087a6:	2003      	movne	r0, #3
 80087a8:	2302      	movne	r3, #2
 80087aa:	2001      	moveq	r0, #1
      SetBit(StatusInfo0, 0);
 80087ac:	f012 0f40 	tst.w	r2, #64	; 0x40
 80087b0:	bf18      	it	ne
 80087b2:	4603      	movne	r3, r0
 80087b4:	700b      	strb	r3, [r1, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 80087b6:	4b0b      	ldr	r3, [pc, #44]	; (80087e4 <Standard_GetStatus+0x8c>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 80087be:	4808      	ldr	r0, [pc, #32]	; (80087e0 <Standard_GetStatus+0x88>)
}
 80087c0:	bd08      	pop	{r3, pc}
      if (_GetTxStallStatus(Related_Endpoint))
 80087c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80087c6:	2b10      	cmp	r3, #16
 80087c8:	d1f5      	bne.n	80087b6 <Standard_GetStatus+0x5e>
 80087ca:	e7e5      	b.n	8008798 <Standard_GetStatus+0x40>
    pInformation->Ctrl_Info.Usb_wLength = 2;
 80087cc:	2202      	movs	r2, #2
 80087ce:	4b03      	ldr	r3, [pc, #12]	; (80087dc <Standard_GetStatus+0x84>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	821a      	strh	r2, [r3, #16]
}
 80087d4:	bd08      	pop	{r3, pc}
    return (uint8_t *)&StatusInfo;
 80087d6:	4608      	mov	r0, r1
}
 80087d8:	bd08      	pop	{r3, pc}
 80087da:	bf00      	nop
 80087dc:	2000162c 	.word	0x2000162c
 80087e0:	20001608 	.word	0x20001608
 80087e4:	20001634 	.word	0x20001634

080087e8 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 80087e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 80087ec:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8008884 <DataStageIn+0x9c>
 80087f0:	f8d8 5000 	ldr.w	r5, [r8]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 80087f4:	8a2c      	ldrh	r4, [r5, #16]
  uint32_t ControlState = pInformation->ControlState;

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 80087f6:	b92c      	cbnz	r4, 8008804 <DataStageIn+0x1c>
  uint32_t ControlState = pInformation->ControlState;
 80087f8:	7a2f      	ldrb	r7, [r5, #8]
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 80087fa:	2f04      	cmp	r7, #4
 80087fc:	d02c      	beq.n	8008858 <DataStageIn+0x70>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 80087fe:	2704      	movs	r7, #4
 8008800:	8aaa      	ldrh	r2, [r5, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8008802:	e004      	b.n	800880e <DataStageIn+0x26>
  Length = pEPinfo->PacketSize;
 8008804:	8aaa      	ldrh	r2, [r5, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8008806:	4294      	cmp	r4, r2
 8008808:	bf94      	ite	ls
 800880a:	2704      	movls	r7, #4
 800880c:	2702      	movhi	r7, #2
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 800880e:	4294      	cmp	r4, r2
 8008810:	bf28      	it	cs
 8008812:	4614      	movcs	r4, r2
 8008814:	69ab      	ldr	r3, [r5, #24]
 8008816:	4620      	mov	r0, r4
 8008818:	4798      	blx	r3
 800881a:	4606      	mov	r6, r0

#ifdef STM32F10X_CL
  PCD_EP_Write (ENDP0, DataBuffer, Length);
#else   
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 800881c:	2000      	movs	r0, #0
 800881e:	f000 fdff 	bl	8009420 <GetEPTxAddr>
 8008822:	4622      	mov	r2, r4
 8008824:	4601      	mov	r1, r0
 8008826:	4630      	mov	r0, r6
 8008828:	f000 fd0c 	bl	8009244 <UserToPMABufferCopy>
#endif /* STM32F10X_CL */ 

  SetEPTxCount(ENDP0, Length);
 800882c:	4621      	mov	r1, r4
 800882e:	2000      	movs	r0, #0
 8008830:	f000 fe16 	bl	8009460 <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8008834:	8a6a      	ldrh	r2, [r5, #18]
  pEPinfo->Usb_wLength -= Length;
 8008836:	8a2b      	ldrh	r3, [r5, #16]
 8008838:	1b1b      	subs	r3, r3, r4
  pEPinfo->Usb_wOffset += Length;
 800883a:	4414      	add	r4, r2
  vSetEPTxStatus(EP_TX_VALID);
 800883c:	2230      	movs	r2, #48	; 0x30
  pEPinfo->Usb_wLength -= Length;
 800883e:	822b      	strh	r3, [r5, #16]
  vSetEPTxStatus(EP_TX_VALID);
 8008840:	4b11      	ldr	r3, [pc, #68]	; (8008888 <DataStageIn+0xa0>)
  pEPinfo->Usb_wOffset += Length;
 8008842:	826c      	strh	r4, [r5, #18]
  vSetEPTxStatus(EP_TX_VALID);
 8008844:	801a      	strh	r2, [r3, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8008846:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800884a:	4b10      	ldr	r3, [pc, #64]	; (800888c <DataStageIn+0xa4>)

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800884c:	f8d8 5000 	ldr.w	r5, [r8]
  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8008850:	801a      	strh	r2, [r3, #0]
  pInformation->ControlState = ControlState;
 8008852:	722f      	strb	r7, [r5, #8]
}
 8008854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Data_Mul_MaxPacketSize == TRUE)
 8008858:	4b0d      	ldr	r3, [pc, #52]	; (8008890 <DataStageIn+0xa8>)
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	2a01      	cmp	r2, #1
 800885e:	d004      	beq.n	800886a <DataStageIn+0x82>
      vSetEPTxStatus(EP_TX_STALL);
 8008860:	2210      	movs	r2, #16
 8008862:	4b09      	ldr	r3, [pc, #36]	; (8008888 <DataStageIn+0xa0>)
 8008864:	2707      	movs	r7, #7
 8008866:	801a      	strh	r2, [r3, #0]
 8008868:	e7f3      	b.n	8008852 <DataStageIn+0x6a>
      Send0LengthData();
 800886a:	2030      	movs	r0, #48	; 0x30
 800886c:	4a09      	ldr	r2, [pc, #36]	; (8008894 <DataStageIn+0xac>)
 800886e:	f8d2 1c50 	ldr.w	r1, [r2, #3152]	; 0xc50
 8008872:	4a09      	ldr	r2, [pc, #36]	; (8008898 <DataStageIn+0xb0>)
 8008874:	b289      	uxth	r1, r1
 8008876:	440a      	add	r2, r1
 8008878:	0052      	lsls	r2, r2, #1
 800887a:	6014      	str	r4, [r2, #0]
      Data_Mul_MaxPacketSize = FALSE;
 800887c:	601c      	str	r4, [r3, #0]
      Send0LengthData();
 800887e:	4b02      	ldr	r3, [pc, #8]	; (8008888 <DataStageIn+0xa0>)
 8008880:	8018      	strh	r0, [r3, #0]
      Data_Mul_MaxPacketSize = FALSE;
 8008882:	e7e6      	b.n	8008852 <DataStageIn+0x6a>
 8008884:	2000162c 	.word	0x2000162c
 8008888:	2000163c 	.word	0x2000163c
 800888c:	2000163a 	.word	0x2000163a
 8008890:	20001604 	.word	0x20001604
 8008894:	40005000 	.word	0x40005000
 8008898:	20003002 	.word	0x20003002

0800889c <Standard_SetInterface>:
{
 800889c:	b538      	push	{r3, r4, r5, lr}
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 800889e:	4a0f      	ldr	r2, [pc, #60]	; (80088dc <Standard_SetInterface+0x40>)
 80088a0:	4c0f      	ldr	r4, [pc, #60]	; (80088e0 <Standard_SetInterface+0x44>)
 80088a2:	6812      	ldr	r2, [r2, #0]
 80088a4:	6823      	ldr	r3, [r4, #0]
 80088a6:	6992      	ldr	r2, [r2, #24]
 80088a8:	78d9      	ldrb	r1, [r3, #3]
 80088aa:	7958      	ldrb	r0, [r3, #5]
 80088ac:	4790      	blx	r2
  if (pInformation->Current_Configuration != 0)
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	7a9a      	ldrb	r2, [r3, #10]
 80088b2:	b17a      	cbz	r2, 80088d4 <Standard_SetInterface+0x38>
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 80088b4:	b970      	cbnz	r0, 80088d4 <Standard_SetInterface+0x38>
 80088b6:	791a      	ldrb	r2, [r3, #4]
 80088b8:	b962      	cbnz	r2, 80088d4 <Standard_SetInterface+0x38>
        || (pInformation->USBwValue1 != 0))
 80088ba:	789d      	ldrb	r5, [r3, #2]
 80088bc:	b955      	cbnz	r5, 80088d4 <Standard_SetInterface+0x38>
      pUser_Standard_Requests->User_SetInterface();
 80088be:	4b09      	ldr	r3, [pc, #36]	; (80088e4 <Standard_SetInterface+0x48>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80088c6:	6823      	ldr	r3, [r4, #0]
}
 80088c8:	4628      	mov	r0, r5
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80088ca:	7959      	ldrb	r1, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 80088cc:	78da      	ldrb	r2, [r3, #3]
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80088ce:	72d9      	strb	r1, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 80088d0:	731a      	strb	r2, [r3, #12]
}
 80088d2:	bd38      	pop	{r3, r4, r5, pc}
  return USB_UNSUPPORT;
 80088d4:	2502      	movs	r5, #2
}
 80088d6:	4628      	mov	r0, r5
 80088d8:	bd38      	pop	{r3, r4, r5, pc}
 80088da:	bf00      	nop
 80088dc:	20001630 	.word	0x20001630
 80088e0:	2000162c 	.word	0x2000162c
 80088e4:	20001634 	.word	0x20001634

080088e8 <Standard_ClearFeature>:
{
 80088e8:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 80088ea:	4b33      	ldr	r3, [pc, #204]	; (80089b8 <Standard_ClearFeature+0xd0>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	7818      	ldrb	r0, [r3, #0]
  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80088f0:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 80088f4:	d034      	beq.n	8008960 <Standard_ClearFeature+0x78>
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80088f6:	2802      	cmp	r0, #2
 80088f8:	d001      	beq.n	80088fe <Standard_ClearFeature+0x16>
  return USB_UNSUPPORT;
 80088fa:	2002      	movs	r0, #2
}
 80088fc:	bd38      	pop	{r3, r4, r5, pc}
    if ((pInformation->USBwValue != ENDPOINT_STALL)
 80088fe:	885a      	ldrh	r2, [r3, #2]
 8008900:	2a00      	cmp	r2, #0
 8008902:	d1fb      	bne.n	80088fc <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 8008904:	791a      	ldrb	r2, [r3, #4]
 8008906:	2a00      	cmp	r2, #0
 8008908:	d1f8      	bne.n	80088fc <Standard_ClearFeature+0x14>
    wIndex0 = pInformation->USBwIndex0;
 800890a:	795a      	ldrb	r2, [r3, #5]
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800890c:	4d2b      	ldr	r5, [pc, #172]	; (80089bc <Standard_ClearFeature+0xd4>)
    if (ValBit(pInformation->USBwIndex0, 7))
 800890e:	fa4f fc82 	sxtb.w	ip, r2
    rEP = wIndex0 & ~0x80;
 8008912:	f022 0280 	bic.w	r2, r2, #128	; 0x80
      Status = _GetEPTxStatus(Related_Endpoint);
 8008916:	0094      	lsls	r4, r2, #2
 8008918:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800891c:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 8008920:	6821      	ldr	r1, [r4, #0]
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8008922:	f895 e000 	ldrb.w	lr, [r5]
    if (ValBit(pInformation->USBwIndex0, 7))
 8008926:	f1bc 0f00 	cmp.w	ip, #0
      Status = _GetEPTxStatus(Related_Endpoint);
 800892a:	bfb4      	ite	lt
 800892c:	f001 0130 	andlt.w	r1, r1, #48	; 0x30
      Status = _GetEPRxStatus(Related_Endpoint);
 8008930:	f401 5140 	andge.w	r1, r1, #12288	; 0x3000
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8008934:	4596      	cmp	lr, r2
 8008936:	d9e1      	bls.n	80088fc <Standard_ClearFeature+0x14>
 8008938:	2900      	cmp	r1, #0
 800893a:	d0df      	beq.n	80088fc <Standard_ClearFeature+0x14>
        || (pInformation->Current_Configuration == 0))
 800893c:	7a9b      	ldrb	r3, [r3, #10]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d0dc      	beq.n	80088fc <Standard_ClearFeature+0x14>
    if (wIndex0 & 0x80)
 8008942:	f1bc 0f00 	cmp.w	ip, #0
      if (_GetTxStallStatus(Related_Endpoint ))
 8008946:	6823      	ldr	r3, [r4, #0]
    if (wIndex0 & 0x80)
 8008948:	db0f      	blt.n	800896a <Standard_ClearFeature+0x82>
      if (_GetRxStallStatus(Related_Endpoint))
 800894a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800894e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008952:	d017      	beq.n	8008984 <Standard_ClearFeature+0x9c>
    pUser_Standard_Requests->User_ClearFeature();
 8008954:	4b1a      	ldr	r3, [pc, #104]	; (80089c0 <Standard_ClearFeature+0xd8>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	695b      	ldr	r3, [r3, #20]
 800895a:	4798      	blx	r3
    return USB_SUCCESS;
 800895c:	2000      	movs	r0, #0
}
 800895e:	bd38      	pop	{r3, r4, r5, pc}
    ClrBit(pInformation->Current_Feature, 5);
 8008960:	7a5a      	ldrb	r2, [r3, #9]
 8008962:	f022 0220 	bic.w	r2, r2, #32
 8008966:	725a      	strb	r2, [r3, #9]
}
 8008968:	bd38      	pop	{r3, r4, r5, pc}
      if (_GetTxStallStatus(Related_Endpoint ))
 800896a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800896e:	2b10      	cmp	r3, #16
 8008970:	d1f0      	bne.n	8008954 <Standard_ClearFeature+0x6c>
        ClearDTOG_TX(Related_Endpoint);
 8008972:	b2d4      	uxtb	r4, r2
 8008974:	4620      	mov	r0, r4
 8008976:	f000 fd1d 	bl	80093b4 <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 800897a:	2130      	movs	r1, #48	; 0x30
 800897c:	4620      	mov	r0, r4
 800897e:	f000 fc9b 	bl	80092b8 <SetEPTxStatus>
 8008982:	e7e7      	b.n	8008954 <Standard_ClearFeature+0x6c>
        if (Related_Endpoint == ENDP0)
 8008984:	b99a      	cbnz	r2, 80089ae <Standard_ClearFeature+0xc6>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8008986:	4b0f      	ldr	r3, [pc, #60]	; (80089c4 <Standard_ClearFeature+0xdc>)
 8008988:	4610      	mov	r0, r2
 800898a:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800898e:	f000 fd77 	bl	8009480 <SetEPRxCount>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800899c:	b29b      	uxth	r3, r3
 800899e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80089a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089aa:	6023      	str	r3, [r4, #0]
 80089ac:	e7d2      	b.n	8008954 <Standard_ClearFeature+0x6c>
          ClearDTOG_RX(Related_Endpoint);
 80089ae:	4610      	mov	r0, r2
 80089b0:	f000 fcee 	bl	8009390 <ClearDTOG_RX>
 80089b4:	e7ed      	b.n	8008992 <Standard_ClearFeature+0xaa>
 80089b6:	bf00      	nop
 80089b8:	2000162c 	.word	0x2000162c
 80089bc:	2000009c 	.word	0x2000009c
 80089c0:	20001634 	.word	0x20001634
 80089c4:	2000006c 	.word	0x2000006c

080089c8 <Standard_SetEndPointFeature>:
  wIndex0 = pInformation->USBwIndex0;
 80089c8:	4b21      	ldr	r3, [pc, #132]	; (8008a50 <Standard_SetEndPointFeature+0x88>)
{
 80089ca:	b510      	push	{r4, lr}
  wIndex0 = pInformation->USBwIndex0;
 80089cc:	6818      	ldr	r0, [r3, #0]
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80089ce:	4c21      	ldr	r4, [pc, #132]	; (8008a54 <Standard_SetEndPointFeature+0x8c>)
  wIndex0 = pInformation->USBwIndex0;
 80089d0:	7942      	ldrb	r2, [r0, #5]
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80089d2:	f894 e000 	ldrb.w	lr, [r4]
  if (ValBit(pInformation->USBwIndex0, 7))
 80089d6:	fa4f fc82 	sxtb.w	ip, r2
  rEP = wIndex0 & ~0x80;
 80089da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    Status = _GetEPTxStatus(Related_Endpoint);
 80089de:	0093      	lsls	r3, r2, #2
 80089e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80089e4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80089e8:	6819      	ldr	r1, [r3, #0]
  if (ValBit(pInformation->USBwIndex0, 7))
 80089ea:	f1bc 0f00 	cmp.w	ip, #0
    Status = _GetEPTxStatus(Related_Endpoint);
 80089ee:	bfb4      	ite	lt
 80089f0:	f001 0130 	andlt.w	r1, r1, #48	; 0x30
    Status = _GetEPRxStatus(Related_Endpoint);
 80089f4:	f401 5140 	andge.w	r1, r1, #12288	; 0x3000
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80089f8:	4596      	cmp	lr, r2
 80089fa:	d91a      	bls.n	8008a32 <Standard_SetEndPointFeature+0x6a>
      || pInformation->USBwValue != 0 || Status == 0
 80089fc:	8842      	ldrh	r2, [r0, #2]
 80089fe:	b9c2      	cbnz	r2, 8008a32 <Standard_SetEndPointFeature+0x6a>
 8008a00:	b1b9      	cbz	r1, 8008a32 <Standard_SetEndPointFeature+0x6a>
      || pInformation->Current_Configuration == 0)
 8008a02:	7a82      	ldrb	r2, [r0, #10]
 8008a04:	b1aa      	cbz	r2, 8008a32 <Standard_SetEndPointFeature+0x6a>
    if (wIndex0 & 0x80)
 8008a06:	f1bc 0f00 	cmp.w	ip, #0
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8008a0a:	681a      	ldr	r2, [r3, #0]
    if (wIndex0 & 0x80)
 8008a0c:	db13      	blt.n	8008a36 <Standard_SetEndPointFeature+0x6e>
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8008a0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008a12:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008a16:	b292      	uxth	r2, r2
 8008a18:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8008a1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a24:	601a      	str	r2, [r3, #0]
  pUser_Standard_Requests->User_SetEndPointFeature();
 8008a26:	4b0c      	ldr	r3, [pc, #48]	; (8008a58 <Standard_SetEndPointFeature+0x90>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	4798      	blx	r3
  return USB_SUCCESS;
 8008a2e:	2000      	movs	r0, #0
}
 8008a30:	bd10      	pop	{r4, pc}
    return USB_UNSUPPORT;
 8008a32:	2002      	movs	r0, #2
}
 8008a34:	bd10      	pop	{r4, pc}
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8008a36:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a3e:	b292      	uxth	r2, r2
 8008a40:	f082 0210 	eor.w	r2, r2, #16
 8008a44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a4c:	601a      	str	r2, [r3, #0]
 8008a4e:	e7ea      	b.n	8008a26 <Standard_SetEndPointFeature+0x5e>
 8008a50:	2000162c 	.word	0x2000162c
 8008a54:	2000009c 	.word	0x2000009c
 8008a58:	20001634 	.word	0x20001634

08008a5c <Standard_GetDescriptorData>:
  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8008a5c:	4b05      	ldr	r3, [pc, #20]	; (8008a74 <Standard_GetDescriptorData+0x18>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 8008a62:	b110      	cbz	r0, 8008a6a <Standard_GetDescriptorData+0xe>
  return pDesc->Descriptor + wOffset;
 8008a64:	6808      	ldr	r0, [r1, #0]
 8008a66:	4410      	add	r0, r2
}
 8008a68:	4770      	bx	lr
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 8008a6a:	8889      	ldrh	r1, [r1, #4]
 8008a6c:	1a8a      	subs	r2, r1, r2
 8008a6e:	821a      	strh	r2, [r3, #16]
    return 0;
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	2000162c 	.word	0x2000162c

08008a78 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8008a78:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
#endif /* STM32F10X_CL */

  if (pInformation->ControlState != PAUSE)
 8008a7a:	4e99      	ldr	r6, [pc, #612]	; (8008ce0 <Setup0_Process+0x268>)
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8008a7c:	4b99      	ldr	r3, [pc, #612]	; (8008ce4 <Setup0_Process+0x26c>)
  if (pInformation->ControlState != PAUSE)
 8008a7e:	6834      	ldr	r4, [r6, #0]
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8008a80:	f8d3 2c50 	ldr.w	r2, [r3, #3152]	; 0xc50
  if (pInformation->ControlState != PAUSE)
 8008a84:	7a23      	ldrb	r3, [r4, #8]
{
 8008a86:	b083      	sub	sp, #12
  if (pInformation->ControlState != PAUSE)
 8008a88:	2b09      	cmp	r3, #9
 8008a8a:	d17e      	bne.n	8008b8a <Setup0_Process+0x112>
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
  if (pInformation->USBwLength == 0)
 8008a8c:	88e3      	ldrh	r3, [r4, #6]
  pInformation->ControlState = SETTING_UP;
 8008a8e:	2201      	movs	r2, #1
 8008a90:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d150      	bne.n	8008b38 <Setup0_Process+0xc0>
  uint32_t RequestNo = pInformation->USBbRequest;
 8008a96:	7823      	ldrb	r3, [r4, #0]
 8008a98:	7865      	ldrb	r5, [r4, #1]
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8008a9a:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8008a9e:	d13d      	bne.n	8008b1c <Setup0_Process+0xa4>
    if (RequestNo == SET_CONFIGURATION)
 8008aa0:	2d09      	cmp	r5, #9
 8008aa2:	f000 80ac 	beq.w	8008bfe <Setup0_Process+0x186>
    else if (RequestNo == SET_ADDRESS)
 8008aa6:	2d05      	cmp	r5, #5
 8008aa8:	f000 80e9 	beq.w	8008c7e <Setup0_Process+0x206>
    else if (RequestNo == SET_FEATURE)
 8008aac:	2d03      	cmp	r5, #3
 8008aae:	f000 814c 	beq.w	8008d4a <Setup0_Process+0x2d2>
    else if (RequestNo == CLEAR_FEATURE)
 8008ab2:	2d01      	cmp	r5, #1
 8008ab4:	f000 8137 	beq.w	8008d26 <Setup0_Process+0x2ae>
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8008ab8:	4b8b      	ldr	r3, [pc, #556]	; (8008ce8 <Setup0_Process+0x270>)
 8008aba:	4628      	mov	r0, r5
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	695b      	ldr	r3, [r3, #20]
 8008ac0:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8008ac2:	2803      	cmp	r0, #3
 8008ac4:	f000 80c9 	beq.w	8008c5a <Setup0_Process+0x1e2>
  if (Result != USB_SUCCESS)
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	f040 80bf 	bne.w	8008c4c <Setup0_Process+0x1d4>
  pInformation->ControlState = ControlState;
 8008ace:	6834      	ldr	r4, [r6, #0]
  USB_StatusIn();
 8008ad0:	4b84      	ldr	r3, [pc, #528]	; (8008ce4 <Setup0_Process+0x26c>)
 8008ad2:	2500      	movs	r5, #0
 8008ad4:	f8d3 2c50 	ldr.w	r2, [r3, #3152]	; 0xc50
 8008ad8:	4b84      	ldr	r3, [pc, #528]	; (8008cec <Setup0_Process+0x274>)
 8008ada:	b292      	uxth	r2, r2
 8008adc:	2030      	movs	r0, #48	; 0x30
 8008ade:	4413      	add	r3, r2
 8008ae0:	2206      	movs	r2, #6
 8008ae2:	4983      	ldr	r1, [pc, #524]	; (8008cf0 <Setup0_Process+0x278>)
 8008ae4:	005b      	lsls	r3, r3, #1
 8008ae6:	601d      	str	r5, [r3, #0]
 8008ae8:	8008      	strh	r0, [r1, #0]
  pInformation->ControlState = ControlState;
 8008aea:	7222      	strb	r2, [r4, #8]
{
#ifdef STM32F10X_CL  
  USB_OTG_EP *ep;
#endif /* STM32F10X_CL */
      
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8008aec:	4b81      	ldr	r3, [pc, #516]	; (8008cf4 <Setup0_Process+0x27c>)
 8008aee:	2000      	movs	r0, #0
 8008af0:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8008af4:	f000 fcc4 	bl	8009480 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 8008af8:	6833      	ldr	r3, [r6, #0]
 8008afa:	7a18      	ldrb	r0, [r3, #8]
 8008afc:	2808      	cmp	r0, #8
 8008afe:	d106      	bne.n	8008b0e <Setup0_Process+0x96>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8008b00:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 8008b04:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 8008b06:	497c      	ldr	r1, [pc, #496]	; (8008cf8 <Setup0_Process+0x280>)
    vSetEPTxStatus(EP_TX_STALL);
 8008b08:	4b79      	ldr	r3, [pc, #484]	; (8008cf0 <Setup0_Process+0x278>)
    vSetEPRxStatus(EP_RX_STALL);
 8008b0a:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8008b0c:	801a      	strh	r2, [r3, #0]
}
 8008b0e:	f1a0 0009 	sub.w	r0, r0, #9
 8008b12:	fab0 f080 	clz	r0, r0
 8008b16:	0940      	lsrs	r0, r0, #5
 8008b18:	b003      	add	sp, #12
 8008b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d062      	beq.n	8008be6 <Setup0_Process+0x16e>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d1c9      	bne.n	8008ab8 <Setup0_Process+0x40>
    if (RequestNo == CLEAR_FEATURE)
 8008b24:	2d01      	cmp	r5, #1
 8008b26:	f000 810a 	beq.w	8008d3e <Setup0_Process+0x2c6>
    else if (RequestNo == SET_FEATURE)
 8008b2a:	2d03      	cmp	r5, #3
 8008b2c:	d1c4      	bne.n	8008ab8 <Setup0_Process+0x40>
      Result = Standard_SetEndPointFeature();
 8008b2e:	f7ff ff4b 	bl	80089c8 <Standard_SetEndPointFeature>
  if (Result != USB_SUCCESS)
 8008b32:	2800      	cmp	r0, #0
 8008b34:	d0cb      	beq.n	8008ace <Setup0_Process+0x56>
 8008b36:	e7bf      	b.n	8008ab8 <Setup0_Process+0x40>
  uint32_t Request_No = pInformation->USBbRequest;
 8008b38:	7860      	ldrb	r0, [r4, #1]
  if (Request_No == GET_DESCRIPTOR)
 8008b3a:	2806      	cmp	r0, #6
 8008b3c:	d074      	beq.n	8008c28 <Setup0_Process+0x1b0>
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d13e      	bne.n	8008bc0 <Setup0_Process+0x148>
 8008b42:	8861      	ldrh	r1, [r4, #2]
 8008b44:	b931      	cbnz	r1, 8008b54 <Setup0_Process+0xdc>
           && (pInformation->USBwIndex1 == 0))
 8008b46:	6863      	ldr	r3, [r4, #4]
 8008b48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b50:	f000 8114 	beq.w	8008d7c <Setup0_Process+0x304>
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8008b54:	4b64      	ldr	r3, [pc, #400]	; (8008ce8 <Setup0_Process+0x270>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8008b5c:	2803      	cmp	r0, #3
 8008b5e:	d078      	beq.n	8008c52 <Setup0_Process+0x1da>
  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8008b60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008b64:	6833      	ldr	r3, [r6, #0]
 8008b66:	8a1a      	ldrh	r2, [r3, #16]
 8008b68:	428a      	cmp	r2, r1
 8008b6a:	d039      	beq.n	8008be0 <Setup0_Process+0x168>
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8008b6c:	2802      	cmp	r0, #2
 8008b6e:	d043      	beq.n	8008bf8 <Setup0_Process+0x180>
 8008b70:	2a00      	cmp	r2, #0
 8008b72:	d041      	beq.n	8008bf8 <Setup0_Process+0x180>
  if (ValBit(pInformation->USBbmRequestType, 7))
 8008b74:	f993 1000 	ldrsb.w	r1, [r3]
 8008b78:	2900      	cmp	r1, #0
 8008b7a:	db71      	blt.n	8008c60 <Setup0_Process+0x1e8>
    pInformation->ControlState = OUT_DATA;
 8008b7c:	2003      	movs	r0, #3
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8008b7e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8008b82:	4a5d      	ldr	r2, [pc, #372]	; (8008cf8 <Setup0_Process+0x280>)
    pInformation->ControlState = OUT_DATA;
 8008b84:	7218      	strb	r0, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8008b86:	8011      	strh	r1, [r2, #0]
 8008b88:	e7b0      	b.n	8008aec <Setup0_Process+0x74>
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8008b8a:	4b5c      	ldr	r3, [pc, #368]	; (8008cfc <Setup0_Process+0x284>)
 8008b8c:	b292      	uxth	r2, r2
 8008b8e:	4413      	add	r3, r2
 8008b90:	005b      	lsls	r3, r3, #1
 8008b92:	881d      	ldrh	r5, [r3, #0]
 8008b94:	006d      	lsls	r5, r5, #1
 8008b96:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8008b9a:	f505 45c0 	add.w	r5, r5, #24576	; 0x6000
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8008b9e:	782b      	ldrb	r3, [r5, #0]
 8008ba0:	7023      	strb	r3, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 8008ba2:	786b      	ldrb	r3, [r5, #1]
 8008ba4:	7063      	strb	r3, [r4, #1]
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8008ba6:	88a8      	ldrh	r0, [r5, #4]
 8008ba8:	f000 fc9e 	bl	80094e8 <ByteSwap>
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8008bac:	6837      	ldr	r7, [r6, #0]
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8008bae:	8060      	strh	r0, [r4, #2]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8008bb0:	8928      	ldrh	r0, [r5, #8]
 8008bb2:	f000 fc99 	bl	80094e8 <ByteSwap>
 8008bb6:	80b8      	strh	r0, [r7, #4]
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8008bb8:	6834      	ldr	r4, [r6, #0]
 8008bba:	89ab      	ldrh	r3, [r5, #12]
 8008bbc:	80e3      	strh	r3, [r4, #6]
 8008bbe:	e766      	b.n	8008a8e <Setup0_Process+0x16>
  else if (Request_No == GET_CONFIGURATION)
 8008bc0:	2808      	cmp	r0, #8
 8008bc2:	d16a      	bne.n	8008c9a <Setup0_Process+0x222>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8008bc4:	7823      	ldrb	r3, [r4, #0]
 8008bc6:	065b      	lsls	r3, r3, #25
 8008bc8:	d1c4      	bne.n	8008b54 <Setup0_Process+0xdc>
      CopyRoutine = Standard_GetConfiguration;
 8008bca:	4a4d      	ldr	r2, [pc, #308]	; (8008d00 <Setup0_Process+0x288>)
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8008bcc:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8008bce:	61a2      	str	r2, [r4, #24]
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8008bd0:	8260      	strh	r0, [r4, #18]
    (*CopyRoutine)(0);
 8008bd2:	4790      	blx	r2
  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8008bd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008bd8:	6833      	ldr	r3, [r6, #0]
 8008bda:	8a1a      	ldrh	r2, [r3, #16]
 8008bdc:	428a      	cmp	r2, r1
 8008bde:	d1c7      	bne.n	8008b70 <Setup0_Process+0xf8>
    pInformation->ControlState = PAUSE;
 8008be0:	2209      	movs	r2, #9
 8008be2:	721a      	strb	r2, [r3, #8]
    return;
 8008be4:	e782      	b.n	8008aec <Setup0_Process+0x74>
    if (RequestNo == SET_INTERFACE)
 8008be6:	2d0b      	cmp	r5, #11
 8008be8:	f47f af66 	bne.w	8008ab8 <Setup0_Process+0x40>
      Result = Standard_SetInterface();
 8008bec:	f7ff fe56 	bl	800889c <Standard_SetInterface>
  if (Result != USB_SUCCESS)
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	f43f af6c 	beq.w	8008ace <Setup0_Process+0x56>
 8008bf6:	e75f      	b.n	8008ab8 <Setup0_Process+0x40>
    pInformation->ControlState = STALLED;
 8008bf8:	2208      	movs	r2, #8
 8008bfa:	721a      	strb	r2, [r3, #8]
    return;
 8008bfc:	e776      	b.n	8008aec <Setup0_Process+0x74>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8008bfe:	4a41      	ldr	r2, [pc, #260]	; (8008d04 <Setup0_Process+0x28c>)
  if ((pInformation->USBwValue0 <=
 8008c00:	78e3      	ldrb	r3, [r4, #3]
 8008c02:	7852      	ldrb	r2, [r2, #1]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	f4ff af57 	bcc.w	8008ab8 <Setup0_Process+0x40>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8008c0a:	78a2      	ldrb	r2, [r4, #2]
 8008c0c:	2a00      	cmp	r2, #0
 8008c0e:	f47f af53 	bne.w	8008ab8 <Setup0_Process+0x40>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8008c12:	88a2      	ldrh	r2, [r4, #4]
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	f47f af4f 	bne.w	8008ab8 <Setup0_Process+0x40>
    pUser_Standard_Requests->User_SetConfiguration();
 8008c1a:	4a3b      	ldr	r2, [pc, #236]	; (8008d08 <Setup0_Process+0x290>)
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8008c1c:	72a3      	strb	r3, [r4, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 8008c1e:	6813      	ldr	r3, [r2, #0]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	4798      	blx	r3
  pInformation->ControlState = ControlState;
 8008c24:	6834      	ldr	r4, [r6, #0]
 8008c26:	e753      	b.n	8008ad0 <Setup0_Process+0x58>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8008c28:	7823      	ldrb	r3, [r4, #0]
 8008c2a:	065d      	lsls	r5, r3, #25
 8008c2c:	d192      	bne.n	8008b54 <Setup0_Process+0xdc>
      uint8_t wValue1 = pInformation->USBwValue1;
 8008c2e:	78a3      	ldrb	r3, [r4, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	f000 809f 	beq.w	8008d74 <Setup0_Process+0x2fc>
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d071      	beq.n	8008d1e <Setup0_Process+0x2a6>
      else if (wValue1 == STRING_DESCRIPTOR)
 8008c3a:	2b03      	cmp	r3, #3
        CopyRoutine = pProperty->GetStringDescriptor;
 8008c3c:	4b2a      	ldr	r3, [pc, #168]	; (8008ce8 <Setup0_Process+0x270>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
      else if (wValue1 == STRING_DESCRIPTOR)
 8008c40:	d18a      	bne.n	8008b58 <Setup0_Process+0xe0>
        CopyRoutine = pProperty->GetStringDescriptor;
 8008c42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  if (CopyRoutine)
 8008c44:	2a00      	cmp	r2, #0
 8008c46:	d1c1      	bne.n	8008bcc <Setup0_Process+0x154>
 8008c48:	2006      	movs	r0, #6
 8008c4a:	e785      	b.n	8008b58 <Setup0_Process+0xe0>
  pInformation->ControlState = ControlState;
 8008c4c:	2208      	movs	r2, #8
 8008c4e:	6834      	ldr	r4, [r6, #0]
 8008c50:	e74b      	b.n	8008aea <Setup0_Process+0x72>
      pInformation->ControlState = PAUSE;
 8008c52:	2209      	movs	r2, #9
 8008c54:	6833      	ldr	r3, [r6, #0]
 8008c56:	721a      	strb	r2, [r3, #8]
      return;
 8008c58:	e748      	b.n	8008aec <Setup0_Process+0x74>
  pInformation->ControlState = ControlState;
 8008c5a:	2209      	movs	r2, #9
 8008c5c:	6834      	ldr	r4, [r6, #0]
 8008c5e:	e744      	b.n	8008aea <Setup0_Process+0x72>
    __IO uint32_t wLength = pInformation->USBwLength;
 8008c60:	88d9      	ldrh	r1, [r3, #6]
 8008c62:	9101      	str	r1, [sp, #4]
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8008c64:	9801      	ldr	r0, [sp, #4]
 8008c66:	4282      	cmp	r2, r0
 8008c68:	d952      	bls.n	8008d10 <Setup0_Process+0x298>
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8008c6a:	4a1f      	ldr	r2, [pc, #124]	; (8008ce8 <Setup0_Process+0x270>)
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8008c6c:	9901      	ldr	r1, [sp, #4]
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8008c6e:	6812      	ldr	r2, [r2, #0]
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8008c70:	8219      	strh	r1, [r3, #16]
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8008c72:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8008c76:	8299      	strh	r1, [r3, #20]
    DataStageIn();
 8008c78:	f7ff fdb6 	bl	80087e8 <DataStageIn>
 8008c7c:	e736      	b.n	8008aec <Setup0_Process+0x74>
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8008c7e:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	db07      	blt.n	8008c96 <Setup0_Process+0x21e>
 8008c86:	78a3      	ldrb	r3, [r4, #2]
 8008c88:	b92b      	cbnz	r3, 8008c96 <Setup0_Process+0x21e>
          || (pInformation->USBwIndex != 0)
 8008c8a:	88a3      	ldrh	r3, [r4, #4]
 8008c8c:	b91b      	cbnz	r3, 8008c96 <Setup0_Process+0x21e>
          || (pInformation->Current_Configuration != 0))
 8008c8e:	7aa3      	ldrb	r3, [r4, #10]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f43f af1d 	beq.w	8008ad0 <Setup0_Process+0x58>
 8008c96:	2208      	movs	r2, #8
 8008c98:	e727      	b.n	8008aea <Setup0_Process+0x72>
  else if (Request_No == GET_INTERFACE)
 8008c9a:	280a      	cmp	r0, #10
 8008c9c:	f47f af5a 	bne.w	8008b54 <Setup0_Process+0xdc>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8008ca0:	7823      	ldrb	r3, [r4, #0]
 8008ca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	f47f af54 	bne.w	8008b54 <Setup0_Process+0xdc>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8008cac:	7aa3      	ldrb	r3, [r4, #10]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f43f af50 	beq.w	8008b54 <Setup0_Process+0xdc>
 8008cb4:	8861      	ldrh	r1, [r4, #2]
 8008cb6:	2900      	cmp	r1, #0
 8008cb8:	f47f af4c 	bne.w	8008b54 <Setup0_Process+0xdc>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8008cbc:	6863      	ldr	r3, [r4, #4]
 8008cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cc6:	f47f af45 	bne.w	8008b54 <Setup0_Process+0xdc>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8008cca:	4d07      	ldr	r5, [pc, #28]	; (8008ce8 <Setup0_Process+0x270>)
 8008ccc:	7960      	ldrb	r0, [r4, #5]
 8008cce:	682b      	ldr	r3, [r5, #0]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	4798      	blx	r3
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	f040 80a0 	bne.w	8008e1a <Setup0_Process+0x3a2>
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8008cda:	6834      	ldr	r4, [r6, #0]
      CopyRoutine = Standard_GetInterface;
 8008cdc:	4a0b      	ldr	r2, [pc, #44]	; (8008d0c <Setup0_Process+0x294>)
 8008cde:	e775      	b.n	8008bcc <Setup0_Process+0x154>
 8008ce0:	2000162c 	.word	0x2000162c
 8008ce4:	40005000 	.word	0x40005000
 8008ce8:	20001630 	.word	0x20001630
 8008cec:	20003002 	.word	0x20003002
 8008cf0:	2000163c 	.word	0x2000163c
 8008cf4:	2000006c 	.word	0x2000006c
 8008cf8:	2000163a 	.word	0x2000163a
 8008cfc:	20003004 	.word	0x20003004
 8008d00:	08008709 	.word	0x08008709
 8008d04:	2000009c 	.word	0x2000009c
 8008d08:	20001634 	.word	0x20001634
 8008d0c:	08008731 	.word	0x08008731
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8008d10:	4291      	cmp	r1, r2
 8008d12:	d83d      	bhi.n	8008d90 <Setup0_Process+0x318>
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8008d14:	4a43      	ldr	r2, [pc, #268]	; (8008e24 <Setup0_Process+0x3ac>)
 8008d16:	6812      	ldr	r2, [r2, #0]
 8008d18:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8008d1c:	e7ab      	b.n	8008c76 <Setup0_Process+0x1fe>
        CopyRoutine = pProperty->GetConfigDescriptor;
 8008d1e:	4b41      	ldr	r3, [pc, #260]	; (8008e24 <Setup0_Process+0x3ac>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	6a1a      	ldr	r2, [r3, #32]
 8008d24:	e78e      	b.n	8008c44 <Setup0_Process+0x1cc>
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8008d26:	78e3      	ldrb	r3, [r4, #3]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	f47f aec5 	bne.w	8008ab8 <Setup0_Process+0x40>
          && pInformation->USBwIndex == 0
 8008d2e:	88a3      	ldrh	r3, [r4, #4]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f47f aec1 	bne.w	8008ab8 <Setup0_Process+0x40>
          && ValBit(pInformation->Current_Feature, 5))
 8008d36:	7a63      	ldrb	r3, [r4, #9]
 8008d38:	069f      	lsls	r7, r3, #26
 8008d3a:	f57f aebd 	bpl.w	8008ab8 <Setup0_Process+0x40>
        Result = Standard_ClearFeature();
 8008d3e:	f7ff fdd3 	bl	80088e8 <Standard_ClearFeature>
  if (Result != USB_SUCCESS)
 8008d42:	2800      	cmp	r0, #0
 8008d44:	f43f aec3 	beq.w	8008ace <Setup0_Process+0x56>
 8008d48:	e6b6      	b.n	8008ab8 <Setup0_Process+0x40>
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
 8008d4a:	78e3      	ldrb	r3, [r4, #3]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	f47f aeb3 	bne.w	8008ab8 <Setup0_Process+0x40>
          && (pInformation->USBwIndex == 0)
 8008d52:	88a3      	ldrh	r3, [r4, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f47f aeaf 	bne.w	8008ab8 <Setup0_Process+0x40>
          && (ValBit(pInformation->Current_Feature, 5)))
 8008d5a:	7a63      	ldrb	r3, [r4, #9]
 8008d5c:	069a      	lsls	r2, r3, #26
 8008d5e:	f57f aeab 	bpl.w	8008ab8 <Setup0_Process+0x40>
  pUser_Standard_Requests->User_SetDeviceFeature();
 8008d62:	4a31      	ldr	r2, [pc, #196]	; (8008e28 <Setup0_Process+0x3b0>)
  SetBit(pInformation->Current_Feature, 5);
 8008d64:	f043 0320 	orr.w	r3, r3, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 8008d68:	6812      	ldr	r2, [r2, #0]
  SetBit(pInformation->Current_Feature, 5);
 8008d6a:	7263      	strb	r3, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8008d6c:	69d3      	ldr	r3, [r2, #28]
 8008d6e:	4798      	blx	r3
  pInformation->ControlState = ControlState;
 8008d70:	6834      	ldr	r4, [r6, #0]
 8008d72:	e6ad      	b.n	8008ad0 <Setup0_Process+0x58>
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8008d74:	4b2b      	ldr	r3, [pc, #172]	; (8008e24 <Setup0_Process+0x3ac>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	69da      	ldr	r2, [r3, #28]
 8008d7a:	e763      	b.n	8008c44 <Setup0_Process+0x1cc>
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8008d7c:	7820      	ldrb	r0, [r4, #0]
 8008d7e:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8008d82:	d110      	bne.n	8008da6 <Setup0_Process+0x32e>
        && (pInformation->USBwIndex == 0))
 8008d84:	88a3      	ldrh	r3, [r4, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	f47f aee4 	bne.w	8008b54 <Setup0_Process+0xdc>
        CopyRoutine = Standard_GetStatus;
 8008d8c:	4a27      	ldr	r2, [pc, #156]	; (8008e2c <Setup0_Process+0x3b4>)
 8008d8e:	e71d      	b.n	8008bcc <Setup0_Process+0x154>
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8008d90:	4924      	ldr	r1, [pc, #144]	; (8008e24 <Setup0_Process+0x3ac>)
 8008d92:	6809      	ldr	r1, [r1, #0]
 8008d94:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
 8008d98:	4290      	cmp	r0, r2
 8008d9a:	b281      	uxth	r1, r0
 8008d9c:	d913      	bls.n	8008dc6 <Setup0_Process+0x34e>
        Data_Mul_MaxPacketSize = FALSE;
 8008d9e:	2000      	movs	r0, #0
 8008da0:	4a23      	ldr	r2, [pc, #140]	; (8008e30 <Setup0_Process+0x3b8>)
 8008da2:	6010      	str	r0, [r2, #0]
 8008da4:	e767      	b.n	8008c76 <Setup0_Process+0x1fe>
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8008da6:	2801      	cmp	r0, #1
 8008da8:	d118      	bne.n	8008ddc <Setup0_Process+0x364>
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8008daa:	4d1e      	ldr	r5, [pc, #120]	; (8008e24 <Setup0_Process+0x3ac>)
 8008dac:	7960      	ldrb	r0, [r4, #5]
 8008dae:	682b      	ldr	r3, [r5, #0]
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	4798      	blx	r3
 8008db4:	2800      	cmp	r0, #0
 8008db6:	d130      	bne.n	8008e1a <Setup0_Process+0x3a2>
          && (pInformation->Current_Configuration != 0))
 8008db8:	6834      	ldr	r4, [r6, #0]
 8008dba:	7aa3      	ldrb	r3, [r4, #10]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1e5      	bne.n	8008d8c <Setup0_Process+0x314>
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8008dc0:	682b      	ldr	r3, [r5, #0]
 8008dc2:	7860      	ldrb	r0, [r4, #1]
 8008dc4:	e6c8      	b.n	8008b58 <Setup0_Process+0xe0>
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8008dc6:	fbb2 f4f0 	udiv	r4, r2, r0
 8008dca:	fb00 2214 	mls	r2, r0, r4, r2
 8008dce:	2a00      	cmp	r2, #0
 8008dd0:	f47f af51 	bne.w	8008c76 <Setup0_Process+0x1fe>
        Data_Mul_MaxPacketSize = TRUE;
 8008dd4:	2001      	movs	r0, #1
 8008dd6:	4a16      	ldr	r2, [pc, #88]	; (8008e30 <Setup0_Process+0x3b8>)
 8008dd8:	6010      	str	r0, [r2, #0]
 8008dda:	e74c      	b.n	8008c76 <Setup0_Process+0x1fe>
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8008ddc:	2802      	cmp	r0, #2
 8008dde:	d118      	bne.n	8008e12 <Setup0_Process+0x39a>
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8008de0:	7960      	ldrb	r0, [r4, #5]
 8008de2:	f000 020f 	and.w	r2, r0, #15
        Status = _GetEPTxStatus(Related_Endpoint);
 8008de6:	0093      	lsls	r3, r2, #2
      if (ValBit(pInformation->USBwIndex0, 7))
 8008de8:	0601      	lsls	r1, r0, #24
        Status = _GetEPTxStatus(Related_Endpoint);
 8008dea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8008dee:	4911      	ldr	r1, [pc, #68]	; (8008e34 <Setup0_Process+0x3bc>)
        Status = _GetEPTxStatus(Related_Endpoint);
 8008df0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8008df4:	681b      	ldr	r3, [r3, #0]
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8008df6:	7809      	ldrb	r1, [r1, #0]
        Status = _GetEPTxStatus(Related_Endpoint);
 8008df8:	bf4c      	ite	mi
 8008dfa:	f003 0330 	andmi.w	r3, r3, #48	; 0x30
        Status = _GetEPRxStatus(Related_Endpoint);
 8008dfe:	f403 5340 	andpl.w	r3, r3, #12288	; 0x3000
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8008e02:	4291      	cmp	r1, r2
 8008e04:	d905      	bls.n	8008e12 <Setup0_Process+0x39a>
 8008e06:	f010 0070 	ands.w	r0, r0, #112	; 0x70
 8008e0a:	d102      	bne.n	8008e12 <Setup0_Process+0x39a>
          && (Status != 0))
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1bd      	bne.n	8008d8c <Setup0_Process+0x314>
 8008e10:	e6a0      	b.n	8008b54 <Setup0_Process+0xdc>
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8008e12:	4b04      	ldr	r3, [pc, #16]	; (8008e24 <Setup0_Process+0x3ac>)
 8008e14:	2000      	movs	r0, #0
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	e69e      	b.n	8008b58 <Setup0_Process+0xe0>
 8008e1a:	6832      	ldr	r2, [r6, #0]
 8008e1c:	682b      	ldr	r3, [r5, #0]
 8008e1e:	7850      	ldrb	r0, [r2, #1]
 8008e20:	e69a      	b.n	8008b58 <Setup0_Process+0xe0>
 8008e22:	bf00      	nop
 8008e24:	20001630 	.word	0x20001630
 8008e28:	20001634 	.word	0x20001634
 8008e2c:	08008759 	.word	0x08008759
 8008e30:	20001604 	.word	0x20001604
 8008e34:	2000009c 	.word	0x2000009c

08008e38 <In0_Process>:
{
 8008e38:	b538      	push	{r3, r4, r5, lr}
  uint32_t ControlState = pInformation->ControlState;
 8008e3a:	4c29      	ldr	r4, [pc, #164]	; (8008ee0 <In0_Process+0xa8>)
 8008e3c:	6823      	ldr	r3, [r4, #0]
 8008e3e:	7a1a      	ldrb	r2, [r3, #8]
  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8008e40:	2a02      	cmp	r2, #2
 8008e42:	d01c      	beq.n	8008e7e <In0_Process+0x46>
 8008e44:	2a04      	cmp	r2, #4
 8008e46:	d01a      	beq.n	8008e7e <In0_Process+0x46>
  else if (ControlState == WAIT_STATUS_IN)
 8008e48:	2a06      	cmp	r2, #6
 8008e4a:	d01d      	beq.n	8008e88 <In0_Process+0x50>
 8008e4c:	2108      	movs	r1, #8
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8008e4e:	4a25      	ldr	r2, [pc, #148]	; (8008ee4 <In0_Process+0xac>)
  pInformation->ControlState = ControlState;
 8008e50:	7219      	strb	r1, [r3, #8]
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8008e52:	2000      	movs	r0, #0
 8008e54:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8008e58:	f000 fb12 	bl	8009480 <SetEPRxCount>
  if (pInformation->ControlState == STALLED)
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	7a18      	ldrb	r0, [r3, #8]
 8008e60:	2808      	cmp	r0, #8
 8008e62:	d106      	bne.n	8008e72 <In0_Process+0x3a>
    vSetEPRxStatus(EP_RX_STALL);
 8008e64:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 8008e68:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 8008e6a:	491f      	ldr	r1, [pc, #124]	; (8008ee8 <In0_Process+0xb0>)
    vSetEPTxStatus(EP_TX_STALL);
 8008e6c:	4b1f      	ldr	r3, [pc, #124]	; (8008eec <In0_Process+0xb4>)
    vSetEPRxStatus(EP_RX_STALL);
 8008e6e:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8008e70:	801a      	strh	r2, [r3, #0]
}
 8008e72:	f1a0 0009 	sub.w	r0, r0, #9
 8008e76:	fab0 f080 	clz	r0, r0
 8008e7a:	0940      	lsrs	r0, r0, #5
 8008e7c:	bd38      	pop	{r3, r4, r5, pc}
    DataStageIn();
 8008e7e:	f7ff fcb3 	bl	80087e8 <DataStageIn>
    ControlState = pInformation->ControlState;
 8008e82:	6823      	ldr	r3, [r4, #0]
 8008e84:	7a19      	ldrb	r1, [r3, #8]
 8008e86:	e7e2      	b.n	8008e4e <In0_Process+0x16>
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8008e88:	785a      	ldrb	r2, [r3, #1]
 8008e8a:	2a05      	cmp	r2, #5
 8008e8c:	d006      	beq.n	8008e9c <In0_Process+0x64>
    (*pProperty->Process_Status_IN)();
 8008e8e:	4b18      	ldr	r3, [pc, #96]	; (8008ef0 <In0_Process+0xb8>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	4798      	blx	r3
    ControlState = STALLED;
 8008e96:	2108      	movs	r1, #8
  pInformation->ControlState = ControlState;
 8008e98:	6823      	ldr	r3, [r4, #0]
 8008e9a:	e7d8      	b.n	8008e4e <In0_Process+0x16>
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8008e9c:	781a      	ldrb	r2, [r3, #0]
 8008e9e:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 8008ea2:	d1f4      	bne.n	8008e8e <In0_Process+0x56>
{
#ifdef STM32F10X_CL 
  PCD_EP_SetAddress ((uint8_t)Val);
#else 
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 8008ea4:	4913      	ldr	r1, [pc, #76]	; (8008ef4 <In0_Process+0xbc>)
      SetDeviceAddress(pInformation->USBwValue0);
 8008ea6:	78dd      	ldrb	r5, [r3, #3]
  uint32_t nEP = Device_Table.Total_Endpoint;
 8008ea8:	7808      	ldrb	r0, [r1, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8008eaa:	b178      	cbz	r0, 8008ecc <In0_Process+0x94>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8008eac:	f640 7e0f 	movw	lr, #3855	; 0xf0f
 8008eb0:	f248 0c80 	movw	ip, #32896	; 0x8080
  for (i = 0; i < nEP; i++)
 8008eb4:	4910      	ldr	r1, [pc, #64]	; (8008ef8 <In0_Process+0xc0>)
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8008eb6:	680b      	ldr	r3, [r1, #0]
 8008eb8:	ea03 030e 	and.w	r3, r3, lr
 8008ebc:	4313      	orrs	r3, r2
  for (i = 0; i < nEP; i++)
 8008ebe:	3201      	adds	r2, #1
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8008ec0:	ea43 030c 	orr.w	r3, r3, ip
  for (i = 0; i < nEP; i++)
 8008ec4:	4290      	cmp	r0, r2
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8008ec6:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0; i < nEP; i++)
 8008eca:	d1f4      	bne.n	8008eb6 <In0_Process+0x7e>
      pUser_Standard_Requests->User_SetDeviceAddress();
 8008ecc:	4b0b      	ldr	r3, [pc, #44]	; (8008efc <In0_Process+0xc4>)
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 8008ece:	4a0c      	ldr	r2, [pc, #48]	; (8008f00 <In0_Process+0xc8>)
      pUser_Standard_Requests->User_SetDeviceAddress();
 8008ed0:	681b      	ldr	r3, [r3, #0]
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 8008ed2:	f045 0580 	orr.w	r5, r5, #128	; 0x80
      pUser_Standard_Requests->User_SetDeviceAddress();
 8008ed6:	6a1b      	ldr	r3, [r3, #32]
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 8008ed8:	f8c2 5c4c 	str.w	r5, [r2, #3148]	; 0xc4c
      pUser_Standard_Requests->User_SetDeviceAddress();
 8008edc:	4798      	blx	r3
 8008ede:	e7d6      	b.n	8008e8e <In0_Process+0x56>
 8008ee0:	2000162c 	.word	0x2000162c
 8008ee4:	2000006c 	.word	0x2000006c
 8008ee8:	2000163a 	.word	0x2000163a
 8008eec:	2000163c 	.word	0x2000163c
 8008ef0:	20001630 	.word	0x20001630
 8008ef4:	2000009c 	.word	0x2000009c
 8008ef8:	40005c00 	.word	0x40005c00
 8008efc:	20001634 	.word	0x20001634
 8008f00:	40005000 	.word	0x40005000

08008f04 <Out0_Process>:
{
 8008f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 8008f06:	4d3e      	ldr	r5, [pc, #248]	; (8009000 <Out0_Process+0xfc>)
 8008f08:	682c      	ldr	r4, [r5, #0]
 8008f0a:	7a23      	ldrb	r3, [r4, #8]
  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d007      	beq.n	8008f20 <Out0_Process+0x1c>
 8008f10:	2b04      	cmp	r3, #4
 8008f12:	d005      	beq.n	8008f20 <Out0_Process+0x1c>
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 8008f14:	2b03      	cmp	r3, #3
 8008f16:	d01c      	beq.n	8008f52 <Out0_Process+0x4e>
 8008f18:	2b05      	cmp	r3, #5
 8008f1a:	d01a      	beq.n	8008f52 <Out0_Process+0x4e>
  else if (ControlState == WAIT_STATUS_OUT)
 8008f1c:	2b07      	cmp	r3, #7
 8008f1e:	d03b      	beq.n	8008f98 <Out0_Process+0x94>
 8008f20:	2308      	movs	r3, #8
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8008f22:	4a38      	ldr	r2, [pc, #224]	; (8009004 <Out0_Process+0x100>)
  pInformation->ControlState = ControlState;
 8008f24:	7223      	strb	r3, [r4, #8]
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8008f26:	2000      	movs	r0, #0
 8008f28:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8008f2c:	f000 faa8 	bl	8009480 <SetEPRxCount>
  if (pInformation->ControlState == STALLED)
 8008f30:	682b      	ldr	r3, [r5, #0]
 8008f32:	7a18      	ldrb	r0, [r3, #8]
 8008f34:	2808      	cmp	r0, #8
 8008f36:	d106      	bne.n	8008f46 <Out0_Process+0x42>
    vSetEPRxStatus(EP_RX_STALL);
 8008f38:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 8008f3c:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 8008f3e:	4932      	ldr	r1, [pc, #200]	; (8009008 <Out0_Process+0x104>)
    vSetEPTxStatus(EP_TX_STALL);
 8008f40:	4b32      	ldr	r3, [pc, #200]	; (800900c <Out0_Process+0x108>)
    vSetEPRxStatus(EP_RX_STALL);
 8008f42:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8008f44:	801a      	strh	r2, [r3, #0]
  return Post0_Process();
 8008f46:	f1a0 0009 	sub.w	r0, r0, #9
 8008f4a:	fab0 f080 	clz	r0, r0
 8008f4e:	0940      	lsrs	r0, r0, #5
}
 8008f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (pEPinfo->CopyData && save_rLength)
 8008f52:	69a3      	ldr	r3, [r4, #24]
  save_rLength = pEPinfo->Usb_rLength;
 8008f54:	8a22      	ldrh	r2, [r4, #16]
  if (pEPinfo->CopyData && save_rLength)
 8008f56:	b1b3      	cbz	r3, 8008f86 <Out0_Process+0x82>
 8008f58:	b32a      	cbz	r2, 8008fa6 <Out0_Process+0xa2>
    Length = pEPinfo->PacketSize;
 8008f5a:	8aa6      	ldrh	r6, [r4, #20]
    Buffer = (*pEPinfo->CopyData)(Length);
 8008f5c:	4296      	cmp	r6, r2
 8008f5e:	bf28      	it	cs
 8008f60:	4616      	movcs	r6, r2
 8008f62:	4630      	mov	r0, r6
 8008f64:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 8008f66:	8a23      	ldrh	r3, [r4, #16]
    Buffer = (*pEPinfo->CopyData)(Length);
 8008f68:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 8008f6a:	1b9b      	subs	r3, r3, r6
 8008f6c:	8223      	strh	r3, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8008f6e:	8a63      	ldrh	r3, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8008f70:	2000      	movs	r0, #0
    pEPinfo->Usb_rOffset += Length;
 8008f72:	4433      	add	r3, r6
 8008f74:	8263      	strh	r3, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8008f76:	f000 fa63 	bl	8009440 <GetEPRxAddr>
 8008f7a:	4632      	mov	r2, r6
 8008f7c:	4601      	mov	r1, r0
 8008f7e:	4638      	mov	r0, r7
 8008f80:	f000 f970 	bl	8009264 <PMAToUserBufferCopy>
  if (pEPinfo->Usb_rLength != 0)
 8008f84:	8a22      	ldrh	r2, [r4, #16]
 8008f86:	b982      	cbnz	r2, 8008faa <Out0_Process+0xa6>
      pInformation->ControlState = WAIT_STATUS_IN;
 8008f88:	682a      	ldr	r2, [r5, #0]
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8008f8a:	8aa3      	ldrh	r3, [r4, #20]
 8008f8c:	bb13      	cbnz	r3, 8008fd4 <Out0_Process+0xd0>
    pInformation->ControlState = OUT_DATA;
 8008f8e:	2103      	movs	r1, #3
 8008f90:	4614      	mov	r4, r2
 8008f92:	460b      	mov	r3, r1
 8008f94:	7211      	strb	r1, [r2, #8]
 8008f96:	e7c4      	b.n	8008f22 <Out0_Process+0x1e>
    (*pProperty->Process_Status_OUT)();
 8008f98:	4b1d      	ldr	r3, [pc, #116]	; (8009010 <Out0_Process+0x10c>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	4798      	blx	r3
    ControlState = STALLED;
 8008fa0:	2308      	movs	r3, #8
  pInformation->ControlState = ControlState;
 8008fa2:	682c      	ldr	r4, [r5, #0]
 8008fa4:	e7bd      	b.n	8008f22 <Out0_Process+0x1e>
 8008fa6:	4622      	mov	r2, r4
 8008fa8:	e7ef      	b.n	8008f8a <Out0_Process+0x86>
    SetEPTxCount(ENDP0, 0);
 8008faa:	2100      	movs	r1, #0
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8008fac:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8008fb0:	4b15      	ldr	r3, [pc, #84]	; (8009008 <Out0_Process+0x104>)
    SetEPTxCount(ENDP0, 0);
 8008fb2:	4608      	mov	r0, r1
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8008fb4:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 8008fb6:	f000 fa53 	bl	8009460 <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8008fba:	2130      	movs	r1, #48	; 0x30
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8008fbc:	8a23      	ldrh	r3, [r4, #16]
 8008fbe:	8aa2      	ldrh	r2, [r4, #20]
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8008fc0:	4812      	ldr	r0, [pc, #72]	; (800900c <Out0_Process+0x108>)
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8008fc2:	429a      	cmp	r2, r3
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8008fc4:	8001      	strh	r1, [r0, #0]
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8008fc6:	d916      	bls.n	8008ff6 <Out0_Process+0xf2>
    if (pEPinfo->Usb_rLength > 0)
 8008fc8:	b1bb      	cbz	r3, 8008ffa <Out0_Process+0xf6>
      pInformation->ControlState = LAST_OUT_DATA;
 8008fca:	2205      	movs	r2, #5
 8008fcc:	682c      	ldr	r4, [r5, #0]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	7222      	strb	r2, [r4, #8]
 8008fd2:	e7a6      	b.n	8008f22 <Out0_Process+0x1e>
 8008fd4:	480d      	ldr	r0, [pc, #52]	; (800900c <Out0_Process+0x108>)
      pInformation->ControlState = WAIT_STATUS_IN;
 8008fd6:	2306      	movs	r3, #6
      USB_StatusIn();
 8008fd8:	2700      	movs	r7, #0
 8008fda:	2630      	movs	r6, #48	; 0x30
 8008fdc:	f8df c034 	ldr.w	ip, [pc, #52]	; 8009014 <Out0_Process+0x110>
      pInformation->ControlState = WAIT_STATUS_IN;
 8008fe0:	7213      	strb	r3, [r2, #8]
      USB_StatusIn();
 8008fe2:	4614      	mov	r4, r2
 8008fe4:	f8dc 2c50 	ldr.w	r2, [ip, #3152]	; 0xc50
 8008fe8:	490b      	ldr	r1, [pc, #44]	; (8009018 <Out0_Process+0x114>)
 8008fea:	b292      	uxth	r2, r2
 8008fec:	4411      	add	r1, r2
 8008fee:	0049      	lsls	r1, r1, #1
 8008ff0:	600f      	str	r7, [r1, #0]
 8008ff2:	8006      	strh	r6, [r0, #0]
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 8008ff4:	e795      	b.n	8008f22 <Out0_Process+0x1e>
    pInformation->ControlState = OUT_DATA;
 8008ff6:	682a      	ldr	r2, [r5, #0]
 8008ff8:	e7c9      	b.n	8008f8e <Out0_Process+0x8a>
      pInformation->ControlState = WAIT_STATUS_IN;
 8008ffa:	682a      	ldr	r2, [r5, #0]
 8008ffc:	e7eb      	b.n	8008fd6 <Out0_Process+0xd2>
 8008ffe:	bf00      	nop
 8009000:	2000162c 	.word	0x2000162c
 8009004:	2000006c 	.word	0x2000006c
 8009008:	2000163a 	.word	0x2000163a
 800900c:	2000163c 	.word	0x2000163c
 8009010:	20001630 	.word	0x20001630
 8009014:	40005000 	.word	0x40005000
 8009018:	20003002 	.word	0x20003002

0800901c <SetDeviceAddress>:
{
 800901c:	b510      	push	{r4, lr}
  uint32_t nEP = Device_Table.Total_Endpoint;
 800901e:	4b0d      	ldr	r3, [pc, #52]	; (8009054 <SetDeviceAddress+0x38>)
 8009020:	781c      	ldrb	r4, [r3, #0]
  for (i = 0; i < nEP; i++)
 8009022:	b184      	cbz	r4, 8009046 <SetDeviceAddress+0x2a>
 8009024:	2200      	movs	r2, #0
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8009026:	f640 7e0f 	movw	lr, #3855	; 0xf0f
 800902a:	f248 0c80 	movw	ip, #32896	; 0x8080
  for (i = 0; i < nEP; i++)
 800902e:	490a      	ldr	r1, [pc, #40]	; (8009058 <SetDeviceAddress+0x3c>)
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8009030:	680b      	ldr	r3, [r1, #0]
 8009032:	ea03 030e 	and.w	r3, r3, lr
 8009036:	4313      	orrs	r3, r2
  for (i = 0; i < nEP; i++)
 8009038:	3201      	adds	r2, #1
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800903a:	ea43 030c 	orr.w	r3, r3, ip
  for (i = 0; i < nEP; i++)
 800903e:	4294      	cmp	r4, r2
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8009040:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0; i < nEP; i++)
 8009044:	d1f4      	bne.n	8009030 <SetDeviceAddress+0x14>
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 8009046:	4b05      	ldr	r3, [pc, #20]	; (800905c <SetDeviceAddress+0x40>)
 8009048:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800904c:	f8c3 0c4c 	str.w	r0, [r3, #3148]	; 0xc4c
#endif  /* STM32F10X_CL */  
}
 8009050:	bd10      	pop	{r4, pc}
 8009052:	bf00      	nop
 8009054:	2000009c 	.word	0x2000009c
 8009058:	40005c00 	.word	0x40005c00
 800905c:	40005000 	.word	0x40005000

08009060 <NOP_Process>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop

08009064 <USB_Init>:
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
 8009064:	2102      	movs	r1, #2
{
 8009066:	b410      	push	{r4}
  pInformation = &Device_Info;
 8009068:	4b06      	ldr	r3, [pc, #24]	; (8009084 <USB_Init+0x20>)
  pProperty = &Device_Property;
 800906a:	4a07      	ldr	r2, [pc, #28]	; (8009088 <USB_Init+0x24>)
  pInformation = &Device_Info;
 800906c:	4c07      	ldr	r4, [pc, #28]	; (800908c <USB_Init+0x28>)
  pProperty = &Device_Property;
 800906e:	4808      	ldr	r0, [pc, #32]	; (8009090 <USB_Init+0x2c>)
  pInformation = &Device_Info;
 8009070:	6023      	str	r3, [r4, #0]
  pProperty = &Device_Property;
 8009072:	6002      	str	r2, [r0, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8009074:	4c07      	ldr	r4, [pc, #28]	; (8009094 <USB_Init+0x30>)
 8009076:	4808      	ldr	r0, [pc, #32]	; (8009098 <USB_Init+0x34>)
  pInformation->ControlState = 2;
 8009078:	7219      	strb	r1, [r3, #8]
  pUser_Standard_Requests = &User_Standard_Requests;
 800907a:	6004      	str	r4, [r0, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 800907c:	6812      	ldr	r2, [r2, #0]
}
 800907e:	bc10      	pop	{r4}
  pProperty->Init();
 8009080:	4710      	bx	r2
 8009082:	bf00      	nop
 8009084:	2000160c 	.word	0x2000160c
 8009088:	2000006c 	.word	0x2000006c
 800908c:	2000162c 	.word	0x2000162c
 8009090:	20001630 	.word	0x20001630
 8009094:	200000c0 	.word	0x200000c0
 8009098:	20001634 	.word	0x20001634

0800909c <CTR_LP>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 800909c:	2300      	movs	r3, #0
{
 800909e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80090a2:	4c61      	ldr	r4, [pc, #388]	; (8009228 <CTR_LP+0x18c>)
{
 80090a4:	b082      	sub	sp, #8
  __IO uint16_t wEPVal = 0;
 80090a6:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80090aa:	f8d4 3c44 	ldr.w	r3, [r4, #3140]	; 0xc44
 80090ae:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800922c <CTR_LP+0x190>
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	0419      	lsls	r1, r3, #16
 80090b6:	f8a8 2000 	strh.w	r2, [r8]
 80090ba:	f140 809d 	bpl.w	80091f8 <CTR_LP+0x15c>
 80090be:	f8df a170 	ldr.w	sl, [pc, #368]	; 8009230 <CTR_LP+0x194>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 80090c2:	4e5c      	ldr	r6, [pc, #368]	; (8009234 <CTR_LP+0x198>)
        (*pEpInt_OUT[EPindex-1])();
 80090c4:	4f5c      	ldr	r7, [pc, #368]	; (8009238 <CTR_LP+0x19c>)
 80090c6:	e034      	b.n	8009132 <CTR_LP+0x96>
	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 80090c8:	f64b 79bf 	movw	r9, #49087	; 0xbfbf
	    SaveRState = _GetENDPOINT(ENDP0);
 80090cc:	f8d4 3c00 	ldr.w	r3, [r4, #3072]	; 0xc00
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	802b      	strh	r3, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 80090d4:	882b      	ldrh	r3, [r5, #0]
 80090d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80090da:	8013      	strh	r3, [r2, #0]
	    SaveRState &=  EPRX_STAT;	
 80090dc:	882b      	ldrh	r3, [r5, #0]
 80090de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80090e2:	802b      	strh	r3, [r5, #0]
	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 80090e4:	f8d4 3c00 	ldr.w	r3, [r4, #3072]	; 0xc00
 80090e8:	ea03 0309 	and.w	r3, r3, r9
 80090ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80090f0:	f083 0320 	eor.w	r3, r3, #32
 80090f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090fc:	f8c4 3c00 	str.w	r3, [r4, #3072]	; 0xc00
      if ((wIstr & ISTR_DIR) == 0)
 8009100:	f8b8 3000 	ldrh.w	r3, [r8]
 8009104:	f013 0f10 	tst.w	r3, #16
        _ClearEP_CTR_TX(ENDP0);
 8009108:	f8d4 3c00 	ldr.w	r3, [r4, #3072]	; 0xc00
      if ((wIstr & ISTR_DIR) == 0)
 800910c:	d04a      	beq.n	80091a4 <CTR_LP+0x108>
        wEPVal = _GetENDPOINT(ENDP0);
 800910e:	b29b      	uxth	r3, r3
 8009110:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal &EP_SETUP) != 0)
 8009114:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009118:	051a      	lsls	r2, r3, #20
 800911a:	d470      	bmi.n	80091fe <CTR_LP+0x162>
        else if ((wEPVal & EP_CTR_RX) != 0)
 800911c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009120:	041b      	lsls	r3, r3, #16
 8009122:	d476      	bmi.n	8009212 <CTR_LP+0x176>
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8009124:	f8d4 3c44 	ldr.w	r3, [r4, #3140]	; 0xc44
 8009128:	b29a      	uxth	r2, r3
 800912a:	041b      	lsls	r3, r3, #16
 800912c:	f8a8 2000 	strh.w	r2, [r8]
 8009130:	d562      	bpl.n	80091f8 <CTR_LP+0x15c>
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8009132:	f8b8 3000 	ldrh.w	r3, [r8]
	    SaveRState = _GetENDPOINT(ENDP0);
 8009136:	4d41      	ldr	r5, [pc, #260]	; (800923c <CTR_LP+0x1a0>)
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8009138:	f003 030f 	and.w	r3, r3, #15
      wEPVal = _GetENDPOINT(EPindex);
 800913c:	0099      	lsls	r1, r3, #2
 800913e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
	    SaveTState = SaveRState & EPTX_STAT;
 8009142:	4a3f      	ldr	r2, [pc, #252]	; (8009240 <CTR_LP+0x1a4>)
      wEPVal = _GetENDPOINT(EPindex);
 8009144:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8009148:	f88a 3000 	strb.w	r3, [sl]
    if (EPindex == 0)
 800914c:	2b00      	cmp	r3, #0
 800914e:	d0bb      	beq.n	80090c8 <CTR_LP+0x2c>
      wEPVal = _GetENDPOINT(EPindex);
 8009150:	680b      	ldr	r3, [r1, #0]
 8009152:	b29b      	uxth	r3, r3
 8009154:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 8009158:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800915c:	0418      	lsls	r0, r3, #16
 800915e:	d50a      	bpl.n	8009176 <CTR_LP+0xda>
        _ClearEP_CTR_RX(EPindex);
 8009160:	f640 728f 	movw	r2, #3983	; 0xf8f
 8009164:	680b      	ldr	r3, [r1, #0]
 8009166:	4013      	ands	r3, r2
 8009168:	600b      	str	r3, [r1, #0]
        (*pEpInt_OUT[EPindex-1])();
 800916a:	f89a 3000 	ldrb.w	r3, [sl]
 800916e:	3b01      	subs	r3, #1
 8009170:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8009174:	4798      	blx	r3
      if ((wEPVal & EP_CTR_TX) != 0)
 8009176:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800917a:	061a      	lsls	r2, r3, #24
 800917c:	d5d2      	bpl.n	8009124 <CTR_LP+0x88>
        _ClearEP_CTR_TX(EPindex);
 800917e:	f648 710f 	movw	r1, #36623	; 0x8f0f
 8009182:	f89a 3000 	ldrb.w	r3, [sl]
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800918c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	400a      	ands	r2, r1
 8009194:	601a      	str	r2, [r3, #0]
        (*pEpInt_IN[EPindex-1])();
 8009196:	f89a 3000 	ldrb.w	r3, [sl]
 800919a:	3b01      	subs	r3, #1
 800919c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80091a0:	4798      	blx	r3
 80091a2:	e7bf      	b.n	8009124 <CTR_LP+0x88>
        _ClearEP_CTR_TX(ENDP0);
 80091a4:	f648 710f 	movw	r1, #36623	; 0x8f0f
 80091a8:	400b      	ands	r3, r1
 80091aa:	f8c4 3c00 	str.w	r3, [r4, #3072]	; 0xc00
        In0_Process();
 80091ae:	f7ff fe43 	bl	8008e38 <In0_Process>
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 80091b2:	f8d4 3c00 	ldr.w	r3, [r4, #3072]	; 0xc00
 80091b6:	4a22      	ldr	r2, [pc, #136]	; (8009240 <CTR_LP+0x1a4>)
 80091b8:	ea03 0909 	and.w	r9, r3, r9
 80091bc:	882b      	ldrh	r3, [r5, #0]
 80091be:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80091c2:	882b      	ldrh	r3, [r5, #0]
 80091c4:	bf18      	it	ne
 80091c6:	f489 5980 	eorne.w	r9, r9, #4096	; 0x1000
 80091ca:	049e      	lsls	r6, r3, #18
 80091cc:	8813      	ldrh	r3, [r2, #0]
 80091ce:	bf48      	it	mi
 80091d0:	f489 5900 	eormi.w	r9, r9, #8192	; 0x2000
 80091d4:	06dd      	lsls	r5, r3, #27
 80091d6:	8813      	ldrh	r3, [r2, #0]
 80091d8:	bf48      	it	mi
 80091da:	f089 0910 	eormi.w	r9, r9, #16
 80091de:	069c      	lsls	r4, r3, #26
 80091e0:	bf48      	it	mi
 80091e2:	f089 0920 	eormi.w	r9, r9, #32
 80091e6:	f449 4900 	orr.w	r9, r9, #32768	; 0x8000
 80091ea:	4a0f      	ldr	r2, [pc, #60]	; (8009228 <CTR_LP+0x18c>)
 80091ec:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 80091f0:	fa1f f389 	uxth.w	r3, r9
 80091f4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 80091f8:	b002      	add	sp, #8
 80091fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 80091fe:	f640 718f 	movw	r1, #3983	; 0xf8f
 8009202:	f8d4 3c00 	ldr.w	r3, [r4, #3072]	; 0xc00
 8009206:	400b      	ands	r3, r1
 8009208:	f8c4 3c00 	str.w	r3, [r4, #3072]	; 0xc00
          Setup0_Process();
 800920c:	f7ff fc34 	bl	8008a78 <Setup0_Process>
		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 8009210:	e7cf      	b.n	80091b2 <CTR_LP+0x116>
          _ClearEP_CTR_RX(ENDP0);
 8009212:	f640 718f 	movw	r1, #3983	; 0xf8f
 8009216:	f8d4 3c00 	ldr.w	r3, [r4, #3072]	; 0xc00
 800921a:	400b      	ands	r3, r1
 800921c:	f8c4 3c00 	str.w	r3, [r4, #3072]	; 0xc00
          Out0_Process();
 8009220:	f7ff fe70 	bl	8008f04 <Out0_Process>
 8009224:	e7c5      	b.n	80091b2 <CTR_LP+0x116>
 8009226:	bf00      	nop
 8009228:	40005000 	.word	0x40005000
 800922c:	20001682 	.word	0x20001682
 8009230:	20001628 	.word	0x20001628
 8009234:	20000024 	.word	0x20000024
 8009238:	20000040 	.word	0x20000040
 800923c:	2000163a 	.word	0x2000163a
 8009240:	2000163c 	.word	0x2000163c

08009244 <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8009244:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8009248:	3201      	adds	r2, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 800924a:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
 800924e:	1052      	asrs	r2, r2, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8009250:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = n; i != 0; i--)
 8009254:	d005      	beq.n	8009262 <UserToPMABufferCopy+0x1e>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    *pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 8009256:	f830 3b02 	ldrh.w	r3, [r0], #2
  for (i = n; i != 0; i--)
 800925a:	3a01      	subs	r2, #1
    *pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800925c:	f821 3b04 	strh.w	r3, [r1], #4
  for (i = n; i != 0; i--)
 8009260:	d1f9      	bne.n	8009256 <UserToPMABufferCopy+0x12>
    pdwVal++;
    pbUsrBuf++;
  }
}
 8009262:	4770      	bx	lr

08009264 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8009264:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8009268:	3201      	adds	r2, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800926a:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
 800926e:	1052      	asrs	r2, r2, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8009270:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = n; i != 0; i--)
 8009274:	d006      	beq.n	8009284 <PMAToUserBufferCopy+0x20>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8009276:	680b      	ldr	r3, [r1, #0]
  for (i = n; i != 0; i--)
 8009278:	3a01      	subs	r2, #1
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800927a:	f101 0104 	add.w	r1, r1, #4
 800927e:	f820 3b02 	strh.w	r3, [r0], #2
  for (i = n; i != 0; i--)
 8009282:	d1f8      	bne.n	8009276 <PMAToUserBufferCopy+0x12>
    pbUsrBuf++;
  }
}
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop

08009288 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 8009288:	4b03      	ldr	r3, [pc, #12]	; (8009298 <SetBTABLE+0x10>)
 800928a:	f020 0007 	bic.w	r0, r0, #7
 800928e:	b280      	uxth	r0, r0
 8009290:	f8c3 0c50 	str.w	r0, [r3, #3152]	; 0xc50
}
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	40005000 	.word	0x40005000

0800929c <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 800929c:	0080      	lsls	r0, r0, #2
 800929e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80092a2:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80092a6:	6803      	ldr	r3, [r0, #0]
 80092a8:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80092ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092b0:	430b      	orrs	r3, r1
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	6003      	str	r3, [r0, #0]
}
 80092b6:	4770      	bx	lr

080092b8 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 80092b8:	0080      	lsls	r0, r0, #2
 80092ba:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80092be:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80092c2:	6803      	ldr	r3, [r0, #0]
 80092c4:	06ca      	lsls	r2, r1, #27
 80092c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	bf48      	it	mi
 80092d2:	f083 0310 	eormi.w	r3, r3, #16
 80092d6:	068a      	lsls	r2, r1, #26
 80092d8:	bf48      	it	mi
 80092da:	f083 0320 	eormi.w	r3, r3, #32
 80092de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092e6:	6003      	str	r3, [r0, #0]
}
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop

080092ec <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 80092ec:	0080      	lsls	r0, r0, #2
 80092ee:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80092f2:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80092f6:	6803      	ldr	r3, [r0, #0]
 80092f8:	04ca      	lsls	r2, r1, #19
 80092fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009302:	b29b      	uxth	r3, r3
 8009304:	bf48      	it	mi
 8009306:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 800930a:	048a      	lsls	r2, r1, #18
 800930c:	bf48      	it	mi
 800930e:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 8009312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800931a:	6003      	str	r3, [r0, #0]
}
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop

08009320 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 8009320:	0080      	lsls	r0, r0, #2
 8009322:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8009326:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800932a:	6803      	ldr	r3, [r0, #0]
 800932c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009334:	b29b      	uxth	r3, r3
 8009336:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800933a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800933e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009342:	6003      	str	r3, [r0, #0]
}
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop

08009348 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8009348:	0080      	lsls	r0, r0, #2
 800934a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800934e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8009352:	6803      	ldr	r3, [r0, #0]
 8009354:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800935c:	b29b      	uxth	r3, r3
 800935e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800936a:	6003      	str	r3, [r0, #0]
}
 800936c:	4770      	bx	lr
 800936e:	bf00      	nop

08009370 <Clear_Status_Out>:
 8009370:	f640 630f 	movw	r3, #3599	; 0xe0f
 8009374:	0080      	lsls	r0, r0, #2
 8009376:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800937a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800937e:	6802      	ldr	r2, [r0, #0]
 8009380:	4013      	ands	r3, r2
 8009382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800938a:	6003      	str	r3, [r0, #0]
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop

08009390 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8009390:	0080      	lsls	r0, r0, #2
 8009392:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8009396:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800939a:	6803      	ldr	r3, [r0, #0]
 800939c:	045b      	lsls	r3, r3, #17
 800939e:	d508      	bpl.n	80093b2 <ClearDTOG_RX+0x22>
 80093a0:	f640 720f 	movw	r2, #3855	; 0xf0f
 80093a4:	6803      	ldr	r3, [r0, #0]
 80093a6:	4013      	ands	r3, r2
 80093a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80093ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093b0:	6003      	str	r3, [r0, #0]
}
 80093b2:	4770      	bx	lr

080093b4 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 80093b4:	0080      	lsls	r0, r0, #2
 80093b6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80093ba:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80093be:	6803      	ldr	r3, [r0, #0]
 80093c0:	065b      	lsls	r3, r3, #25
 80093c2:	d508      	bpl.n	80093d6 <ClearDTOG_TX+0x22>
 80093c4:	f640 720f 	movw	r2, #3855	; 0xf0f
 80093c8:	6803      	ldr	r3, [r0, #0]
 80093ca:	4013      	ands	r3, r2
 80093cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80093d4:	6003      	str	r3, [r0, #0]
}
 80093d6:	4770      	bx	lr

080093d8 <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 80093d8:	4b07      	ldr	r3, [pc, #28]	; (80093f8 <SetEPTxAddr+0x20>)
 80093da:	0849      	lsrs	r1, r1, #1
 80093dc:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 80093e0:	0049      	lsls	r1, r1, #1
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80093e8:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 80093ec:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 80093f0:	0040      	lsls	r0, r0, #1
 80093f2:	6001      	str	r1, [r0, #0]
}
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop
 80093f8:	40005000 	.word	0x40005000

080093fc <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 80093fc:	4a06      	ldr	r2, [pc, #24]	; (8009418 <SetEPRxAddr+0x1c>)
 80093fe:	4b07      	ldr	r3, [pc, #28]	; (800941c <SetEPRxAddr+0x20>)
 8009400:	f8d2 2c50 	ldr.w	r2, [r2, #3152]	; 0xc50
 8009404:	0849      	lsrs	r1, r1, #1
 8009406:	b292      	uxth	r2, r2
 8009408:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800940c:	4413      	add	r3, r2
 800940e:	005b      	lsls	r3, r3, #1
 8009410:	0049      	lsls	r1, r1, #1
 8009412:	6019      	str	r1, [r3, #0]
}
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	40005000 	.word	0x40005000
 800941c:	20003004 	.word	0x20003004

08009420 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8009420:	4b06      	ldr	r3, [pc, #24]	; (800943c <GetEPTxAddr+0x1c>)
 8009422:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8009426:	b29b      	uxth	r3, r3
 8009428:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800942c:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8009430:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8009434:	0040      	lsls	r0, r0, #1
}
 8009436:	8800      	ldrh	r0, [r0, #0]
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop
 800943c:	40005000 	.word	0x40005000

08009440 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8009440:	4a05      	ldr	r2, [pc, #20]	; (8009458 <GetEPRxAddr+0x18>)
 8009442:	4b06      	ldr	r3, [pc, #24]	; (800945c <GetEPRxAddr+0x1c>)
 8009444:	f8d2 2c50 	ldr.w	r2, [r2, #3152]	; 0xc50
 8009448:	b292      	uxth	r2, r2
 800944a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800944e:	4413      	add	r3, r2
 8009450:	005b      	lsls	r3, r3, #1
}
 8009452:	8818      	ldrh	r0, [r3, #0]
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	40005000 	.word	0x40005000
 800945c:	20003004 	.word	0x20003004

08009460 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8009460:	4a05      	ldr	r2, [pc, #20]	; (8009478 <SetEPTxCount+0x18>)
 8009462:	4b06      	ldr	r3, [pc, #24]	; (800947c <SetEPTxCount+0x1c>)
 8009464:	f8d2 2c50 	ldr.w	r2, [r2, #3152]	; 0xc50
 8009468:	b292      	uxth	r2, r2
 800946a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800946e:	4413      	add	r3, r2
 8009470:	005b      	lsls	r3, r3, #1
 8009472:	6019      	str	r1, [r3, #0]
}
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	40005000 	.word	0x40005000
 800947c:	20003002 	.word	0x20003002

08009480 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8009480:	4a0e      	ldr	r2, [pc, #56]	; (80094bc <SetEPRxCount+0x3c>)
 8009482:	4b0f      	ldr	r3, [pc, #60]	; (80094c0 <SetEPRxCount+0x40>)
 8009484:	f8d2 2c50 	ldr.w	r2, [r2, #3152]	; 0xc50
 8009488:	293e      	cmp	r1, #62	; 0x3e
 800948a:	b292      	uxth	r2, r2
 800948c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009490:	4413      	add	r3, r2
 8009492:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009496:	d90a      	bls.n	80094ae <SetEPRxCount+0x2e>
 8009498:	094a      	lsrs	r2, r1, #5
 800949a:	06c8      	lsls	r0, r1, #27
 800949c:	bf04      	itt	eq
 800949e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80094a2:	b292      	uxtheq	r2, r2
 80094a4:	0292      	lsls	r2, r2, #10
 80094a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094aa:	601a      	str	r2, [r3, #0]
 80094ac:	4770      	bx	lr
 80094ae:	084a      	lsrs	r2, r1, #1
 80094b0:	07c9      	lsls	r1, r1, #31
 80094b2:	bf48      	it	mi
 80094b4:	3201      	addmi	r2, #1
 80094b6:	0292      	lsls	r2, r2, #10
 80094b8:	601a      	str	r2, [r3, #0]
}
 80094ba:	4770      	bx	lr
 80094bc:	40005000 	.word	0x40005000
 80094c0:	20003006 	.word	0x20003006

080094c4 <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 80094c4:	4a06      	ldr	r2, [pc, #24]	; (80094e0 <GetEPRxCount+0x1c>)
 80094c6:	4b07      	ldr	r3, [pc, #28]	; (80094e4 <GetEPRxCount+0x20>)
 80094c8:	f8d2 2c50 	ldr.w	r2, [r2, #3152]	; 0xc50
 80094cc:	b292      	uxth	r2, r2
 80094ce:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80094d2:	4413      	add	r3, r2
 80094d4:	005b      	lsls	r3, r3, #1
 80094d6:	6818      	ldr	r0, [r3, #0]
}
 80094d8:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	40005000 	.word	0x40005000
 80094e4:	20003006 	.word	0x20003006

080094e8 <ByteSwap>:
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
 80094e8:	ba40      	rev16	r0, r0
}
 80094ea:	b280      	uxth	r0, r0
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop

080094f0 <USB_SIL_Init>:
#ifndef STM32F10X_CL
  
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 80094f0:	f44f 4206 	mov.w	r2, #34304	; 0x8600
  _SetISTR(0);
 80094f4:	2000      	movs	r0, #0
 80094f6:	4b04      	ldr	r3, [pc, #16]	; (8009508 <USB_SIL_Init+0x18>)
  wInterrupt_Mask = IMR_MSK;
 80094f8:	4904      	ldr	r1, [pc, #16]	; (800950c <USB_SIL_Init+0x1c>)
  _SetISTR(0);
 80094fa:	f8c3 0c44 	str.w	r0, [r3, #3140]	; 0xc44
  wInterrupt_Mask = IMR_MSK;
 80094fe:	800a      	strh	r2, [r1, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8009500:	f8c3 2c40 	str.w	r2, [r3, #3136]	; 0xc40
  OTG_DEV_Init();
  
#endif /* STM32F10X_CL */

  return 0;
}
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop
 8009508:	40005000 	.word	0x40005000
 800950c:	20001638 	.word	0x20001638

08009510 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8009510:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

#ifndef STM32F10X_CL

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8009512:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8009516:	4628      	mov	r0, r5
{
 8009518:	460e      	mov	r6, r1
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800951a:	f7ff ffd3 	bl	80094c4 <GetEPRxCount>
 800951e:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8009520:	4628      	mov	r0, r5
 8009522:	f7ff ff8d 	bl	8009440 <GetEPRxAddr>
 8009526:	4622      	mov	r2, r4
 8009528:	4601      	mov	r1, r0
 800952a:	4630      	mov	r0, r6
 800952c:	f7ff fe9a 	bl	8009264 <PMAToUserBufferCopy>
  
#endif /* STM32F10X_CL */

  /* Return the number of received data */
  return DataLength;
}
 8009530:	4620      	mov	r0, r4
 8009532:	bd70      	pop	{r4, r5, r6, pc}

08009534 <Set_USBClock>:

/*******************************************************************************
 * Description    : Configures USB Clock input (48MHz)
 *******************************************************************************/
void Set_USBClock(void)
{
 8009534:	b508      	push	{r3, lr}
	/* Select USBCLK source */
	RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 8009536:	2000      	movs	r0, #0
 8009538:	f7f7 ff2e 	bl	8001398 <RCC_USBCLKConfig>

	/* Enable the USB clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
}
 800953c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
 8009540:	2101      	movs	r1, #1
 8009542:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8009546:	f7f7 bf39 	b.w	80013bc <RCC_APB1PeriphClockCmd>
 800954a:	bf00      	nop

0800954c <USB_Interrupts_Config>:

/*******************************************************************************
 * Description    : Configures the USB interrupts
 *******************************************************************************/
void USB_Interrupts_Config(void)
{
 800954c:	b500      	push	{lr}
	NVIC_InitTypeDef NVIC_InitStructure;

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 800954e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
{
 8009552:	b083      	sub	sp, #12
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8009554:	f7f7 fbc0 	bl	8000cd8 <NVIC_PriorityGroupConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
 8009558:	4b03      	ldr	r3, [pc, #12]	; (8009568 <USB_Interrupts_Config+0x1c>)
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800955a:	a801      	add	r0, sp, #4
	NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
 800955c:	9301      	str	r3, [sp, #4]
	NVIC_Init(&NVIC_InitStructure);
 800955e:	f7f7 fbc5 	bl	8000cec <NVIC_Init>
}
 8009562:	b003      	add	sp, #12
 8009564:	f85d fb04 	ldr.w	pc, [sp], #4
 8009568:	01000114 	.word	0x01000114

0800956c <USB_Cable_Config>:
/*******************************************************************************
 * Description    : Software Connection/Disconnection of USB Cable
 *******************************************************************************/
void USB_Cable_Config(FunctionalState NewState)
{
}
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop

08009570 <Get_SerialNum>:
 *******************************************************************************/
void Get_SerialNum(void)
{
	uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

	Device_Serial0 = *(__IO uint32_t*) (0x1FFFF7E8);
 8009570:	4a42      	ldr	r2, [pc, #264]	; (800967c <Get_SerialNum+0x10c>)
 8009572:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
	Device_Serial1 = *(__IO uint32_t*) (0x1FFFF7EC);
 8009576:	f8d2 17ec 	ldr.w	r1, [r2, #2028]	; 0x7ec
	Device_Serial2 = *(__IO uint32_t*) (0x1FFFF7F0);
 800957a:	f8d2 27f0 	ldr.w	r2, [r2, #2032]	; 0x7f0

	Device_Serial0 += Device_Serial2;

	if (Device_Serial0 != 0)
 800957e:	189b      	adds	r3, r3, r2
 8009580:	d100      	bne.n	8009584 <Get_SerialNum+0x14>
	{
		IntToUnicode(Device_Serial0, &Virtual_Com_Port_StringSerial[2], 8);
		IntToUnicode(Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
	}
}
 8009582:	4770      	bx	lr
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
		}

		value = value << 4;

		pbuf[2 * idx + 1] = 0;
 8009584:	f04f 0c00 	mov.w	ip, #0
			pbuf[2 * idx] = (value >> 28) + '0';
 8009588:	4a3d      	ldr	r2, [pc, #244]	; (8009680 <Get_SerialNum+0x110>)
		if (((value >> 28)) < 0xA)
 800958a:	0f18      	lsrs	r0, r3, #28
 800958c:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009590:	bf2c      	ite	cs
 8009592:	3037      	addcs	r0, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 8009594:	3030      	addcc	r0, #48	; 0x30
 8009596:	7090      	strb	r0, [r2, #2]
		if (((value >> 28)) < 0xA)
 8009598:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800959c:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800959e:	bf8c      	ite	hi
 80095a0:	3037      	addhi	r0, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 80095a2:	3030      	addls	r0, #48	; 0x30
 80095a4:	7110      	strb	r0, [r2, #4]
		if (((value >> 28)) < 0xA)
 80095a6:	f3c3 5003 	ubfx	r0, r3, #20, #4
 80095aa:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095ac:	bf8c      	ite	hi
 80095ae:	3037      	addhi	r0, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 80095b0:	3030      	addls	r0, #48	; 0x30
 80095b2:	7190      	strb	r0, [r2, #6]
		if (((value >> 28)) < 0xA)
 80095b4:	f3c3 4003 	ubfx	r0, r3, #16, #4
 80095b8:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095ba:	bf8c      	ite	hi
 80095bc:	3037      	addhi	r0, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 80095be:	3030      	addls	r0, #48	; 0x30
 80095c0:	7210      	strb	r0, [r2, #8]
		if (((value >> 28)) < 0xA)
 80095c2:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80095c6:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095c8:	bf8c      	ite	hi
 80095ca:	3037      	addhi	r0, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 80095cc:	3030      	addls	r0, #48	; 0x30
 80095ce:	7290      	strb	r0, [r2, #10]
		if (((value >> 28)) < 0xA)
 80095d0:	f3c3 2003 	ubfx	r0, r3, #8, #4
 80095d4:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095d6:	bf8c      	ite	hi
 80095d8:	3037      	addhi	r0, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 80095da:	3030      	addls	r0, #48	; 0x30
 80095dc:	7310      	strb	r0, [r2, #12]
		if (((value >> 28)) < 0xA)
 80095de:	f3c3 1003 	ubfx	r0, r3, #4, #4
 80095e2:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095e4:	bf8c      	ite	hi
 80095e6:	3037      	addhi	r0, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 80095e8:	3030      	addls	r0, #48	; 0x30
		pbuf[2 * idx + 1] = 0;
 80095ea:	f882 c003 	strb.w	ip, [r2, #3]
			pbuf[2 * idx] = (value >> 28) + '0';
 80095ee:	7390      	strb	r0, [r2, #14]
		pbuf[2 * idx + 1] = 0;
 80095f0:	f04f 0c00 	mov.w	ip, #0
 80095f4:	2000      	movs	r0, #0
 80095f6:	f882 c005 	strb.w	ip, [r2, #5]
 80095fa:	73d0      	strb	r0, [r2, #15]
 80095fc:	f04f 0c00 	mov.w	ip, #0
 8009600:	2000      	movs	r0, #0
 8009602:	f882 c007 	strb.w	ip, [r2, #7]
 8009606:	7450      	strb	r0, [r2, #17]
 8009608:	f04f 0c00 	mov.w	ip, #0
 800960c:	2000      	movs	r0, #0
 800960e:	f882 c009 	strb.w	ip, [r2, #9]
 8009612:	74d0      	strb	r0, [r2, #19]
 8009614:	f04f 0c00 	mov.w	ip, #0
 8009618:	2000      	movs	r0, #0
		if (((value >> 28)) < 0xA)
 800961a:	f003 030f 	and.w	r3, r3, #15
 800961e:	2b09      	cmp	r3, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 8009620:	bf94      	ite	ls
 8009622:	3330      	addls	r3, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009624:	3337      	addhi	r3, #55	; 0x37
 8009626:	7413      	strb	r3, [r2, #16]
		if (((value >> 28)) < 0xA)
 8009628:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
 800962c:	ea4f 7311 	mov.w	r3, r1, lsr #28
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009630:	bf2c      	ite	cs
 8009632:	3337      	addcs	r3, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 8009634:	3330      	addcc	r3, #48	; 0x30
 8009636:	7493      	strb	r3, [r2, #18]
		if (((value >> 28)) < 0xA)
 8009638:	f3c1 6303 	ubfx	r3, r1, #24, #4
 800963c:	2b09      	cmp	r3, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800963e:	bf8c      	ite	hi
 8009640:	3337      	addhi	r3, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 8009642:	3330      	addls	r3, #48	; 0x30
 8009644:	7513      	strb	r3, [r2, #20]
		if (((value >> 28)) < 0xA)
 8009646:	f3c1 5303 	ubfx	r3, r1, #20, #4
 800964a:	2b09      	cmp	r3, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800964c:	bf8c      	ite	hi
 800964e:	3337      	addhi	r3, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 8009650:	3330      	addls	r3, #48	; 0x30
 8009652:	7593      	strb	r3, [r2, #22]
		if (((value >> 28)) < 0xA)
 8009654:	f3c1 4303 	ubfx	r3, r1, #16, #4
 8009658:	2b09      	cmp	r3, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800965a:	bf94      	ite	ls
 800965c:	3330      	addls	r3, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800965e:	3337      	addhi	r3, #55	; 0x37
		pbuf[2 * idx + 1] = 0;
 8009660:	f882 c00b 	strb.w	ip, [r2, #11]
 8009664:	7550      	strb	r0, [r2, #21]
 8009666:	f04f 0c00 	mov.w	ip, #0
 800966a:	2000      	movs	r0, #0
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800966c:	7613      	strb	r3, [r2, #24]
		pbuf[2 * idx + 1] = 0;
 800966e:	2300      	movs	r3, #0
 8009670:	f882 c00d 	strb.w	ip, [r2, #13]
 8009674:	75d0      	strb	r0, [r2, #23]
 8009676:	7653      	strb	r3, [r2, #25]
}
 8009678:	4770      	bx	lr
 800967a:	bf00      	nop
 800967c:	1ffff000 	.word	0x1ffff000
 8009680:	20000008 	.word	0x20000008

08009684 <EP1_IN_Callback.part.0>:
{
	uint16_t USB_Tx_length;
	uint8_t head;

	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 8009684:	2001      	movs	r0, #1
	head = serial_tx_buffer_head;
	txUsbLock = 0; // this may be removed
 8009686:	2100      	movs	r1, #0
void EP1_IN_Callback(void)
 8009688:	b570      	push	{r4, r5, r6, lr}
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 800968a:	4a2b      	ldr	r2, [pc, #172]	; (8009738 <EP1_IN_Callback.part.0+0xb4>)
	head = serial_tx_buffer_head;
 800968c:	4b2b      	ldr	r3, [pc, #172]	; (800973c <EP1_IN_Callback.part.0+0xb8>)

	if ((head != serial_tx_buffer_tail)) {
 800968e:	4d2c      	ldr	r5, [pc, #176]	; (8009740 <EP1_IN_Callback.part.0+0xbc>)
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 8009690:	7010      	strb	r0, [r2, #0]
	txUsbLock = 0; // this may be removed
 8009692:	7011      	strb	r1, [r2, #0]
	head = serial_tx_buffer_head;
 8009694:	781b      	ldrb	r3, [r3, #0]
	if ((head != serial_tx_buffer_tail)) {
 8009696:	782a      	ldrb	r2, [r5, #0]
 8009698:	4293      	cmp	r3, r2
 800969a:	d041      	beq.n	8009720 <EP1_IN_Callback.part.0+0x9c>
		if (head > serial_tx_buffer_tail)
 800969c:	782a      	ldrb	r2, [r5, #0]
 800969e:	4293      	cmp	r3, r2
 80096a0:	d93f      	bls.n	8009722 <EP1_IN_Callback.part.0+0x9e>
			USB_Tx_length = head - serial_tx_buffer_tail;
 80096a2:	7829      	ldrb	r1, [r5, #0]
 80096a4:	1a5b      	subs	r3, r3, r1
 80096a6:	b299      	uxth	r1, r3
		else
			USB_Tx_length = TX_BUFFER_SIZE - serial_tx_buffer_tail + head;

		if (USB_Tx_length != 0) {
 80096a8:	2900      	cmp	r1, #0
 80096aa:	d039      	beq.n	8009720 <EP1_IN_Callback.part.0+0x9c>
			if (USB_Tx_length > 64)
 80096ac:	2940      	cmp	r1, #64	; 0x40
 80096ae:	bf28      	it	cs
 80096b0:	2140      	movcs	r1, #64	; 0x40
				USB_Tx_length = 64;

			// UserToPMABufferCopy(&serial_tx_buffer[serial_tx_buffer_tail], ENDP1_TXADDR, USB_Tx_length);

			{
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 80096b2:	782b      	ldrb	r3, [r5, #0]
 80096b4:	4c23      	ldr	r4, [pc, #140]	; (8009744 <EP1_IN_Callback.part.0+0xc0>)
				uint32_t n = (USB_Tx_length + 1) >> 1; /* n = (wNBytes + 1) / 2 */
 80096b6:	f101 0e01 	add.w	lr, r1, #1
				uint32_t i;
				uint16_t temp1;
				uint16_t *pdwVal= (uint16_t *)(ENDP1_TXADDR * 2 + PMAAddr);

				for (i = 0; i<n; i++) {
 80096ba:	2200      	movs	r2, #0
				uint32_t n = (USB_Tx_length + 1) >> 1; /* n = (wNBytes + 1) / 2 */
 80096bc:	4822      	ldr	r0, [pc, #136]	; (8009748 <EP1_IN_Callback.part.0+0xc4>)
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 80096be:	4423      	add	r3, r4
				uint32_t n = (USB_Tx_length + 1) >> 1; /* n = (wNBytes + 1) / 2 */
 80096c0:	f3ce 0e4e 	ubfx	lr, lr, #1, #15
				for (i = 0; i<n; i++) {
 80096c4:	e00c      	b.n	80096e0 <EP1_IN_Callback.part.0+0x5c>
 80096c6:	f833 cb02 	ldrh.w	ip, [r3], #2
 80096ca:	3201      	adds	r2, #1
						pbUsrBuf = serial_tx_buffer;

					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
					pdwVal++;
					pbUsrBuf++;
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
 80096cc:	1b1e      	subs	r6, r3, r4
						pbUsrBuf = serial_tx_buffer;
 80096ce:	2e80      	cmp	r6, #128	; 0x80
 80096d0:	bf08      	it	eq
 80096d2:	4623      	moveq	r3, r4
				for (i = 0; i<n; i++) {
 80096d4:	4596      	cmp	lr, r2
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 80096d6:	f820 cc04 	strh.w	ip, [r0, #-4]
				for (i = 0; i<n; i++) {
 80096da:	f100 0004 	add.w	r0, r0, #4
 80096de:	d010      	beq.n	8009702 <EP1_IN_Callback.part.0+0x7e>
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
 80096e0:	f1a3 0c7f 	sub.w	ip, r3, #127	; 0x7f
 80096e4:	45a4      	cmp	ip, r4
 80096e6:	d1ee      	bne.n	80096c6 <EP1_IN_Callback.part.0+0x42>
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 80096e8:	f893 c000 	ldrb.w	ip, [r3]
 80096ec:	7823      	ldrb	r3, [r4, #0]
				for (i = 0; i<n; i++) {
 80096ee:	3201      	adds	r2, #1
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 80096f0:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
				for (i = 0; i<n; i++) {
 80096f4:	4596      	cmp	lr, r2
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 80096f6:	f820 cc04 	strh.w	ip, [r0, #-4]
					pbUsrBuf++;
 80096fa:	4b14      	ldr	r3, [pc, #80]	; (800974c <EP1_IN_Callback.part.0+0xc8>)
				for (i = 0; i<n; i++) {
 80096fc:	f100 0004 	add.w	r0, r0, #4
 8009700:	d1ee      	bne.n	80096e0 <EP1_IN_Callback.part.0+0x5c>
					}
			}

		serial_tx_buffer_tail += USB_Tx_length;
 8009702:	782b      	ldrb	r3, [r5, #0]
 8009704:	440b      	add	r3, r1
 8009706:	b2db      	uxtb	r3, r3
 8009708:	702b      	strb	r3, [r5, #0]
		if (serial_tx_buffer_tail >= TX_BUFFER_SIZE)
 800970a:	782b      	ldrb	r3, [r5, #0]
 800970c:	061b      	lsls	r3, r3, #24
 800970e:	d40e      	bmi.n	800972e <EP1_IN_Callback.part.0+0xaa>
			serial_tx_buffer_tail -= TX_BUFFER_SIZE;
		SetEPTxCount(ENDP1, USB_Tx_length);
 8009710:	2001      	movs	r0, #1
 8009712:	f7ff fea5 	bl	8009460 <SetEPTxCount>
		SetEPTxValid(ENDP1);
		}
	}
}
 8009716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		SetEPTxValid(ENDP1);
 800971a:	2001      	movs	r0, #1
 800971c:	f7ff be00 	b.w	8009320 <SetEPTxValid>
}
 8009720:	bd70      	pop	{r4, r5, r6, pc}
			USB_Tx_length = TX_BUFFER_SIZE - serial_tx_buffer_tail + head;
 8009722:	782a      	ldrb	r2, [r5, #0]
 8009724:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8009728:	1a89      	subs	r1, r1, r2
 800972a:	b289      	uxth	r1, r1
 800972c:	e7bc      	b.n	80096a8 <EP1_IN_Callback.part.0+0x24>
			serial_tx_buffer_tail -= TX_BUFFER_SIZE;
 800972e:	782b      	ldrb	r3, [r5, #0]
 8009730:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8009734:	702b      	strb	r3, [r5, #0]
 8009736:	e7eb      	b.n	8009710 <EP1_IN_Callback.part.0+0x8c>
 8009738:	20001680 	.word	0x20001680
 800973c:	200013e8 	.word	0x200013e8
 8009740:	200013e9 	.word	0x200013e9
 8009744:	20001368 	.word	0x20001368
 8009748:	40006184 	.word	0x40006184
 800974c:	20001369 	.word	0x20001369

08009750 <EP3_OUT_Callback>:
{
 8009750:	b510      	push	{r4, lr}
	USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 8009752:	4c07      	ldr	r4, [pc, #28]	; (8009770 <EP3_OUT_Callback+0x20>)
 8009754:	2003      	movs	r0, #3
 8009756:	4621      	mov	r1, r4
 8009758:	f7ff feda 	bl	8009510 <USB_SIL_Read>
 800975c:	4601      	mov	r1, r0
	OnUsbDataRx(USB_Rx_Buffer, USB_Rx_Cnt);
 800975e:	4620      	mov	r0, r4
 8009760:	b2c9      	uxtb	r1, r1
 8009762:	f7fc fe83 	bl	800646c <OnUsbDataRx>
}
 8009766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SetEPRxValid(ENDP3);
 800976a:	2003      	movs	r0, #3
 800976c:	f7ff bdec 	b.w	8009348 <SetEPRxValid>
 8009770:	20001640 	.word	0x20001640

08009774 <EP1_IN_Callback>:
	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
 8009774:	4b04      	ldr	r3, [pc, #16]	; (8009788 <EP1_IN_Callback+0x14>)
 8009776:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
 800977a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800977e:	2b20      	cmp	r3, #32
 8009780:	d101      	bne.n	8009786 <EP1_IN_Callback+0x12>
 8009782:	f7ff bf7f 	b.w	8009684 <EP1_IN_Callback.part.0>
}
 8009786:	4770      	bx	lr
 8009788:	40005000 	.word	0x40005000

0800978c <SOF_Callback>:

/*	\brief Start Of Frame (SOF) callback
 */
void SOF_Callback(void)
{
	if(bDeviceState == CONFIGURED)
 800978c:	4b06      	ldr	r3, [pc, #24]	; (80097a8 <SOF_Callback+0x1c>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2b05      	cmp	r3, #5
 8009792:	d000      	beq.n	8009796 <SOF_Callback+0xa>
	{
		/* Check the data to be sent through IN pipe */
		EP1_IN_Callback();
	}
}
 8009794:	4770      	bx	lr
	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
 8009796:	4b05      	ldr	r3, [pc, #20]	; (80097ac <SOF_Callback+0x20>)
 8009798:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
 800979c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80097a0:	2b20      	cmp	r3, #32
 80097a2:	d1f7      	bne.n	8009794 <SOF_Callback+0x8>
 80097a4:	f7ff bf6e 	b.w	8009684 <EP1_IN_Callback.part.0>
 80097a8:	20001688 	.word	0x20001688
 80097ac:	40005000 	.word	0x40005000

080097b0 <USB_Istr>:
* Return         :
*******************************************************************************/
void USB_Istr(void)
{

  wIstr = _GetISTR();
 80097b0:	4918      	ldr	r1, [pc, #96]	; (8009814 <USB_Istr+0x64>)
{
 80097b2:	b570      	push	{r4, r5, r6, lr}
  wIstr = _GetISTR();
 80097b4:	f8d1 3c44 	ldr.w	r3, [r1, #3140]	; 0xc44
 80097b8:	4c17      	ldr	r4, [pc, #92]	; (8009818 <USB_Istr+0x68>)
 80097ba:	b29b      	uxth	r3, r3

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 80097bc:	4d17      	ldr	r5, [pc, #92]	; (800981c <USB_Istr+0x6c>)
  wIstr = _GetISTR();
 80097be:	8023      	strh	r3, [r4, #0]
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 80097c0:	8822      	ldrh	r2, [r4, #0]
 80097c2:	882b      	ldrh	r3, [r5, #0]
 80097c4:	401a      	ands	r2, r3
 80097c6:	0590      	lsls	r0, r2, #22
 80097c8:	d416      	bmi.n	80097f8 <USB_Istr+0x48>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 80097ca:	8822      	ldrh	r2, [r4, #0]
 80097cc:	401a      	ands	r2, r3
 80097ce:	0412      	lsls	r2, r2, #16
 80097d0:	d40e      	bmi.n	80097f0 <USB_Istr+0x40>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 80097d2:	8822      	ldrh	r2, [r4, #0]
 80097d4:	4013      	ands	r3, r2
 80097d6:	055b      	lsls	r3, r3, #21
 80097d8:	d509      	bpl.n	80097ee <USB_Istr+0x3e>
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 80097da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _SetISTR((uint16_t)CLR_RESET);
 80097de:	f64f 31ff 	movw	r1, #64511	; 0xfbff
 80097e2:	4a0c      	ldr	r2, [pc, #48]	; (8009814 <USB_Istr+0x64>)
    Device_Property.Reset();
 80097e4:	4b0e      	ldr	r3, [pc, #56]	; (8009820 <USB_Istr+0x70>)
 80097e6:	685b      	ldr	r3, [r3, #4]
    _SetISTR((uint16_t)CLR_RESET);
 80097e8:	f8c2 1c44 	str.w	r1, [r2, #3140]	; 0xc44
    Device_Property.Reset();
 80097ec:	4718      	bx	r3
} /* USB_Istr */
 80097ee:	bd70      	pop	{r4, r5, r6, pc}
    CTR_LP();
 80097f0:	f7ff fc54 	bl	800909c <CTR_LP>
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 80097f4:	882b      	ldrh	r3, [r5, #0]
 80097f6:	e7ec      	b.n	80097d2 <USB_Istr+0x22>
    _SetISTR((uint16_t)CLR_SOF);
 80097f8:	f64f 53ff 	movw	r3, #65023	; 0xfdff
    bIntPackSOF++;
 80097fc:	4a09      	ldr	r2, [pc, #36]	; (8009824 <USB_Istr+0x74>)
    _SetISTR((uint16_t)CLR_SOF);
 80097fe:	f8c1 3c44 	str.w	r3, [r1, #3140]	; 0xc44
    bIntPackSOF++;
 8009802:	7813      	ldrb	r3, [r2, #0]
 8009804:	3301      	adds	r3, #1
 8009806:	b2db      	uxtb	r3, r3
 8009808:	7013      	strb	r3, [r2, #0]
    SOF_Callback();
 800980a:	f7ff ffbf 	bl	800978c <SOF_Callback>
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 800980e:	882b      	ldrh	r3, [r5, #0]
 8009810:	e7db      	b.n	80097ca <USB_Istr+0x1a>
 8009812:	bf00      	nop
 8009814:	40005000 	.word	0x40005000
 8009818:	20001682 	.word	0x20001682
 800981c:	20001638 	.word	0x20001638
 8009820:	2000006c 	.word	0x2000006c
 8009824:	20001681 	.word	0x20001681

08009828 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 8009828:	4b03      	ldr	r3, [pc, #12]	; (8009838 <Virtual_Com_Port_SetConfiguration+0x10>)
 800982a:	7a9b      	ldrb	r3, [r3, #10]
 800982c:	b113      	cbz	r3, 8009834 <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800982e:	2205      	movs	r2, #5
 8009830:	4b02      	ldr	r3, [pc, #8]	; (800983c <Virtual_Com_Port_SetConfiguration+0x14>)
 8009832:	601a      	str	r2, [r3, #0]
  }
}
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	2000160c 	.word	0x2000160c
 800983c:	20001688 	.word	0x20001688

08009840 <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 8009840:	2204      	movs	r2, #4
 8009842:	4b01      	ldr	r3, [pc, #4]	; (8009848 <Virtual_Com_Port_SetDeviceAddress+0x8>)
 8009844:	601a      	str	r2, [r3, #0]
}
 8009846:	4770      	bx	lr
 8009848:	20001688 	.word	0x20001688

0800984c <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 800984c:	4b03      	ldr	r3, [pc, #12]	; (800985c <Virtual_Com_Port_Status_In+0x10>)
 800984e:	781a      	ldrb	r2, [r3, #0]
 8009850:	2a20      	cmp	r2, #32
  {
    Request = 0;
 8009852:	bf04      	itt	eq
 8009854:	2200      	moveq	r2, #0
 8009856:	701a      	strbeq	r2, [r3, #0]
  }
}
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	20001684 	.word	0x20001684

08009860 <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop

08009864 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8009864:	2821      	cmp	r0, #33	; 0x21
 8009866:	d016      	beq.n	8009896 <Virtual_Com_Port_Data_Setup+0x32>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 8009868:	2820      	cmp	r0, #32
 800986a:	4603      	mov	r3, r0
 800986c:	d111      	bne.n	8009892 <Virtual_Com_Port_Data_Setup+0x2e>
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800986e:	4a10      	ldr	r2, [pc, #64]	; (80098b0 <Virtual_Com_Port_Data_Setup+0x4c>)
 8009870:	6812      	ldr	r2, [r2, #0]
 8009872:	7811      	ldrb	r1, [r2, #0]
 8009874:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8009878:	2921      	cmp	r1, #33	; 0x21
 800987a:	d115      	bne.n	80098a8 <Virtual_Com_Port_Data_Setup+0x44>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 800987c:	480d      	ldr	r0, [pc, #52]	; (80098b4 <Virtual_Com_Port_Data_Setup+0x50>)
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 800987e:	490e      	ldr	r1, [pc, #56]	; (80098b8 <Virtual_Com_Port_Data_Setup+0x54>)
    Request = SET_LINE_CODING;
 8009880:	7003      	strb	r3, [r0, #0]
{
 8009882:	b510      	push	{r4, lr}
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8009884:	2400      	movs	r4, #0
  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8009886:	6191      	str	r1, [r2, #24]
  (*CopyRoutine)(0);
 8009888:	4620      	mov	r0, r4
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800988a:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 800988c:	4788      	blx	r1
  return USB_SUCCESS;
 800988e:	4620      	mov	r0, r4
}
 8009890:	bd10      	pop	{r4, pc}
    return USB_UNSUPPORT;
 8009892:	2002      	movs	r0, #2
}
 8009894:	4770      	bx	lr
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8009896:	4b06      	ldr	r3, [pc, #24]	; (80098b0 <Virtual_Com_Port_Data_Setup+0x4c>)
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	7813      	ldrb	r3, [r2, #0]
 800989c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098a0:	2b21      	cmp	r3, #33	; 0x21
 80098a2:	d1f6      	bne.n	8009892 <Virtual_Com_Port_Data_Setup+0x2e>
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 80098a4:	4905      	ldr	r1, [pc, #20]	; (80098bc <Virtual_Com_Port_Data_Setup+0x58>)
 80098a6:	e7ec      	b.n	8009882 <Virtual_Com_Port_Data_Setup+0x1e>
    Request = SET_LINE_CODING;
 80098a8:	4a02      	ldr	r2, [pc, #8]	; (80098b4 <Virtual_Com_Port_Data_Setup+0x50>)
    return USB_UNSUPPORT;
 80098aa:	2002      	movs	r0, #2
    Request = SET_LINE_CODING;
 80098ac:	7013      	strb	r3, [r2, #0]
  if (CopyRoutine == NULL)
 80098ae:	4770      	bx	lr
 80098b0:	2000162c 	.word	0x2000162c
 80098b4:	20001684 	.word	0x20001684
 80098b8:	08009a49 	.word	0x08009a49
 80098bc:	080098d1 	.word	0x080098d1

080098c0 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 80098c0:	b921      	cbnz	r1, 80098cc <Virtual_Com_Port_Get_Interface_Setting+0xc>
  }
  else if (Interface > 1)
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 80098c2:	2801      	cmp	r0, #1
 80098c4:	bf8c      	ite	hi
 80098c6:	2002      	movhi	r0, #2
 80098c8:	2000      	movls	r0, #0
 80098ca:	4770      	bx	lr
    return USB_UNSUPPORT;
 80098cc:	2002      	movs	r0, #2
}
 80098ce:	4770      	bx	lr

080098d0 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 80098d0:	b108      	cbz	r0, 80098d6 <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 80098d2:	4803      	ldr	r0, [pc, #12]	; (80098e0 <Virtual_Com_Port_GetLineCoding+0x10>)
}
 80098d4:	4770      	bx	lr
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 80098d6:	2208      	movs	r2, #8
 80098d8:	4b02      	ldr	r3, [pc, #8]	; (80098e4 <Virtual_Com_Port_GetLineCoding+0x14>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	821a      	strh	r2, [r3, #16]
    return NULL;
 80098de:	4770      	bx	lr
 80098e0:	200000e4 	.word	0x200000e4
 80098e4:	2000162c 	.word	0x2000162c

080098e8 <Virtual_Com_Port_init>:
{
 80098e8:	b510      	push	{r4, lr}
  pInformation->Current_Configuration = 0;
 80098ea:	2400      	movs	r4, #0
  Get_SerialNum();
 80098ec:	f7ff fe40 	bl	8009570 <Get_SerialNum>
  pInformation->Current_Configuration = 0;
 80098f0:	4b04      	ldr	r3, [pc, #16]	; (8009904 <Virtual_Com_Port_init+0x1c>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	729c      	strb	r4, [r3, #10]
  PowerOn();
 80098f6:	f000 f8b3 	bl	8009a60 <PowerOn>
  USB_SIL_Init();
 80098fa:	f7ff fdf9 	bl	80094f0 <USB_SIL_Init>
  bDeviceState = UNCONNECTED;
 80098fe:	4b02      	ldr	r3, [pc, #8]	; (8009908 <Virtual_Com_Port_init+0x20>)
 8009900:	601c      	str	r4, [r3, #0]
}
 8009902:	bd10      	pop	{r4, pc}
 8009904:	2000162c 	.word	0x2000162c
 8009908:	20001688 	.word	0x20001688

0800990c <Virtual_Com_Port_Reset>:
{
 800990c:	b510      	push	{r4, lr}
  pInformation->Current_Configuration = 0;
 800990e:	2400      	movs	r4, #0
 8009910:	4b32      	ldr	r3, [pc, #200]	; (80099dc <Virtual_Com_Port_Reset+0xd0>)
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8009912:	4a33      	ldr	r2, [pc, #204]	; (80099e0 <Virtual_Com_Port_Reset+0xd4>)
  pInformation->Current_Configuration = 0;
 8009914:	681b      	ldr	r3, [r3, #0]
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8009916:	79d2      	ldrb	r2, [r2, #7]
  pInformation->Current_Configuration = 0;
 8009918:	815c      	strh	r4, [r3, #10]
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800991a:	725a      	strb	r2, [r3, #9]
  SetBTABLE(BTABLE_ADDRESS);
 800991c:	4620      	mov	r0, r4
 800991e:	f7ff fcb3 	bl	8009288 <SetBTABLE>
  SetEPType(ENDP0, EP_CONTROL);
 8009922:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009926:	4620      	mov	r0, r4
 8009928:	f7ff fcb8 	bl	800929c <SetEPType>
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800992c:	2110      	movs	r1, #16
 800992e:	4620      	mov	r0, r4
 8009930:	f7ff fcc2 	bl	80092b8 <SetEPTxStatus>
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8009934:	2140      	movs	r1, #64	; 0x40
 8009936:	4620      	mov	r0, r4
 8009938:	f7ff fd60 	bl	80093fc <SetEPRxAddr>
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800993c:	2180      	movs	r1, #128	; 0x80
 800993e:	4620      	mov	r0, r4
 8009940:	f7ff fd4a 	bl	80093d8 <SetEPTxAddr>
  Clear_Status_Out(ENDP0);
 8009944:	4620      	mov	r0, r4
 8009946:	f7ff fd13 	bl	8009370 <Clear_Status_Out>
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800994a:	4b26      	ldr	r3, [pc, #152]	; (80099e4 <Virtual_Com_Port_Reset+0xd8>)
 800994c:	4620      	mov	r0, r4
 800994e:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8009952:	f7ff fd95 	bl	8009480 <SetEPRxCount>
  SetEPRxValid(ENDP0);
 8009956:	4620      	mov	r0, r4
 8009958:	f7ff fcf6 	bl	8009348 <SetEPRxValid>
  SetEPType(ENDP1, EP_BULK);
 800995c:	4621      	mov	r1, r4
 800995e:	2001      	movs	r0, #1
 8009960:	f7ff fc9c 	bl	800929c <SetEPType>
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 8009964:	21c0      	movs	r1, #192	; 0xc0
 8009966:	2001      	movs	r0, #1
 8009968:	f7ff fd36 	bl	80093d8 <SetEPTxAddr>
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 800996c:	2001      	movs	r0, #1
 800996e:	2120      	movs	r1, #32
 8009970:	f7ff fca2 	bl	80092b8 <SetEPTxStatus>
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8009974:	4621      	mov	r1, r4
 8009976:	2001      	movs	r0, #1
 8009978:	f7ff fcb8 	bl	80092ec <SetEPRxStatus>
  SetEPType(ENDP2, EP_INTERRUPT);
 800997c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009980:	2002      	movs	r0, #2
 8009982:	f7ff fc8b 	bl	800929c <SetEPType>
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 8009986:	2002      	movs	r0, #2
 8009988:	f44f 7180 	mov.w	r1, #256	; 0x100
 800998c:	f7ff fd24 	bl	80093d8 <SetEPTxAddr>
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 8009990:	4621      	mov	r1, r4
 8009992:	2002      	movs	r0, #2
 8009994:	f7ff fcaa 	bl	80092ec <SetEPRxStatus>
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 8009998:	2002      	movs	r0, #2
 800999a:	2120      	movs	r1, #32
 800999c:	f7ff fc8c 	bl	80092b8 <SetEPTxStatus>
  SetEPType(ENDP3, EP_BULK);
 80099a0:	4621      	mov	r1, r4
 80099a2:	2003      	movs	r0, #3
 80099a4:	f7ff fc7a 	bl	800929c <SetEPType>
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 80099a8:	f44f 7188 	mov.w	r1, #272	; 0x110
 80099ac:	2003      	movs	r0, #3
 80099ae:	f7ff fd25 	bl	80093fc <SetEPRxAddr>
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 80099b2:	2140      	movs	r1, #64	; 0x40
 80099b4:	2003      	movs	r0, #3
 80099b6:	f7ff fd63 	bl	8009480 <SetEPRxCount>
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 80099ba:	2003      	movs	r0, #3
 80099bc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80099c0:	f7ff fc94 	bl	80092ec <SetEPRxStatus>
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 80099c4:	4621      	mov	r1, r4
 80099c6:	2003      	movs	r0, #3
 80099c8:	f7ff fc76 	bl	80092b8 <SetEPTxStatus>
  SetDeviceAddress(0);
 80099cc:	4620      	mov	r0, r4
 80099ce:	f7ff fb25 	bl	800901c <SetDeviceAddress>
  bDeviceState = ATTACHED;
 80099d2:	2201      	movs	r2, #1
 80099d4:	4b04      	ldr	r3, [pc, #16]	; (80099e8 <Virtual_Com_Port_Reset+0xdc>)
 80099d6:	601a      	str	r2, [r3, #0]
}
 80099d8:	bd10      	pop	{r4, pc}
 80099da:	bf00      	nop
 80099dc:	2000162c 	.word	0x2000162c
 80099e0:	0800afa0 	.word	0x0800afa0
 80099e4:	2000006c 	.word	0x2000006c
 80099e8:	20001688 	.word	0x20001688

080099ec <Virtual_Com_Port_GetDeviceDescriptor>:
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 80099ec:	4901      	ldr	r1, [pc, #4]	; (80099f4 <Virtual_Com_Port_GetDeviceDescriptor+0x8>)
 80099ee:	f7ff b835 	b.w	8008a5c <Standard_GetDescriptorData>
 80099f2:	bf00      	nop
 80099f4:	20000064 	.word	0x20000064

080099f8 <Virtual_Com_Port_GetConfigDescriptor>:
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 80099f8:	4901      	ldr	r1, [pc, #4]	; (8009a00 <Virtual_Com_Port_GetConfigDescriptor+0x8>)
 80099fa:	f7ff b82f 	b.w	8008a5c <Standard_GetDescriptorData>
 80099fe:	bf00      	nop
 8009a00:	2000005c 	.word	0x2000005c

08009a04 <Virtual_Com_Port_GetStringDescriptor>:
  uint8_t wValue0 = pInformation->USBwValue0;
 8009a04:	4b05      	ldr	r3, [pc, #20]	; (8009a1c <Virtual_Com_Port_GetStringDescriptor+0x18>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 8009a0a:	2b04      	cmp	r3, #4
 8009a0c:	d804      	bhi.n	8009a18 <Virtual_Com_Port_GetStringDescriptor+0x14>
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 8009a0e:	4904      	ldr	r1, [pc, #16]	; (8009a20 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 8009a10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a14:	f7ff b822 	b.w	8008a5c <Standard_GetDescriptorData>
}
 8009a18:	2000      	movs	r0, #0
 8009a1a:	4770      	bx	lr
 8009a1c:	2000162c 	.word	0x2000162c
 8009a20:	200000a0 	.word	0x200000a0

08009a24 <Virtual_Com_Port_NoData_Setup>:
  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8009a24:	4b07      	ldr	r3, [pc, #28]	; (8009a44 <Virtual_Com_Port_NoData_Setup+0x20>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a2e:	2b21      	cmp	r3, #33	; 0x21
 8009a30:	d001      	beq.n	8009a36 <Virtual_Com_Port_NoData_Setup+0x12>
  return USB_UNSUPPORT;
 8009a32:	2002      	movs	r0, #2
}
 8009a34:	4770      	bx	lr
    if (RequestNo == SET_COMM_FEATURE)
 8009a36:	f000 00df 	and.w	r0, r0, #223	; 0xdf
      return USB_SUCCESS;
 8009a3a:	2802      	cmp	r0, #2
 8009a3c:	bf14      	ite	ne
 8009a3e:	2002      	movne	r0, #2
 8009a40:	2000      	moveq	r0, #0
 8009a42:	4770      	bx	lr
 8009a44:	2000162c 	.word	0x2000162c

08009a48 <Virtual_Com_Port_SetLineCoding>:
 8009a48:	b108      	cbz	r0, 8009a4e <Virtual_Com_Port_SetLineCoding+0x6>
 8009a4a:	4803      	ldr	r0, [pc, #12]	; (8009a58 <Virtual_Com_Port_SetLineCoding+0x10>)
 8009a4c:	4770      	bx	lr
 8009a4e:	2208      	movs	r2, #8
 8009a50:	4b02      	ldr	r3, [pc, #8]	; (8009a5c <Virtual_Com_Port_SetLineCoding+0x14>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	821a      	strh	r2, [r3, #16]
 8009a56:	4770      	bx	lr
 8009a58:	200000e4 	.word	0x200000e4
 8009a5c:	2000162c 	.word	0x2000162c

08009a60 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 8009a60:	b510      	push	{r4, lr}
#ifndef STM32F10X_CL
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 8009a62:	2001      	movs	r0, #1
 8009a64:	f7ff fd82 	bl	800956c <USB_Cable_Config>

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8009a68:	2401      	movs	r4, #1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8009a6a:	2000      	movs	r0, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8009a6c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
  _SetCNTR(wRegVal);
 8009a70:	4b05      	ldr	r3, [pc, #20]	; (8009a88 <PowerOn+0x28>)
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8009a72:	4906      	ldr	r1, [pc, #24]	; (8009a8c <PowerOn+0x2c>)
  _SetCNTR(wRegVal);
 8009a74:	f8c3 4c40 	str.w	r4, [r3, #3136]	; 0xc40
  _SetCNTR(wInterrupt_Mask);
 8009a78:	f8c3 0c40 	str.w	r0, [r3, #3136]	; 0xc40
  _SetISTR(0);
 8009a7c:	f8c3 0c44 	str.w	r0, [r3, #3140]	; 0xc44
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8009a80:	800a      	strh	r2, [r1, #0]
  _SetCNTR(wInterrupt_Mask);
 8009a82:	f8c3 2c40 	str.w	r2, [r3, #3136]	; 0xc40
#endif /* STM32F10X_CL */

  return USB_SUCCESS;
}
 8009a86:	bd10      	pop	{r4, pc}
 8009a88:	40005000 	.word	0x40005000
 8009a8c:	20001638 	.word	0x20001638

08009a90 <NMI_Handler>:
* Output         : None
* Return         : None
*******************************************************************************/
void NMI_Handler(void)
{
}
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop

08009a94 <HardFault_Handler>:
* Return         : None
*******************************************************************************/
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8009a94:	e7fe      	b.n	8009a94 <HardFault_Handler>
 8009a96:	bf00      	nop

08009a98 <MemManage_Handler>:
* Return         : None
*******************************************************************************/
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8009a98:	e7fe      	b.n	8009a98 <MemManage_Handler>
 8009a9a:	bf00      	nop

08009a9c <BusFault_Handler>:
* Return         : None
*******************************************************************************/
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8009a9c:	e7fe      	b.n	8009a9c <BusFault_Handler>
 8009a9e:	bf00      	nop

08009aa0 <UsageFault_Handler>:
* Return         : None
*******************************************************************************/
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8009aa0:	e7fe      	b.n	8009aa0 <UsageFault_Handler>
 8009aa2:	bf00      	nop

08009aa4 <SVC_Handler>:
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop

08009aa8 <DebugMon_Handler>:
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop

08009aac <PendSV_Handler>:
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop

08009ab0 <USB_LP_CAN1_RX0_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  USB_Istr();
 8009ab0:	f7ff be7e 	b.w	80097b0 <USB_Istr>

08009ab4 <__libc_init_array>:
 8009ab4:	b570      	push	{r4, r5, r6, lr}
 8009ab6:	2600      	movs	r6, #0
 8009ab8:	4d0c      	ldr	r5, [pc, #48]	; (8009aec <__libc_init_array+0x38>)
 8009aba:	4c0d      	ldr	r4, [pc, #52]	; (8009af0 <__libc_init_array+0x3c>)
 8009abc:	1b64      	subs	r4, r4, r5
 8009abe:	10a4      	asrs	r4, r4, #2
 8009ac0:	42a6      	cmp	r6, r4
 8009ac2:	d109      	bne.n	8009ad8 <__libc_init_array+0x24>
 8009ac4:	f001 f916 	bl	800acf4 <_init>
 8009ac8:	2600      	movs	r6, #0
 8009aca:	4d0a      	ldr	r5, [pc, #40]	; (8009af4 <__libc_init_array+0x40>)
 8009acc:	4c0a      	ldr	r4, [pc, #40]	; (8009af8 <__libc_init_array+0x44>)
 8009ace:	1b64      	subs	r4, r4, r5
 8009ad0:	10a4      	asrs	r4, r4, #2
 8009ad2:	42a6      	cmp	r6, r4
 8009ad4:	d105      	bne.n	8009ae2 <__libc_init_array+0x2e>
 8009ad6:	bd70      	pop	{r4, r5, r6, pc}
 8009ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009adc:	4798      	blx	r3
 8009ade:	3601      	adds	r6, #1
 8009ae0:	e7ee      	b.n	8009ac0 <__libc_init_array+0xc>
 8009ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ae6:	4798      	blx	r3
 8009ae8:	3601      	adds	r6, #1
 8009aea:	e7f2      	b.n	8009ad2 <__libc_init_array+0x1e>
 8009aec:	0800b43c 	.word	0x0800b43c
 8009af0:	0800b43c 	.word	0x0800b43c
 8009af4:	0800b43c 	.word	0x0800b43c
 8009af8:	0800b444 	.word	0x0800b444

08009afc <memcmp>:
 8009afc:	b510      	push	{r4, lr}
 8009afe:	3901      	subs	r1, #1
 8009b00:	4402      	add	r2, r0
 8009b02:	4290      	cmp	r0, r2
 8009b04:	d101      	bne.n	8009b0a <memcmp+0xe>
 8009b06:	2000      	movs	r0, #0
 8009b08:	e005      	b.n	8009b16 <memcmp+0x1a>
 8009b0a:	7803      	ldrb	r3, [r0, #0]
 8009b0c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009b10:	42a3      	cmp	r3, r4
 8009b12:	d001      	beq.n	8009b18 <memcmp+0x1c>
 8009b14:	1b18      	subs	r0, r3, r4
 8009b16:	bd10      	pop	{r4, pc}
 8009b18:	3001      	adds	r0, #1
 8009b1a:	e7f2      	b.n	8009b02 <memcmp+0x6>

08009b1c <memset>:
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	4402      	add	r2, r0
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d100      	bne.n	8009b26 <memset+0xa>
 8009b24:	4770      	bx	lr
 8009b26:	f803 1b01 	strb.w	r1, [r3], #1
 8009b2a:	e7f9      	b.n	8009b20 <memset+0x4>

08009b2c <register_fini>:
 8009b2c:	4b02      	ldr	r3, [pc, #8]	; (8009b38 <register_fini+0xc>)
 8009b2e:	b113      	cbz	r3, 8009b36 <register_fini+0xa>
 8009b30:	4802      	ldr	r0, [pc, #8]	; (8009b3c <register_fini+0x10>)
 8009b32:	f000 b805 	b.w	8009b40 <atexit>
 8009b36:	4770      	bx	lr
 8009b38:	00000000 	.word	0x00000000
 8009b3c:	08009b4d 	.word	0x08009b4d

08009b40 <atexit>:
 8009b40:	2300      	movs	r3, #0
 8009b42:	4601      	mov	r1, r0
 8009b44:	461a      	mov	r2, r3
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 b816 	b.w	8009b78 <__register_exitproc>

08009b4c <__libc_fini_array>:
 8009b4c:	b538      	push	{r3, r4, r5, lr}
 8009b4e:	4d07      	ldr	r5, [pc, #28]	; (8009b6c <__libc_fini_array+0x20>)
 8009b50:	4c07      	ldr	r4, [pc, #28]	; (8009b70 <__libc_fini_array+0x24>)
 8009b52:	1b64      	subs	r4, r4, r5
 8009b54:	10a4      	asrs	r4, r4, #2
 8009b56:	b91c      	cbnz	r4, 8009b60 <__libc_fini_array+0x14>
 8009b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b5c:	f001 b8d0 	b.w	800ad00 <_fini>
 8009b60:	3c01      	subs	r4, #1
 8009b62:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8009b66:	4798      	blx	r3
 8009b68:	e7f5      	b.n	8009b56 <__libc_fini_array+0xa>
 8009b6a:	bf00      	nop
 8009b6c:	0800b444 	.word	0x0800b444
 8009b70:	0800b448 	.word	0x0800b448

08009b74 <__retarget_lock_acquire_recursive>:
 8009b74:	4770      	bx	lr

08009b76 <__retarget_lock_release_recursive>:
 8009b76:	4770      	bx	lr

08009b78 <__register_exitproc>:
 8009b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b7c:	f8df a074 	ldr.w	sl, [pc, #116]	; 8009bf4 <__register_exitproc+0x7c>
 8009b80:	4606      	mov	r6, r0
 8009b82:	f8da 0000 	ldr.w	r0, [sl]
 8009b86:	4698      	mov	r8, r3
 8009b88:	460f      	mov	r7, r1
 8009b8a:	4691      	mov	r9, r2
 8009b8c:	f7ff fff2 	bl	8009b74 <__retarget_lock_acquire_recursive>
 8009b90:	4b19      	ldr	r3, [pc, #100]	; (8009bf8 <__register_exitproc+0x80>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8009b98:	b91c      	cbnz	r4, 8009ba2 <__register_exitproc+0x2a>
 8009b9a:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8009b9e:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8009ba2:	6865      	ldr	r5, [r4, #4]
 8009ba4:	f8da 0000 	ldr.w	r0, [sl]
 8009ba8:	2d1f      	cmp	r5, #31
 8009baa:	dd05      	ble.n	8009bb8 <__register_exitproc+0x40>
 8009bac:	f7ff ffe3 	bl	8009b76 <__retarget_lock_release_recursive>
 8009bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bb8:	b19e      	cbz	r6, 8009be2 <__register_exitproc+0x6a>
 8009bba:	2201      	movs	r2, #1
 8009bbc:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8009bc0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8009bc4:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8009bc8:	40aa      	lsls	r2, r5
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8009bd0:	2e02      	cmp	r6, #2
 8009bd2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8009bd6:	bf02      	ittt	eq
 8009bd8:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8009bdc:	4313      	orreq	r3, r2
 8009bde:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8009be2:	1c6b      	adds	r3, r5, #1
 8009be4:	3502      	adds	r5, #2
 8009be6:	6063      	str	r3, [r4, #4]
 8009be8:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8009bec:	f7ff ffc3 	bl	8009b76 <__retarget_lock_release_recursive>
 8009bf0:	2000      	movs	r0, #0
 8009bf2:	e7df      	b.n	8009bb4 <__register_exitproc+0x3c>
 8009bf4:	20000518 	.word	0x20000518
 8009bf8:	0800b030 	.word	0x0800b030

08009bfc <ceilf>:
 8009bfc:	b570      	push	{r4, r5, r6, lr}
 8009bfe:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8009c02:	3d7f      	subs	r5, #127	; 0x7f
 8009c04:	2d16      	cmp	r5, #22
 8009c06:	4601      	mov	r1, r0
 8009c08:	4604      	mov	r4, r0
 8009c0a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8009c0e:	dc26      	bgt.n	8009c5e <ceilf+0x62>
 8009c10:	2d00      	cmp	r5, #0
 8009c12:	da0e      	bge.n	8009c32 <ceilf+0x36>
 8009c14:	4917      	ldr	r1, [pc, #92]	; (8009c74 <ceilf+0x78>)
 8009c16:	f7f6 fd35 	bl	8000684 <__addsf3>
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	f7f6 fff6 	bl	8000c0c <__aeabi_fcmpgt>
 8009c20:	b128      	cbz	r0, 8009c2e <ceilf+0x32>
 8009c22:	2c00      	cmp	r4, #0
 8009c24:	db23      	blt.n	8009c6e <ceilf+0x72>
 8009c26:	2e00      	cmp	r6, #0
 8009c28:	bf18      	it	ne
 8009c2a:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 8009c2e:	4621      	mov	r1, r4
 8009c30:	e01b      	b.n	8009c6a <ceilf+0x6e>
 8009c32:	4e11      	ldr	r6, [pc, #68]	; (8009c78 <ceilf+0x7c>)
 8009c34:	412e      	asrs	r6, r5
 8009c36:	4230      	tst	r0, r6
 8009c38:	d017      	beq.n	8009c6a <ceilf+0x6e>
 8009c3a:	490e      	ldr	r1, [pc, #56]	; (8009c74 <ceilf+0x78>)
 8009c3c:	f7f6 fd22 	bl	8000684 <__addsf3>
 8009c40:	2100      	movs	r1, #0
 8009c42:	f7f6 ffe3 	bl	8000c0c <__aeabi_fcmpgt>
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d0f1      	beq.n	8009c2e <ceilf+0x32>
 8009c4a:	2c00      	cmp	r4, #0
 8009c4c:	bfc2      	ittt	gt
 8009c4e:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 8009c52:	fa43 f505 	asrgt.w	r5, r3, r5
 8009c56:	1964      	addgt	r4, r4, r5
 8009c58:	ea24 0406 	bic.w	r4, r4, r6
 8009c5c:	e7e7      	b.n	8009c2e <ceilf+0x32>
 8009c5e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009c62:	d302      	bcc.n	8009c6a <ceilf+0x6e>
 8009c64:	f7f6 fd0e 	bl	8000684 <__addsf3>
 8009c68:	4601      	mov	r1, r0
 8009c6a:	4608      	mov	r0, r1
 8009c6c:	bd70      	pop	{r4, r5, r6, pc}
 8009c6e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009c72:	e7dc      	b.n	8009c2e <ceilf+0x32>
 8009c74:	7149f2ca 	.word	0x7149f2ca
 8009c78:	007fffff 	.word	0x007fffff

08009c7c <cosf>:
 8009c7c:	b507      	push	{r0, r1, r2, lr}
 8009c7e:	4a1a      	ldr	r2, [pc, #104]	; (8009ce8 <cosf+0x6c>)
 8009c80:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8009c84:	4293      	cmp	r3, r2
 8009c86:	4601      	mov	r1, r0
 8009c88:	dc05      	bgt.n	8009c96 <cosf+0x1a>
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	b003      	add	sp, #12
 8009c8e:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c92:	f000 bb25 	b.w	800a2e0 <__kernel_cosf>
 8009c96:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009c9a:	db04      	blt.n	8009ca6 <cosf+0x2a>
 8009c9c:	f7f6 fcf0 	bl	8000680 <__aeabi_fsub>
 8009ca0:	b003      	add	sp, #12
 8009ca2:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ca6:	4669      	mov	r1, sp
 8009ca8:	f000 f96a 	bl	8009f80 <__ieee754_rem_pio2f>
 8009cac:	f000 0203 	and.w	r2, r0, #3
 8009cb0:	2a01      	cmp	r2, #1
 8009cb2:	d007      	beq.n	8009cc4 <cosf+0x48>
 8009cb4:	2a02      	cmp	r2, #2
 8009cb6:	d00c      	beq.n	8009cd2 <cosf+0x56>
 8009cb8:	b982      	cbnz	r2, 8009cdc <cosf+0x60>
 8009cba:	9901      	ldr	r1, [sp, #4]
 8009cbc:	9800      	ldr	r0, [sp, #0]
 8009cbe:	f000 fb0f 	bl	800a2e0 <__kernel_cosf>
 8009cc2:	e7ed      	b.n	8009ca0 <cosf+0x24>
 8009cc4:	9901      	ldr	r1, [sp, #4]
 8009cc6:	9800      	ldr	r0, [sp, #0]
 8009cc8:	f000 fe3c 	bl	800a944 <__kernel_sinf>
 8009ccc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009cd0:	e7e6      	b.n	8009ca0 <cosf+0x24>
 8009cd2:	9901      	ldr	r1, [sp, #4]
 8009cd4:	9800      	ldr	r0, [sp, #0]
 8009cd6:	f000 fb03 	bl	800a2e0 <__kernel_cosf>
 8009cda:	e7f7      	b.n	8009ccc <cosf+0x50>
 8009cdc:	2201      	movs	r2, #1
 8009cde:	9901      	ldr	r1, [sp, #4]
 8009ce0:	9800      	ldr	r0, [sp, #0]
 8009ce2:	f000 fe2f 	bl	800a944 <__kernel_sinf>
 8009ce6:	e7db      	b.n	8009ca0 <cosf+0x24>
 8009ce8:	3f490fd8 	.word	0x3f490fd8

08009cec <floorf>:
 8009cec:	b570      	push	{r4, r5, r6, lr}
 8009cee:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8009cf2:	3d7f      	subs	r5, #127	; 0x7f
 8009cf4:	2d16      	cmp	r5, #22
 8009cf6:	4601      	mov	r1, r0
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8009cfe:	dc26      	bgt.n	8009d4e <floorf+0x62>
 8009d00:	2d00      	cmp	r5, #0
 8009d02:	da0e      	bge.n	8009d22 <floorf+0x36>
 8009d04:	4917      	ldr	r1, [pc, #92]	; (8009d64 <floorf+0x78>)
 8009d06:	f7f6 fcbd 	bl	8000684 <__addsf3>
 8009d0a:	2100      	movs	r1, #0
 8009d0c:	f7f6 ff7e 	bl	8000c0c <__aeabi_fcmpgt>
 8009d10:	b128      	cbz	r0, 8009d1e <floorf+0x32>
 8009d12:	2c00      	cmp	r4, #0
 8009d14:	da23      	bge.n	8009d5e <floorf+0x72>
 8009d16:	4b14      	ldr	r3, [pc, #80]	; (8009d68 <floorf+0x7c>)
 8009d18:	2e00      	cmp	r6, #0
 8009d1a:	bf18      	it	ne
 8009d1c:	461c      	movne	r4, r3
 8009d1e:	4621      	mov	r1, r4
 8009d20:	e01b      	b.n	8009d5a <floorf+0x6e>
 8009d22:	4e12      	ldr	r6, [pc, #72]	; (8009d6c <floorf+0x80>)
 8009d24:	412e      	asrs	r6, r5
 8009d26:	4230      	tst	r0, r6
 8009d28:	d017      	beq.n	8009d5a <floorf+0x6e>
 8009d2a:	490e      	ldr	r1, [pc, #56]	; (8009d64 <floorf+0x78>)
 8009d2c:	f7f6 fcaa 	bl	8000684 <__addsf3>
 8009d30:	2100      	movs	r1, #0
 8009d32:	f7f6 ff6b 	bl	8000c0c <__aeabi_fcmpgt>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	d0f1      	beq.n	8009d1e <floorf+0x32>
 8009d3a:	2c00      	cmp	r4, #0
 8009d3c:	bfbe      	ittt	lt
 8009d3e:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8009d42:	fa43 f505 	asrlt.w	r5, r3, r5
 8009d46:	1964      	addlt	r4, r4, r5
 8009d48:	ea24 0406 	bic.w	r4, r4, r6
 8009d4c:	e7e7      	b.n	8009d1e <floorf+0x32>
 8009d4e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009d52:	d302      	bcc.n	8009d5a <floorf+0x6e>
 8009d54:	f7f6 fc96 	bl	8000684 <__addsf3>
 8009d58:	4601      	mov	r1, r0
 8009d5a:	4608      	mov	r0, r1
 8009d5c:	bd70      	pop	{r4, r5, r6, pc}
 8009d5e:	2400      	movs	r4, #0
 8009d60:	e7dd      	b.n	8009d1e <floorf+0x32>
 8009d62:	bf00      	nop
 8009d64:	7149f2ca 	.word	0x7149f2ca
 8009d68:	bf800000 	.word	0xbf800000
 8009d6c:	007fffff 	.word	0x007fffff

08009d70 <lroundf>:
 8009d70:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009d74:	2800      	cmp	r0, #0
 8009d76:	b510      	push	{r4, lr}
 8009d78:	f1a3 047f 	sub.w	r4, r3, #127	; 0x7f
 8009d7c:	bfb4      	ite	lt
 8009d7e:	f04f 31ff 	movlt.w	r1, #4294967295
 8009d82:	2101      	movge	r1, #1
 8009d84:	2c1e      	cmp	r4, #30
 8009d86:	dc1b      	bgt.n	8009dc0 <lroundf+0x50>
 8009d88:	2c00      	cmp	r4, #0
 8009d8a:	da04      	bge.n	8009d96 <lroundf+0x26>
 8009d8c:	3401      	adds	r4, #1
 8009d8e:	bf18      	it	ne
 8009d90:	2100      	movne	r1, #0
 8009d92:	4608      	mov	r0, r1
 8009d94:	bd10      	pop	{r4, pc}
 8009d96:	2c16      	cmp	r4, #22
 8009d98:	bfd8      	it	le
 8009d9a:	f44f 0380 	movle.w	r3, #4194304	; 0x400000
 8009d9e:	f3c0 0216 	ubfx	r2, r0, #0, #23
 8009da2:	bfd8      	it	le
 8009da4:	4123      	asrle	r3, r4
 8009da6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009daa:	bfcd      	iteet	gt
 8009dac:	3b96      	subgt	r3, #150	; 0x96
 8009dae:	189b      	addle	r3, r3, r2
 8009db0:	f1c4 0417 	rsble	r4, r4, #23
 8009db4:	fa02 f303 	lslgt.w	r3, r2, r3
 8009db8:	bfd8      	it	le
 8009dba:	40e3      	lsrle	r3, r4
 8009dbc:	4359      	muls	r1, r3
 8009dbe:	e7e8      	b.n	8009d92 <lroundf+0x22>
 8009dc0:	f7f6 ff44 	bl	8000c4c <__aeabi_f2iz>
 8009dc4:	4601      	mov	r1, r0
 8009dc6:	e7e4      	b.n	8009d92 <lroundf+0x22>

08009dc8 <sinf>:
 8009dc8:	b507      	push	{r0, r1, r2, lr}
 8009dca:	4a1b      	ldr	r2, [pc, #108]	; (8009e38 <sinf+0x70>)
 8009dcc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	4601      	mov	r1, r0
 8009dd4:	dc06      	bgt.n	8009de4 <sinf+0x1c>
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	2100      	movs	r1, #0
 8009dda:	b003      	add	sp, #12
 8009ddc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009de0:	f000 bdb0 	b.w	800a944 <__kernel_sinf>
 8009de4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009de8:	db04      	blt.n	8009df4 <sinf+0x2c>
 8009dea:	f7f6 fc49 	bl	8000680 <__aeabi_fsub>
 8009dee:	b003      	add	sp, #12
 8009df0:	f85d fb04 	ldr.w	pc, [sp], #4
 8009df4:	4669      	mov	r1, sp
 8009df6:	f000 f8c3 	bl	8009f80 <__ieee754_rem_pio2f>
 8009dfa:	f000 0003 	and.w	r0, r0, #3
 8009dfe:	2801      	cmp	r0, #1
 8009e00:	d008      	beq.n	8009e14 <sinf+0x4c>
 8009e02:	2802      	cmp	r0, #2
 8009e04:	d00b      	beq.n	8009e1e <sinf+0x56>
 8009e06:	b990      	cbnz	r0, 8009e2e <sinf+0x66>
 8009e08:	2201      	movs	r2, #1
 8009e0a:	9901      	ldr	r1, [sp, #4]
 8009e0c:	9800      	ldr	r0, [sp, #0]
 8009e0e:	f000 fd99 	bl	800a944 <__kernel_sinf>
 8009e12:	e7ec      	b.n	8009dee <sinf+0x26>
 8009e14:	9901      	ldr	r1, [sp, #4]
 8009e16:	9800      	ldr	r0, [sp, #0]
 8009e18:	f000 fa62 	bl	800a2e0 <__kernel_cosf>
 8009e1c:	e7e7      	b.n	8009dee <sinf+0x26>
 8009e1e:	2201      	movs	r2, #1
 8009e20:	9901      	ldr	r1, [sp, #4]
 8009e22:	9800      	ldr	r0, [sp, #0]
 8009e24:	f000 fd8e 	bl	800a944 <__kernel_sinf>
 8009e28:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009e2c:	e7df      	b.n	8009dee <sinf+0x26>
 8009e2e:	9901      	ldr	r1, [sp, #4]
 8009e30:	9800      	ldr	r0, [sp, #0]
 8009e32:	f000 fa55 	bl	800a2e0 <__kernel_cosf>
 8009e36:	e7f7      	b.n	8009e28 <sinf+0x60>
 8009e38:	3f490fd8 	.word	0x3f490fd8

08009e3c <atan2f>:
 8009e3c:	f000 b81a 	b.w	8009e74 <__ieee754_atan2f>

08009e40 <sqrtf>:
 8009e40:	b538      	push	{r3, r4, r5, lr}
 8009e42:	4605      	mov	r5, r0
 8009e44:	f000 f9fa 	bl	800a23c <__ieee754_sqrtf>
 8009e48:	4629      	mov	r1, r5
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	f7f6 fee7 	bl	8000c20 <__aeabi_fcmpun>
 8009e52:	b968      	cbnz	r0, 8009e70 <sqrtf+0x30>
 8009e54:	2100      	movs	r1, #0
 8009e56:	4628      	mov	r0, r5
 8009e58:	f7f6 feba 	bl	8000bd0 <__aeabi_fcmplt>
 8009e5c:	b140      	cbz	r0, 8009e70 <sqrtf+0x30>
 8009e5e:	f000 ff43 	bl	800ace8 <__errno>
 8009e62:	2321      	movs	r3, #33	; 0x21
 8009e64:	2100      	movs	r1, #0
 8009e66:	6003      	str	r3, [r0, #0]
 8009e68:	4608      	mov	r0, r1
 8009e6a:	f7f6 fdc7 	bl	80009fc <__aeabi_fdiv>
 8009e6e:	4604      	mov	r4, r0
 8009e70:	4620      	mov	r0, r4
 8009e72:	bd38      	pop	{r3, r4, r5, pc}

08009e74 <__ieee754_atan2f>:
 8009e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e76:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009e7a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009e7e:	4603      	mov	r3, r0
 8009e80:	dc05      	bgt.n	8009e8e <__ieee754_atan2f+0x1a>
 8009e82:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8009e86:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009e8a:	4607      	mov	r7, r0
 8009e8c:	dd04      	ble.n	8009e98 <__ieee754_atan2f+0x24>
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7f6 fbf8 	bl	8000684 <__addsf3>
 8009e94:	4603      	mov	r3, r0
 8009e96:	e011      	b.n	8009ebc <__ieee754_atan2f+0x48>
 8009e98:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8009e9c:	d103      	bne.n	8009ea6 <__ieee754_atan2f+0x32>
 8009e9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009ea2:	f000 bdc5 	b.w	800aa30 <atanf>
 8009ea6:	178c      	asrs	r4, r1, #30
 8009ea8:	f004 0402 	and.w	r4, r4, #2
 8009eac:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8009eb0:	b932      	cbnz	r2, 8009ec0 <__ieee754_atan2f+0x4c>
 8009eb2:	2c02      	cmp	r4, #2
 8009eb4:	d04c      	beq.n	8009f50 <__ieee754_atan2f+0xdc>
 8009eb6:	2c03      	cmp	r4, #3
 8009eb8:	d100      	bne.n	8009ebc <__ieee754_atan2f+0x48>
 8009eba:	4b29      	ldr	r3, [pc, #164]	; (8009f60 <__ieee754_atan2f+0xec>)
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ec0:	b91e      	cbnz	r6, 8009eca <__ieee754_atan2f+0x56>
 8009ec2:	2f00      	cmp	r7, #0
 8009ec4:	da4a      	bge.n	8009f5c <__ieee754_atan2f+0xe8>
 8009ec6:	4b27      	ldr	r3, [pc, #156]	; (8009f64 <__ieee754_atan2f+0xf0>)
 8009ec8:	e7f8      	b.n	8009ebc <__ieee754_atan2f+0x48>
 8009eca:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009ece:	d10e      	bne.n	8009eee <__ieee754_atan2f+0x7a>
 8009ed0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009ed4:	f104 34ff 	add.w	r4, r4, #4294967295
 8009ed8:	d105      	bne.n	8009ee6 <__ieee754_atan2f+0x72>
 8009eda:	2c02      	cmp	r4, #2
 8009edc:	d83a      	bhi.n	8009f54 <__ieee754_atan2f+0xe0>
 8009ede:	4b22      	ldr	r3, [pc, #136]	; (8009f68 <__ieee754_atan2f+0xf4>)
 8009ee0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009ee4:	e7ea      	b.n	8009ebc <__ieee754_atan2f+0x48>
 8009ee6:	2c02      	cmp	r4, #2
 8009ee8:	d836      	bhi.n	8009f58 <__ieee754_atan2f+0xe4>
 8009eea:	4b20      	ldr	r3, [pc, #128]	; (8009f6c <__ieee754_atan2f+0xf8>)
 8009eec:	e7f8      	b.n	8009ee0 <__ieee754_atan2f+0x6c>
 8009eee:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009ef2:	d0e6      	beq.n	8009ec2 <__ieee754_atan2f+0x4e>
 8009ef4:	1b92      	subs	r2, r2, r6
 8009ef6:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8009efa:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8009efe:	da17      	bge.n	8009f30 <__ieee754_atan2f+0xbc>
 8009f00:	2900      	cmp	r1, #0
 8009f02:	da01      	bge.n	8009f08 <__ieee754_atan2f+0x94>
 8009f04:	303c      	adds	r0, #60	; 0x3c
 8009f06:	db15      	blt.n	8009f34 <__ieee754_atan2f+0xc0>
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7f6 fd77 	bl	80009fc <__aeabi_fdiv>
 8009f0e:	f000 fe9b 	bl	800ac48 <fabsf>
 8009f12:	f000 fd8d 	bl	800aa30 <atanf>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2c01      	cmp	r4, #1
 8009f1a:	d00d      	beq.n	8009f38 <__ieee754_atan2f+0xc4>
 8009f1c:	2c02      	cmp	r4, #2
 8009f1e:	d00e      	beq.n	8009f3e <__ieee754_atan2f+0xca>
 8009f20:	2c00      	cmp	r4, #0
 8009f22:	d0cb      	beq.n	8009ebc <__ieee754_atan2f+0x48>
 8009f24:	4912      	ldr	r1, [pc, #72]	; (8009f70 <__ieee754_atan2f+0xfc>)
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7f6 fbac 	bl	8000684 <__addsf3>
 8009f2c:	4911      	ldr	r1, [pc, #68]	; (8009f74 <__ieee754_atan2f+0x100>)
 8009f2e:	e00c      	b.n	8009f4a <__ieee754_atan2f+0xd6>
 8009f30:	4b11      	ldr	r3, [pc, #68]	; (8009f78 <__ieee754_atan2f+0x104>)
 8009f32:	e7f1      	b.n	8009f18 <__ieee754_atan2f+0xa4>
 8009f34:	2300      	movs	r3, #0
 8009f36:	e7ef      	b.n	8009f18 <__ieee754_atan2f+0xa4>
 8009f38:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009f3c:	e7be      	b.n	8009ebc <__ieee754_atan2f+0x48>
 8009f3e:	490c      	ldr	r1, [pc, #48]	; (8009f70 <__ieee754_atan2f+0xfc>)
 8009f40:	4618      	mov	r0, r3
 8009f42:	f7f6 fb9f 	bl	8000684 <__addsf3>
 8009f46:	4601      	mov	r1, r0
 8009f48:	480a      	ldr	r0, [pc, #40]	; (8009f74 <__ieee754_atan2f+0x100>)
 8009f4a:	f7f6 fb99 	bl	8000680 <__aeabi_fsub>
 8009f4e:	e7a1      	b.n	8009e94 <__ieee754_atan2f+0x20>
 8009f50:	4b08      	ldr	r3, [pc, #32]	; (8009f74 <__ieee754_atan2f+0x100>)
 8009f52:	e7b3      	b.n	8009ebc <__ieee754_atan2f+0x48>
 8009f54:	4b09      	ldr	r3, [pc, #36]	; (8009f7c <__ieee754_atan2f+0x108>)
 8009f56:	e7b1      	b.n	8009ebc <__ieee754_atan2f+0x48>
 8009f58:	2300      	movs	r3, #0
 8009f5a:	e7af      	b.n	8009ebc <__ieee754_atan2f+0x48>
 8009f5c:	4b06      	ldr	r3, [pc, #24]	; (8009f78 <__ieee754_atan2f+0x104>)
 8009f5e:	e7ad      	b.n	8009ebc <__ieee754_atan2f+0x48>
 8009f60:	c0490fdb 	.word	0xc0490fdb
 8009f64:	bfc90fdb 	.word	0xbfc90fdb
 8009f68:	0800b034 	.word	0x0800b034
 8009f6c:	0800b040 	.word	0x0800b040
 8009f70:	33bbbd2e 	.word	0x33bbbd2e
 8009f74:	40490fdb 	.word	0x40490fdb
 8009f78:	3fc90fdb 	.word	0x3fc90fdb
 8009f7c:	3f490fdb 	.word	0x3f490fdb

08009f80 <__ieee754_rem_pio2f>:
 8009f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f84:	4aa0      	ldr	r2, [pc, #640]	; (800a208 <__ieee754_rem_pio2f+0x288>)
 8009f86:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8009f8a:	4296      	cmp	r6, r2
 8009f8c:	460c      	mov	r4, r1
 8009f8e:	4682      	mov	sl, r0
 8009f90:	b087      	sub	sp, #28
 8009f92:	dc04      	bgt.n	8009f9e <__ieee754_rem_pio2f+0x1e>
 8009f94:	2300      	movs	r3, #0
 8009f96:	6008      	str	r0, [r1, #0]
 8009f98:	604b      	str	r3, [r1, #4]
 8009f9a:	2500      	movs	r5, #0
 8009f9c:	e01a      	b.n	8009fd4 <__ieee754_rem_pio2f+0x54>
 8009f9e:	4a9b      	ldr	r2, [pc, #620]	; (800a20c <__ieee754_rem_pio2f+0x28c>)
 8009fa0:	4296      	cmp	r6, r2
 8009fa2:	dc4b      	bgt.n	800a03c <__ieee754_rem_pio2f+0xbc>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	499a      	ldr	r1, [pc, #616]	; (800a210 <__ieee754_rem_pio2f+0x290>)
 8009fa8:	4f9a      	ldr	r7, [pc, #616]	; (800a214 <__ieee754_rem_pio2f+0x294>)
 8009faa:	f026 060f 	bic.w	r6, r6, #15
 8009fae:	dd23      	ble.n	8009ff8 <__ieee754_rem_pio2f+0x78>
 8009fb0:	f7f6 fb66 	bl	8000680 <__aeabi_fsub>
 8009fb4:	42be      	cmp	r6, r7
 8009fb6:	4605      	mov	r5, r0
 8009fb8:	d010      	beq.n	8009fdc <__ieee754_rem_pio2f+0x5c>
 8009fba:	4997      	ldr	r1, [pc, #604]	; (800a218 <__ieee754_rem_pio2f+0x298>)
 8009fbc:	f7f6 fb60 	bl	8000680 <__aeabi_fsub>
 8009fc0:	4601      	mov	r1, r0
 8009fc2:	6020      	str	r0, [r4, #0]
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	f7f6 fb5b 	bl	8000680 <__aeabi_fsub>
 8009fca:	4993      	ldr	r1, [pc, #588]	; (800a218 <__ieee754_rem_pio2f+0x298>)
 8009fcc:	f7f6 fb58 	bl	8000680 <__aeabi_fsub>
 8009fd0:	2501      	movs	r5, #1
 8009fd2:	6060      	str	r0, [r4, #4]
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	b007      	add	sp, #28
 8009fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fdc:	498f      	ldr	r1, [pc, #572]	; (800a21c <__ieee754_rem_pio2f+0x29c>)
 8009fde:	f7f6 fb4f 	bl	8000680 <__aeabi_fsub>
 8009fe2:	498f      	ldr	r1, [pc, #572]	; (800a220 <__ieee754_rem_pio2f+0x2a0>)
 8009fe4:	4605      	mov	r5, r0
 8009fe6:	f7f6 fb4b 	bl	8000680 <__aeabi_fsub>
 8009fea:	4601      	mov	r1, r0
 8009fec:	6020      	str	r0, [r4, #0]
 8009fee:	4628      	mov	r0, r5
 8009ff0:	f7f6 fb46 	bl	8000680 <__aeabi_fsub>
 8009ff4:	498a      	ldr	r1, [pc, #552]	; (800a220 <__ieee754_rem_pio2f+0x2a0>)
 8009ff6:	e7e9      	b.n	8009fcc <__ieee754_rem_pio2f+0x4c>
 8009ff8:	f7f6 fb44 	bl	8000684 <__addsf3>
 8009ffc:	42be      	cmp	r6, r7
 8009ffe:	4605      	mov	r5, r0
 800a000:	d00e      	beq.n	800a020 <__ieee754_rem_pio2f+0xa0>
 800a002:	4985      	ldr	r1, [pc, #532]	; (800a218 <__ieee754_rem_pio2f+0x298>)
 800a004:	f7f6 fb3e 	bl	8000684 <__addsf3>
 800a008:	4601      	mov	r1, r0
 800a00a:	6020      	str	r0, [r4, #0]
 800a00c:	4628      	mov	r0, r5
 800a00e:	f7f6 fb37 	bl	8000680 <__aeabi_fsub>
 800a012:	4981      	ldr	r1, [pc, #516]	; (800a218 <__ieee754_rem_pio2f+0x298>)
 800a014:	f7f6 fb36 	bl	8000684 <__addsf3>
 800a018:	f04f 35ff 	mov.w	r5, #4294967295
 800a01c:	6060      	str	r0, [r4, #4]
 800a01e:	e7d9      	b.n	8009fd4 <__ieee754_rem_pio2f+0x54>
 800a020:	497e      	ldr	r1, [pc, #504]	; (800a21c <__ieee754_rem_pio2f+0x29c>)
 800a022:	f7f6 fb2f 	bl	8000684 <__addsf3>
 800a026:	497e      	ldr	r1, [pc, #504]	; (800a220 <__ieee754_rem_pio2f+0x2a0>)
 800a028:	4605      	mov	r5, r0
 800a02a:	f7f6 fb2b 	bl	8000684 <__addsf3>
 800a02e:	4601      	mov	r1, r0
 800a030:	6020      	str	r0, [r4, #0]
 800a032:	4628      	mov	r0, r5
 800a034:	f7f6 fb24 	bl	8000680 <__aeabi_fsub>
 800a038:	4979      	ldr	r1, [pc, #484]	; (800a220 <__ieee754_rem_pio2f+0x2a0>)
 800a03a:	e7eb      	b.n	800a014 <__ieee754_rem_pio2f+0x94>
 800a03c:	4a79      	ldr	r2, [pc, #484]	; (800a224 <__ieee754_rem_pio2f+0x2a4>)
 800a03e:	4296      	cmp	r6, r2
 800a040:	f300 8091 	bgt.w	800a166 <__ieee754_rem_pio2f+0x1e6>
 800a044:	f000 fe00 	bl	800ac48 <fabsf>
 800a048:	4977      	ldr	r1, [pc, #476]	; (800a228 <__ieee754_rem_pio2f+0x2a8>)
 800a04a:	4607      	mov	r7, r0
 800a04c:	f7f6 fc22 	bl	8000894 <__aeabi_fmul>
 800a050:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a054:	f7f6 fb16 	bl	8000684 <__addsf3>
 800a058:	f7f6 fdf8 	bl	8000c4c <__aeabi_f2iz>
 800a05c:	4605      	mov	r5, r0
 800a05e:	f7f6 fbc5 	bl	80007ec <__aeabi_i2f>
 800a062:	496b      	ldr	r1, [pc, #428]	; (800a210 <__ieee754_rem_pio2f+0x290>)
 800a064:	4681      	mov	r9, r0
 800a066:	f7f6 fc15 	bl	8000894 <__aeabi_fmul>
 800a06a:	4601      	mov	r1, r0
 800a06c:	4638      	mov	r0, r7
 800a06e:	f7f6 fb07 	bl	8000680 <__aeabi_fsub>
 800a072:	4969      	ldr	r1, [pc, #420]	; (800a218 <__ieee754_rem_pio2f+0x298>)
 800a074:	4680      	mov	r8, r0
 800a076:	4648      	mov	r0, r9
 800a078:	f7f6 fc0c 	bl	8000894 <__aeabi_fmul>
 800a07c:	2d1f      	cmp	r5, #31
 800a07e:	4607      	mov	r7, r0
 800a080:	dc0c      	bgt.n	800a09c <__ieee754_rem_pio2f+0x11c>
 800a082:	4a6a      	ldr	r2, [pc, #424]	; (800a22c <__ieee754_rem_pio2f+0x2ac>)
 800a084:	1e69      	subs	r1, r5, #1
 800a086:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a08a:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800a08e:	4293      	cmp	r3, r2
 800a090:	d004      	beq.n	800a09c <__ieee754_rem_pio2f+0x11c>
 800a092:	4639      	mov	r1, r7
 800a094:	4640      	mov	r0, r8
 800a096:	f7f6 faf3 	bl	8000680 <__aeabi_fsub>
 800a09a:	e00b      	b.n	800a0b4 <__ieee754_rem_pio2f+0x134>
 800a09c:	4639      	mov	r1, r7
 800a09e:	4640      	mov	r0, r8
 800a0a0:	f7f6 faee 	bl	8000680 <__aeabi_fsub>
 800a0a4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a0a8:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800a0ac:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800a0b0:	2e08      	cmp	r6, #8
 800a0b2:	dc01      	bgt.n	800a0b8 <__ieee754_rem_pio2f+0x138>
 800a0b4:	6020      	str	r0, [r4, #0]
 800a0b6:	e026      	b.n	800a106 <__ieee754_rem_pio2f+0x186>
 800a0b8:	4958      	ldr	r1, [pc, #352]	; (800a21c <__ieee754_rem_pio2f+0x29c>)
 800a0ba:	4648      	mov	r0, r9
 800a0bc:	f7f6 fbea 	bl	8000894 <__aeabi_fmul>
 800a0c0:	4607      	mov	r7, r0
 800a0c2:	4601      	mov	r1, r0
 800a0c4:	4640      	mov	r0, r8
 800a0c6:	f7f6 fadb 	bl	8000680 <__aeabi_fsub>
 800a0ca:	4601      	mov	r1, r0
 800a0cc:	4606      	mov	r6, r0
 800a0ce:	4640      	mov	r0, r8
 800a0d0:	f7f6 fad6 	bl	8000680 <__aeabi_fsub>
 800a0d4:	4639      	mov	r1, r7
 800a0d6:	f7f6 fad3 	bl	8000680 <__aeabi_fsub>
 800a0da:	4607      	mov	r7, r0
 800a0dc:	4950      	ldr	r1, [pc, #320]	; (800a220 <__ieee754_rem_pio2f+0x2a0>)
 800a0de:	4648      	mov	r0, r9
 800a0e0:	f7f6 fbd8 	bl	8000894 <__aeabi_fmul>
 800a0e4:	4639      	mov	r1, r7
 800a0e6:	f7f6 facb 	bl	8000680 <__aeabi_fsub>
 800a0ea:	4601      	mov	r1, r0
 800a0ec:	4607      	mov	r7, r0
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	f7f6 fac6 	bl	8000680 <__aeabi_fsub>
 800a0f4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a0f8:	ebab 0b03 	sub.w	fp, fp, r3
 800a0fc:	f1bb 0f19 	cmp.w	fp, #25
 800a100:	dc16      	bgt.n	800a130 <__ieee754_rem_pio2f+0x1b0>
 800a102:	46b0      	mov	r8, r6
 800a104:	6020      	str	r0, [r4, #0]
 800a106:	6826      	ldr	r6, [r4, #0]
 800a108:	4640      	mov	r0, r8
 800a10a:	4631      	mov	r1, r6
 800a10c:	f7f6 fab8 	bl	8000680 <__aeabi_fsub>
 800a110:	4639      	mov	r1, r7
 800a112:	f7f6 fab5 	bl	8000680 <__aeabi_fsub>
 800a116:	f1ba 0f00 	cmp.w	sl, #0
 800a11a:	6060      	str	r0, [r4, #4]
 800a11c:	f6bf af5a 	bge.w	8009fd4 <__ieee754_rem_pio2f+0x54>
 800a120:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800a124:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a128:	6026      	str	r6, [r4, #0]
 800a12a:	6060      	str	r0, [r4, #4]
 800a12c:	426d      	negs	r5, r5
 800a12e:	e751      	b.n	8009fd4 <__ieee754_rem_pio2f+0x54>
 800a130:	493f      	ldr	r1, [pc, #252]	; (800a230 <__ieee754_rem_pio2f+0x2b0>)
 800a132:	4648      	mov	r0, r9
 800a134:	f7f6 fbae 	bl	8000894 <__aeabi_fmul>
 800a138:	4607      	mov	r7, r0
 800a13a:	4601      	mov	r1, r0
 800a13c:	4630      	mov	r0, r6
 800a13e:	f7f6 fa9f 	bl	8000680 <__aeabi_fsub>
 800a142:	4601      	mov	r1, r0
 800a144:	4680      	mov	r8, r0
 800a146:	4630      	mov	r0, r6
 800a148:	f7f6 fa9a 	bl	8000680 <__aeabi_fsub>
 800a14c:	4639      	mov	r1, r7
 800a14e:	f7f6 fa97 	bl	8000680 <__aeabi_fsub>
 800a152:	4606      	mov	r6, r0
 800a154:	4937      	ldr	r1, [pc, #220]	; (800a234 <__ieee754_rem_pio2f+0x2b4>)
 800a156:	4648      	mov	r0, r9
 800a158:	f7f6 fb9c 	bl	8000894 <__aeabi_fmul>
 800a15c:	4631      	mov	r1, r6
 800a15e:	f7f6 fa8f 	bl	8000680 <__aeabi_fsub>
 800a162:	4607      	mov	r7, r0
 800a164:	e795      	b.n	800a092 <__ieee754_rem_pio2f+0x112>
 800a166:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800a16a:	db05      	blt.n	800a178 <__ieee754_rem_pio2f+0x1f8>
 800a16c:	4601      	mov	r1, r0
 800a16e:	f7f6 fa87 	bl	8000680 <__aeabi_fsub>
 800a172:	6060      	str	r0, [r4, #4]
 800a174:	6020      	str	r0, [r4, #0]
 800a176:	e710      	b.n	8009f9a <__ieee754_rem_pio2f+0x1a>
 800a178:	15f7      	asrs	r7, r6, #23
 800a17a:	3f86      	subs	r7, #134	; 0x86
 800a17c:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800a180:	4630      	mov	r0, r6
 800a182:	f7f6 fd63 	bl	8000c4c <__aeabi_f2iz>
 800a186:	f7f6 fb31 	bl	80007ec <__aeabi_i2f>
 800a18a:	4601      	mov	r1, r0
 800a18c:	9003      	str	r0, [sp, #12]
 800a18e:	4630      	mov	r0, r6
 800a190:	f7f6 fa76 	bl	8000680 <__aeabi_fsub>
 800a194:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800a198:	f7f6 fb7c 	bl	8000894 <__aeabi_fmul>
 800a19c:	4606      	mov	r6, r0
 800a19e:	f7f6 fd55 	bl	8000c4c <__aeabi_f2iz>
 800a1a2:	f7f6 fb23 	bl	80007ec <__aeabi_i2f>
 800a1a6:	4601      	mov	r1, r0
 800a1a8:	9004      	str	r0, [sp, #16]
 800a1aa:	4605      	mov	r5, r0
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	f7f6 fa67 	bl	8000680 <__aeabi_fsub>
 800a1b2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800a1b6:	f7f6 fb6d 	bl	8000894 <__aeabi_fmul>
 800a1ba:	2100      	movs	r1, #0
 800a1bc:	9005      	str	r0, [sp, #20]
 800a1be:	f7f6 fcfd 	bl	8000bbc <__aeabi_fcmpeq>
 800a1c2:	b1f0      	cbz	r0, 800a202 <__ieee754_rem_pio2f+0x282>
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	f7f6 fcf8 	bl	8000bbc <__aeabi_fcmpeq>
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	bf14      	ite	ne
 800a1d0:	2301      	movne	r3, #1
 800a1d2:	2302      	moveq	r3, #2
 800a1d4:	4a18      	ldr	r2, [pc, #96]	; (800a238 <__ieee754_rem_pio2f+0x2b8>)
 800a1d6:	4621      	mov	r1, r4
 800a1d8:	9201      	str	r2, [sp, #4]
 800a1da:	2202      	movs	r2, #2
 800a1dc:	a803      	add	r0, sp, #12
 800a1de:	9200      	str	r2, [sp, #0]
 800a1e0:	463a      	mov	r2, r7
 800a1e2:	f000 f8fd 	bl	800a3e0 <__kernel_rem_pio2f>
 800a1e6:	f1ba 0f00 	cmp.w	sl, #0
 800a1ea:	4605      	mov	r5, r0
 800a1ec:	f6bf aef2 	bge.w	8009fd4 <__ieee754_rem_pio2f+0x54>
 800a1f0:	6823      	ldr	r3, [r4, #0]
 800a1f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a1f6:	6023      	str	r3, [r4, #0]
 800a1f8:	6863      	ldr	r3, [r4, #4]
 800a1fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a1fe:	6063      	str	r3, [r4, #4]
 800a200:	e794      	b.n	800a12c <__ieee754_rem_pio2f+0x1ac>
 800a202:	2303      	movs	r3, #3
 800a204:	e7e6      	b.n	800a1d4 <__ieee754_rem_pio2f+0x254>
 800a206:	bf00      	nop
 800a208:	3f490fd8 	.word	0x3f490fd8
 800a20c:	4016cbe3 	.word	0x4016cbe3
 800a210:	3fc90f80 	.word	0x3fc90f80
 800a214:	3fc90fd0 	.word	0x3fc90fd0
 800a218:	37354443 	.word	0x37354443
 800a21c:	37354400 	.word	0x37354400
 800a220:	2e85a308 	.word	0x2e85a308
 800a224:	43490f80 	.word	0x43490f80
 800a228:	3f22f984 	.word	0x3f22f984
 800a22c:	0800b04c 	.word	0x0800b04c
 800a230:	2e85a300 	.word	0x2e85a300
 800a234:	248d3132 	.word	0x248d3132
 800a238:	0800b0cc 	.word	0x0800b0cc

0800a23c <__ieee754_sqrtf>:
 800a23c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800a240:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a244:	b570      	push	{r4, r5, r6, lr}
 800a246:	4603      	mov	r3, r0
 800a248:	4604      	mov	r4, r0
 800a24a:	d309      	bcc.n	800a260 <__ieee754_sqrtf+0x24>
 800a24c:	4601      	mov	r1, r0
 800a24e:	f7f6 fb21 	bl	8000894 <__aeabi_fmul>
 800a252:	4601      	mov	r1, r0
 800a254:	4620      	mov	r0, r4
 800a256:	f7f6 fa15 	bl	8000684 <__addsf3>
 800a25a:	4604      	mov	r4, r0
 800a25c:	4620      	mov	r0, r4
 800a25e:	bd70      	pop	{r4, r5, r6, pc}
 800a260:	2a00      	cmp	r2, #0
 800a262:	d0fb      	beq.n	800a25c <__ieee754_sqrtf+0x20>
 800a264:	2800      	cmp	r0, #0
 800a266:	da06      	bge.n	800a276 <__ieee754_sqrtf+0x3a>
 800a268:	4601      	mov	r1, r0
 800a26a:	f7f6 fa09 	bl	8000680 <__aeabi_fsub>
 800a26e:	4601      	mov	r1, r0
 800a270:	f7f6 fbc4 	bl	80009fc <__aeabi_fdiv>
 800a274:	e7f1      	b.n	800a25a <__ieee754_sqrtf+0x1e>
 800a276:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800a27a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800a27e:	d029      	beq.n	800a2d4 <__ieee754_sqrtf+0x98>
 800a280:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800a284:	07cb      	lsls	r3, r1, #31
 800a286:	f04f 0300 	mov.w	r3, #0
 800a28a:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800a28e:	f04f 0419 	mov.w	r4, #25
 800a292:	461e      	mov	r6, r3
 800a294:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800a298:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800a29c:	bf58      	it	pl
 800a29e:	0052      	lslpl	r2, r2, #1
 800a2a0:	1040      	asrs	r0, r0, #1
 800a2a2:	0052      	lsls	r2, r2, #1
 800a2a4:	1875      	adds	r5, r6, r1
 800a2a6:	4295      	cmp	r5, r2
 800a2a8:	bfde      	ittt	le
 800a2aa:	186e      	addle	r6, r5, r1
 800a2ac:	1b52      	suble	r2, r2, r5
 800a2ae:	185b      	addle	r3, r3, r1
 800a2b0:	3c01      	subs	r4, #1
 800a2b2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a2b6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a2ba:	d1f3      	bne.n	800a2a4 <__ieee754_sqrtf+0x68>
 800a2bc:	b112      	cbz	r2, 800a2c4 <__ieee754_sqrtf+0x88>
 800a2be:	3301      	adds	r3, #1
 800a2c0:	f023 0301 	bic.w	r3, r3, #1
 800a2c4:	105c      	asrs	r4, r3, #1
 800a2c6:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800a2ca:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800a2ce:	e7c5      	b.n	800a25c <__ieee754_sqrtf+0x20>
 800a2d0:	005b      	lsls	r3, r3, #1
 800a2d2:	3201      	adds	r2, #1
 800a2d4:	0218      	lsls	r0, r3, #8
 800a2d6:	d5fb      	bpl.n	800a2d0 <__ieee754_sqrtf+0x94>
 800a2d8:	3a01      	subs	r2, #1
 800a2da:	1a89      	subs	r1, r1, r2
 800a2dc:	e7d0      	b.n	800a280 <__ieee754_sqrtf+0x44>
	...

0800a2e0 <__kernel_cosf>:
 800a2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e4:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800a2e8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800a2ec:	4606      	mov	r6, r0
 800a2ee:	4688      	mov	r8, r1
 800a2f0:	da03      	bge.n	800a2fa <__kernel_cosf+0x1a>
 800a2f2:	f7f6 fcab 	bl	8000c4c <__aeabi_f2iz>
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	d05c      	beq.n	800a3b4 <__kernel_cosf+0xd4>
 800a2fa:	4631      	mov	r1, r6
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	f7f6 fac9 	bl	8000894 <__aeabi_fmul>
 800a302:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a306:	4605      	mov	r5, r0
 800a308:	f7f6 fac4 	bl	8000894 <__aeabi_fmul>
 800a30c:	492b      	ldr	r1, [pc, #172]	; (800a3bc <__kernel_cosf+0xdc>)
 800a30e:	4607      	mov	r7, r0
 800a310:	4628      	mov	r0, r5
 800a312:	f7f6 fabf 	bl	8000894 <__aeabi_fmul>
 800a316:	492a      	ldr	r1, [pc, #168]	; (800a3c0 <__kernel_cosf+0xe0>)
 800a318:	f7f6 f9b4 	bl	8000684 <__addsf3>
 800a31c:	4629      	mov	r1, r5
 800a31e:	f7f6 fab9 	bl	8000894 <__aeabi_fmul>
 800a322:	4928      	ldr	r1, [pc, #160]	; (800a3c4 <__kernel_cosf+0xe4>)
 800a324:	f7f6 f9ac 	bl	8000680 <__aeabi_fsub>
 800a328:	4629      	mov	r1, r5
 800a32a:	f7f6 fab3 	bl	8000894 <__aeabi_fmul>
 800a32e:	4926      	ldr	r1, [pc, #152]	; (800a3c8 <__kernel_cosf+0xe8>)
 800a330:	f7f6 f9a8 	bl	8000684 <__addsf3>
 800a334:	4629      	mov	r1, r5
 800a336:	f7f6 faad 	bl	8000894 <__aeabi_fmul>
 800a33a:	4924      	ldr	r1, [pc, #144]	; (800a3cc <__kernel_cosf+0xec>)
 800a33c:	f7f6 f9a0 	bl	8000680 <__aeabi_fsub>
 800a340:	4629      	mov	r1, r5
 800a342:	f7f6 faa7 	bl	8000894 <__aeabi_fmul>
 800a346:	4922      	ldr	r1, [pc, #136]	; (800a3d0 <__kernel_cosf+0xf0>)
 800a348:	f7f6 f99c 	bl	8000684 <__addsf3>
 800a34c:	4629      	mov	r1, r5
 800a34e:	f7f6 faa1 	bl	8000894 <__aeabi_fmul>
 800a352:	4629      	mov	r1, r5
 800a354:	f7f6 fa9e 	bl	8000894 <__aeabi_fmul>
 800a358:	4641      	mov	r1, r8
 800a35a:	4605      	mov	r5, r0
 800a35c:	4630      	mov	r0, r6
 800a35e:	f7f6 fa99 	bl	8000894 <__aeabi_fmul>
 800a362:	4601      	mov	r1, r0
 800a364:	4628      	mov	r0, r5
 800a366:	f7f6 f98b 	bl	8000680 <__aeabi_fsub>
 800a36a:	4b1a      	ldr	r3, [pc, #104]	; (800a3d4 <__kernel_cosf+0xf4>)
 800a36c:	4605      	mov	r5, r0
 800a36e:	429c      	cmp	r4, r3
 800a370:	dc0a      	bgt.n	800a388 <__kernel_cosf+0xa8>
 800a372:	4601      	mov	r1, r0
 800a374:	4638      	mov	r0, r7
 800a376:	f7f6 f983 	bl	8000680 <__aeabi_fsub>
 800a37a:	4601      	mov	r1, r0
 800a37c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a380:	f7f6 f97e 	bl	8000680 <__aeabi_fsub>
 800a384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a388:	4b13      	ldr	r3, [pc, #76]	; (800a3d8 <__kernel_cosf+0xf8>)
 800a38a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a38e:	429c      	cmp	r4, r3
 800a390:	bfcc      	ite	gt
 800a392:	4c12      	ldrgt	r4, [pc, #72]	; (800a3dc <__kernel_cosf+0xfc>)
 800a394:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800a398:	4621      	mov	r1, r4
 800a39a:	f7f6 f971 	bl	8000680 <__aeabi_fsub>
 800a39e:	4621      	mov	r1, r4
 800a3a0:	4606      	mov	r6, r0
 800a3a2:	4638      	mov	r0, r7
 800a3a4:	f7f6 f96c 	bl	8000680 <__aeabi_fsub>
 800a3a8:	4629      	mov	r1, r5
 800a3aa:	f7f6 f969 	bl	8000680 <__aeabi_fsub>
 800a3ae:	4601      	mov	r1, r0
 800a3b0:	4630      	mov	r0, r6
 800a3b2:	e7e5      	b.n	800a380 <__kernel_cosf+0xa0>
 800a3b4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a3b8:	e7e4      	b.n	800a384 <__kernel_cosf+0xa4>
 800a3ba:	bf00      	nop
 800a3bc:	ad47d74e 	.word	0xad47d74e
 800a3c0:	310f74f6 	.word	0x310f74f6
 800a3c4:	3493f27c 	.word	0x3493f27c
 800a3c8:	37d00d01 	.word	0x37d00d01
 800a3cc:	3ab60b61 	.word	0x3ab60b61
 800a3d0:	3d2aaaab 	.word	0x3d2aaaab
 800a3d4:	3e999999 	.word	0x3e999999
 800a3d8:	3f480000 	.word	0x3f480000
 800a3dc:	3e900000 	.word	0x3e900000

0800a3e0 <__kernel_rem_pio2f>:
 800a3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e4:	b0db      	sub	sp, #364	; 0x16c
 800a3e6:	9202      	str	r2, [sp, #8]
 800a3e8:	9304      	str	r3, [sp, #16]
 800a3ea:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800a3ec:	4bb2      	ldr	r3, [pc, #712]	; (800a6b8 <__kernel_rem_pio2f+0x2d8>)
 800a3ee:	9005      	str	r0, [sp, #20]
 800a3f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f4:	9100      	str	r1, [sp, #0]
 800a3f6:	9301      	str	r3, [sp, #4]
 800a3f8:	9b04      	ldr	r3, [sp, #16]
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	9303      	str	r3, [sp, #12]
 800a3fe:	9b02      	ldr	r3, [sp, #8]
 800a400:	1d1a      	adds	r2, r3, #4
 800a402:	f2c0 809b 	blt.w	800a53c <__kernel_rem_pio2f+0x15c>
 800a406:	1edc      	subs	r4, r3, #3
 800a408:	bf48      	it	mi
 800a40a:	1d1c      	addmi	r4, r3, #4
 800a40c:	10e4      	asrs	r4, r4, #3
 800a40e:	2500      	movs	r5, #0
 800a410:	f04f 0b00 	mov.w	fp, #0
 800a414:	1c67      	adds	r7, r4, #1
 800a416:	00fb      	lsls	r3, r7, #3
 800a418:	9306      	str	r3, [sp, #24]
 800a41a:	9b02      	ldr	r3, [sp, #8]
 800a41c:	9a03      	ldr	r2, [sp, #12]
 800a41e:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800a422:	9b01      	ldr	r3, [sp, #4]
 800a424:	eba4 0802 	sub.w	r8, r4, r2
 800a428:	eb03 0902 	add.w	r9, r3, r2
 800a42c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800a42e:	ae1e      	add	r6, sp, #120	; 0x78
 800a430:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 800a434:	454d      	cmp	r5, r9
 800a436:	f340 8083 	ble.w	800a540 <__kernel_rem_pio2f+0x160>
 800a43a:	9a04      	ldr	r2, [sp, #16]
 800a43c:	ab1e      	add	r3, sp, #120	; 0x78
 800a43e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800a442:	f04f 0900 	mov.w	r9, #0
 800a446:	2300      	movs	r3, #0
 800a448:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 800a44c:	9a01      	ldr	r2, [sp, #4]
 800a44e:	4591      	cmp	r9, r2
 800a450:	f340 809e 	ble.w	800a590 <__kernel_rem_pio2f+0x1b0>
 800a454:	4613      	mov	r3, r2
 800a456:	aa0a      	add	r2, sp, #40	; 0x28
 800a458:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a45c:	9308      	str	r3, [sp, #32]
 800a45e:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800a460:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a464:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a468:	9307      	str	r3, [sp, #28]
 800a46a:	ac0a      	add	r4, sp, #40	; 0x28
 800a46c:	4626      	mov	r6, r4
 800a46e:	46c3      	mov	fp, r8
 800a470:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800a474:	ab5a      	add	r3, sp, #360	; 0x168
 800a476:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800a47a:	f853 5c50 	ldr.w	r5, [r3, #-80]
 800a47e:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800a482:	f1bb 0f00 	cmp.w	fp, #0
 800a486:	f300 8088 	bgt.w	800a59a <__kernel_rem_pio2f+0x1ba>
 800a48a:	4639      	mov	r1, r7
 800a48c:	4628      	mov	r0, r5
 800a48e:	f000 fbdf 	bl	800ac50 <scalbnf>
 800a492:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800a496:	4605      	mov	r5, r0
 800a498:	f7f6 f9fc 	bl	8000894 <__aeabi_fmul>
 800a49c:	f7ff fc26 	bl	8009cec <floorf>
 800a4a0:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800a4a4:	f7f6 f9f6 	bl	8000894 <__aeabi_fmul>
 800a4a8:	4601      	mov	r1, r0
 800a4aa:	4628      	mov	r0, r5
 800a4ac:	f7f6 f8e8 	bl	8000680 <__aeabi_fsub>
 800a4b0:	4605      	mov	r5, r0
 800a4b2:	f7f6 fbcb 	bl	8000c4c <__aeabi_f2iz>
 800a4b6:	4606      	mov	r6, r0
 800a4b8:	f7f6 f998 	bl	80007ec <__aeabi_i2f>
 800a4bc:	4601      	mov	r1, r0
 800a4be:	4628      	mov	r0, r5
 800a4c0:	f7f6 f8de 	bl	8000680 <__aeabi_fsub>
 800a4c4:	2f00      	cmp	r7, #0
 800a4c6:	4681      	mov	r9, r0
 800a4c8:	f340 8086 	ble.w	800a5d8 <__kernel_rem_pio2f+0x1f8>
 800a4cc:	f108 32ff 	add.w	r2, r8, #4294967295
 800a4d0:	ab0a      	add	r3, sp, #40	; 0x28
 800a4d2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800a4d6:	f1c7 0108 	rsb	r1, r7, #8
 800a4da:	fa45 f301 	asr.w	r3, r5, r1
 800a4de:	441e      	add	r6, r3
 800a4e0:	408b      	lsls	r3, r1
 800a4e2:	1aed      	subs	r5, r5, r3
 800a4e4:	f1c7 0007 	rsb	r0, r7, #7
 800a4e8:	ab0a      	add	r3, sp, #40	; 0x28
 800a4ea:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a4ee:	4105      	asrs	r5, r0
 800a4f0:	2d00      	cmp	r5, #0
 800a4f2:	dd7f      	ble.n	800a5f4 <__kernel_rem_pio2f+0x214>
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	4692      	mov	sl, r2
 800a4f8:	3601      	adds	r6, #1
 800a4fa:	4590      	cmp	r8, r2
 800a4fc:	f300 80b0 	bgt.w	800a660 <__kernel_rem_pio2f+0x280>
 800a500:	2f00      	cmp	r7, #0
 800a502:	dd05      	ble.n	800a510 <__kernel_rem_pio2f+0x130>
 800a504:	2f01      	cmp	r7, #1
 800a506:	f000 80bd 	beq.w	800a684 <__kernel_rem_pio2f+0x2a4>
 800a50a:	2f02      	cmp	r7, #2
 800a50c:	f000 80c5 	beq.w	800a69a <__kernel_rem_pio2f+0x2ba>
 800a510:	2d02      	cmp	r5, #2
 800a512:	d16f      	bne.n	800a5f4 <__kernel_rem_pio2f+0x214>
 800a514:	4649      	mov	r1, r9
 800a516:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a51a:	f7f6 f8b1 	bl	8000680 <__aeabi_fsub>
 800a51e:	4681      	mov	r9, r0
 800a520:	f1ba 0f00 	cmp.w	sl, #0
 800a524:	d066      	beq.n	800a5f4 <__kernel_rem_pio2f+0x214>
 800a526:	4639      	mov	r1, r7
 800a528:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a52c:	f000 fb90 	bl	800ac50 <scalbnf>
 800a530:	4601      	mov	r1, r0
 800a532:	4648      	mov	r0, r9
 800a534:	f7f6 f8a4 	bl	8000680 <__aeabi_fsub>
 800a538:	4681      	mov	r9, r0
 800a53a:	e05b      	b.n	800a5f4 <__kernel_rem_pio2f+0x214>
 800a53c:	2400      	movs	r4, #0
 800a53e:	e766      	b.n	800a40e <__kernel_rem_pio2f+0x2e>
 800a540:	eb18 0f05 	cmn.w	r8, r5
 800a544:	d407      	bmi.n	800a556 <__kernel_rem_pio2f+0x176>
 800a546:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800a54a:	f7f6 f94f 	bl	80007ec <__aeabi_i2f>
 800a54e:	f846 0b04 	str.w	r0, [r6], #4
 800a552:	3501      	adds	r5, #1
 800a554:	e76e      	b.n	800a434 <__kernel_rem_pio2f+0x54>
 800a556:	4658      	mov	r0, fp
 800a558:	e7f9      	b.n	800a54e <__kernel_rem_pio2f+0x16e>
 800a55a:	9307      	str	r3, [sp, #28]
 800a55c:	9b05      	ldr	r3, [sp, #20]
 800a55e:	f8da 1000 	ldr.w	r1, [sl]
 800a562:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a566:	f7f6 f995 	bl	8000894 <__aeabi_fmul>
 800a56a:	4601      	mov	r1, r0
 800a56c:	4630      	mov	r0, r6
 800a56e:	f7f6 f889 	bl	8000684 <__addsf3>
 800a572:	4606      	mov	r6, r0
 800a574:	9b07      	ldr	r3, [sp, #28]
 800a576:	f108 0801 	add.w	r8, r8, #1
 800a57a:	9a03      	ldr	r2, [sp, #12]
 800a57c:	f1aa 0a04 	sub.w	sl, sl, #4
 800a580:	4590      	cmp	r8, r2
 800a582:	ddea      	ble.n	800a55a <__kernel_rem_pio2f+0x17a>
 800a584:	f84b 6b04 	str.w	r6, [fp], #4
 800a588:	f109 0901 	add.w	r9, r9, #1
 800a58c:	3504      	adds	r5, #4
 800a58e:	e75d      	b.n	800a44c <__kernel_rem_pio2f+0x6c>
 800a590:	46aa      	mov	sl, r5
 800a592:	461e      	mov	r6, r3
 800a594:	f04f 0800 	mov.w	r8, #0
 800a598:	e7ef      	b.n	800a57a <__kernel_rem_pio2f+0x19a>
 800a59a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800a59e:	4628      	mov	r0, r5
 800a5a0:	f7f6 f978 	bl	8000894 <__aeabi_fmul>
 800a5a4:	f7f6 fb52 	bl	8000c4c <__aeabi_f2iz>
 800a5a8:	f7f6 f920 	bl	80007ec <__aeabi_i2f>
 800a5ac:	4649      	mov	r1, r9
 800a5ae:	9009      	str	r0, [sp, #36]	; 0x24
 800a5b0:	f7f6 f970 	bl	8000894 <__aeabi_fmul>
 800a5b4:	4601      	mov	r1, r0
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	f7f6 f862 	bl	8000680 <__aeabi_fsub>
 800a5bc:	f7f6 fb46 	bl	8000c4c <__aeabi_f2iz>
 800a5c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a5c6:	f846 0b04 	str.w	r0, [r6], #4
 800a5ca:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7f6 f858 	bl	8000684 <__addsf3>
 800a5d4:	4605      	mov	r5, r0
 800a5d6:	e754      	b.n	800a482 <__kernel_rem_pio2f+0xa2>
 800a5d8:	d106      	bne.n	800a5e8 <__kernel_rem_pio2f+0x208>
 800a5da:	f108 33ff 	add.w	r3, r8, #4294967295
 800a5de:	aa0a      	add	r2, sp, #40	; 0x28
 800a5e0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800a5e4:	11ed      	asrs	r5, r5, #7
 800a5e6:	e783      	b.n	800a4f0 <__kernel_rem_pio2f+0x110>
 800a5e8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a5ec:	f7f6 fb04 	bl	8000bf8 <__aeabi_fcmpge>
 800a5f0:	4605      	mov	r5, r0
 800a5f2:	bb98      	cbnz	r0, 800a65c <__kernel_rem_pio2f+0x27c>
 800a5f4:	2100      	movs	r1, #0
 800a5f6:	4648      	mov	r0, r9
 800a5f8:	f7f6 fae0 	bl	8000bbc <__aeabi_fcmpeq>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	f000 8098 	beq.w	800a732 <__kernel_rem_pio2f+0x352>
 800a602:	f108 34ff 	add.w	r4, r8, #4294967295
 800a606:	4623      	mov	r3, r4
 800a608:	2200      	movs	r2, #0
 800a60a:	9901      	ldr	r1, [sp, #4]
 800a60c:	428b      	cmp	r3, r1
 800a60e:	da4c      	bge.n	800a6aa <__kernel_rem_pio2f+0x2ca>
 800a610:	2a00      	cmp	r2, #0
 800a612:	d07a      	beq.n	800a70a <__kernel_rem_pio2f+0x32a>
 800a614:	ab0a      	add	r3, sp, #40	; 0x28
 800a616:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a61a:	3f08      	subs	r7, #8
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f000 8086 	beq.w	800a72e <__kernel_rem_pio2f+0x34e>
 800a622:	4639      	mov	r1, r7
 800a624:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a628:	f000 fb12 	bl	800ac50 <scalbnf>
 800a62c:	46a2      	mov	sl, r4
 800a62e:	4681      	mov	r9, r0
 800a630:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800a634:	af46      	add	r7, sp, #280	; 0x118
 800a636:	f1ba 0f00 	cmp.w	sl, #0
 800a63a:	f280 80af 	bge.w	800a79c <__kernel_rem_pio2f+0x3bc>
 800a63e:	4627      	mov	r7, r4
 800a640:	2200      	movs	r2, #0
 800a642:	2f00      	cmp	r7, #0
 800a644:	f2c0 80d9 	blt.w	800a7fa <__kernel_rem_pio2f+0x41a>
 800a648:	a946      	add	r1, sp, #280	; 0x118
 800a64a:	4690      	mov	r8, r2
 800a64c:	f04f 0a00 	mov.w	sl, #0
 800a650:	4b1a      	ldr	r3, [pc, #104]	; (800a6bc <__kernel_rem_pio2f+0x2dc>)
 800a652:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800a656:	eba4 0907 	sub.w	r9, r4, r7
 800a65a:	e0c2      	b.n	800a7e2 <__kernel_rem_pio2f+0x402>
 800a65c:	2502      	movs	r5, #2
 800a65e:	e749      	b.n	800a4f4 <__kernel_rem_pio2f+0x114>
 800a660:	6823      	ldr	r3, [r4, #0]
 800a662:	f1ba 0f00 	cmp.w	sl, #0
 800a666:	d108      	bne.n	800a67a <__kernel_rem_pio2f+0x29a>
 800a668:	b11b      	cbz	r3, 800a672 <__kernel_rem_pio2f+0x292>
 800a66a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a66e:	6023      	str	r3, [r4, #0]
 800a670:	2301      	movs	r3, #1
 800a672:	469a      	mov	sl, r3
 800a674:	3201      	adds	r2, #1
 800a676:	3404      	adds	r4, #4
 800a678:	e73f      	b.n	800a4fa <__kernel_rem_pio2f+0x11a>
 800a67a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800a67e:	6023      	str	r3, [r4, #0]
 800a680:	4653      	mov	r3, sl
 800a682:	e7f6      	b.n	800a672 <__kernel_rem_pio2f+0x292>
 800a684:	f108 32ff 	add.w	r2, r8, #4294967295
 800a688:	ab0a      	add	r3, sp, #40	; 0x28
 800a68a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a68e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a692:	a90a      	add	r1, sp, #40	; 0x28
 800a694:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a698:	e73a      	b.n	800a510 <__kernel_rem_pio2f+0x130>
 800a69a:	f108 32ff 	add.w	r2, r8, #4294967295
 800a69e:	ab0a      	add	r3, sp, #40	; 0x28
 800a6a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6a8:	e7f3      	b.n	800a692 <__kernel_rem_pio2f+0x2b2>
 800a6aa:	a90a      	add	r1, sp, #40	; 0x28
 800a6ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a6b0:	3b01      	subs	r3, #1
 800a6b2:	430a      	orrs	r2, r1
 800a6b4:	e7a9      	b.n	800a60a <__kernel_rem_pio2f+0x22a>
 800a6b6:	bf00      	nop
 800a6b8:	0800b410 	.word	0x0800b410
 800a6bc:	0800b3e4 	.word	0x0800b3e4
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a6c6:	2900      	cmp	r1, #0
 800a6c8:	d0fa      	beq.n	800a6c0 <__kernel_rem_pio2f+0x2e0>
 800a6ca:	9a04      	ldr	r2, [sp, #16]
 800a6cc:	f108 0501 	add.w	r5, r8, #1
 800a6d0:	eb08 0402 	add.w	r4, r8, r2
 800a6d4:	aa1e      	add	r2, sp, #120	; 0x78
 800a6d6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a6da:	4498      	add	r8, r3
 800a6dc:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800a6e0:	45a8      	cmp	r8, r5
 800a6e2:	f6ff aec2 	blt.w	800a46a <__kernel_rem_pio2f+0x8a>
 800a6e6:	9b07      	ldr	r3, [sp, #28]
 800a6e8:	46a3      	mov	fp, r4
 800a6ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a6ee:	f7f6 f87d 	bl	80007ec <__aeabi_i2f>
 800a6f2:	f04f 0a00 	mov.w	sl, #0
 800a6f6:	2600      	movs	r6, #0
 800a6f8:	6020      	str	r0, [r4, #0]
 800a6fa:	9b03      	ldr	r3, [sp, #12]
 800a6fc:	459a      	cmp	sl, r3
 800a6fe:	dd07      	ble.n	800a710 <__kernel_rem_pio2f+0x330>
 800a700:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800a704:	3404      	adds	r4, #4
 800a706:	3501      	adds	r5, #1
 800a708:	e7ea      	b.n	800a6e0 <__kernel_rem_pio2f+0x300>
 800a70a:	2301      	movs	r3, #1
 800a70c:	9a08      	ldr	r2, [sp, #32]
 800a70e:	e7d8      	b.n	800a6c2 <__kernel_rem_pio2f+0x2e2>
 800a710:	9b05      	ldr	r3, [sp, #20]
 800a712:	f85b 0904 	ldr.w	r0, [fp], #-4
 800a716:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800a71a:	f7f6 f8bb 	bl	8000894 <__aeabi_fmul>
 800a71e:	4601      	mov	r1, r0
 800a720:	4630      	mov	r0, r6
 800a722:	f7f5 ffaf 	bl	8000684 <__addsf3>
 800a726:	f10a 0a01 	add.w	sl, sl, #1
 800a72a:	4606      	mov	r6, r0
 800a72c:	e7e5      	b.n	800a6fa <__kernel_rem_pio2f+0x31a>
 800a72e:	3c01      	subs	r4, #1
 800a730:	e770      	b.n	800a614 <__kernel_rem_pio2f+0x234>
 800a732:	9b06      	ldr	r3, [sp, #24]
 800a734:	9a02      	ldr	r2, [sp, #8]
 800a736:	4648      	mov	r0, r9
 800a738:	1a99      	subs	r1, r3, r2
 800a73a:	f000 fa89 	bl	800ac50 <scalbnf>
 800a73e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800a742:	4604      	mov	r4, r0
 800a744:	f7f6 fa58 	bl	8000bf8 <__aeabi_fcmpge>
 800a748:	b300      	cbz	r0, 800a78c <__kernel_rem_pio2f+0x3ac>
 800a74a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800a74e:	4620      	mov	r0, r4
 800a750:	f7f6 f8a0 	bl	8000894 <__aeabi_fmul>
 800a754:	f7f6 fa7a 	bl	8000c4c <__aeabi_f2iz>
 800a758:	f7f6 f848 	bl	80007ec <__aeabi_i2f>
 800a75c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800a760:	4681      	mov	r9, r0
 800a762:	f7f6 f897 	bl	8000894 <__aeabi_fmul>
 800a766:	4601      	mov	r1, r0
 800a768:	4620      	mov	r0, r4
 800a76a:	f7f5 ff89 	bl	8000680 <__aeabi_fsub>
 800a76e:	f7f6 fa6d 	bl	8000c4c <__aeabi_f2iz>
 800a772:	ab0a      	add	r3, sp, #40	; 0x28
 800a774:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a778:	4648      	mov	r0, r9
 800a77a:	f7f6 fa67 	bl	8000c4c <__aeabi_f2iz>
 800a77e:	f108 0401 	add.w	r4, r8, #1
 800a782:	ab0a      	add	r3, sp, #40	; 0x28
 800a784:	3708      	adds	r7, #8
 800a786:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a78a:	e74a      	b.n	800a622 <__kernel_rem_pio2f+0x242>
 800a78c:	4620      	mov	r0, r4
 800a78e:	f7f6 fa5d 	bl	8000c4c <__aeabi_f2iz>
 800a792:	ab0a      	add	r3, sp, #40	; 0x28
 800a794:	4644      	mov	r4, r8
 800a796:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a79a:	e742      	b.n	800a622 <__kernel_rem_pio2f+0x242>
 800a79c:	ab0a      	add	r3, sp, #40	; 0x28
 800a79e:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a7a2:	f7f6 f823 	bl	80007ec <__aeabi_i2f>
 800a7a6:	4649      	mov	r1, r9
 800a7a8:	f7f6 f874 	bl	8000894 <__aeabi_fmul>
 800a7ac:	4641      	mov	r1, r8
 800a7ae:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800a7b2:	4648      	mov	r0, r9
 800a7b4:	f7f6 f86e 	bl	8000894 <__aeabi_fmul>
 800a7b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7bc:	4681      	mov	r9, r0
 800a7be:	e73a      	b.n	800a636 <__kernel_rem_pio2f+0x256>
 800a7c0:	f853 0b04 	ldr.w	r0, [r3], #4
 800a7c4:	f85b 1b04 	ldr.w	r1, [fp], #4
 800a7c8:	9203      	str	r2, [sp, #12]
 800a7ca:	9302      	str	r3, [sp, #8]
 800a7cc:	f7f6 f862 	bl	8000894 <__aeabi_fmul>
 800a7d0:	4601      	mov	r1, r0
 800a7d2:	4640      	mov	r0, r8
 800a7d4:	f7f5 ff56 	bl	8000684 <__addsf3>
 800a7d8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a7dc:	4680      	mov	r8, r0
 800a7de:	f10a 0a01 	add.w	sl, sl, #1
 800a7e2:	9901      	ldr	r1, [sp, #4]
 800a7e4:	458a      	cmp	sl, r1
 800a7e6:	dc01      	bgt.n	800a7ec <__kernel_rem_pio2f+0x40c>
 800a7e8:	45ca      	cmp	sl, r9
 800a7ea:	dde9      	ble.n	800a7c0 <__kernel_rem_pio2f+0x3e0>
 800a7ec:	ab5a      	add	r3, sp, #360	; 0x168
 800a7ee:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800a7f2:	f849 8ca0 	str.w	r8, [r9, #-160]
 800a7f6:	3f01      	subs	r7, #1
 800a7f8:	e723      	b.n	800a642 <__kernel_rem_pio2f+0x262>
 800a7fa:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800a7fc:	2b02      	cmp	r3, #2
 800a7fe:	dc07      	bgt.n	800a810 <__kernel_rem_pio2f+0x430>
 800a800:	2b00      	cmp	r3, #0
 800a802:	dc4d      	bgt.n	800a8a0 <__kernel_rem_pio2f+0x4c0>
 800a804:	d02e      	beq.n	800a864 <__kernel_rem_pio2f+0x484>
 800a806:	f006 0007 	and.w	r0, r6, #7
 800a80a:	b05b      	add	sp, #364	; 0x16c
 800a80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a810:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800a812:	2b03      	cmp	r3, #3
 800a814:	d1f7      	bne.n	800a806 <__kernel_rem_pio2f+0x426>
 800a816:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800a81a:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800a81e:	46b8      	mov	r8, r7
 800a820:	46a2      	mov	sl, r4
 800a822:	f1ba 0f00 	cmp.w	sl, #0
 800a826:	dc48      	bgt.n	800a8ba <__kernel_rem_pio2f+0x4da>
 800a828:	46a1      	mov	r9, r4
 800a82a:	f1b9 0f01 	cmp.w	r9, #1
 800a82e:	dc5f      	bgt.n	800a8f0 <__kernel_rem_pio2f+0x510>
 800a830:	2000      	movs	r0, #0
 800a832:	2c01      	cmp	r4, #1
 800a834:	dc75      	bgt.n	800a922 <__kernel_rem_pio2f+0x542>
 800a836:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800a838:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800a83a:	2d00      	cmp	r5, #0
 800a83c:	d177      	bne.n	800a92e <__kernel_rem_pio2f+0x54e>
 800a83e:	9900      	ldr	r1, [sp, #0]
 800a840:	600a      	str	r2, [r1, #0]
 800a842:	460a      	mov	r2, r1
 800a844:	604b      	str	r3, [r1, #4]
 800a846:	6090      	str	r0, [r2, #8]
 800a848:	e7dd      	b.n	800a806 <__kernel_rem_pio2f+0x426>
 800a84a:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800a84e:	f7f5 ff19 	bl	8000684 <__addsf3>
 800a852:	3c01      	subs	r4, #1
 800a854:	2c00      	cmp	r4, #0
 800a856:	daf8      	bge.n	800a84a <__kernel_rem_pio2f+0x46a>
 800a858:	b10d      	cbz	r5, 800a85e <__kernel_rem_pio2f+0x47e>
 800a85a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a85e:	9b00      	ldr	r3, [sp, #0]
 800a860:	6018      	str	r0, [r3, #0]
 800a862:	e7d0      	b.n	800a806 <__kernel_rem_pio2f+0x426>
 800a864:	2000      	movs	r0, #0
 800a866:	af32      	add	r7, sp, #200	; 0xc8
 800a868:	e7f4      	b.n	800a854 <__kernel_rem_pio2f+0x474>
 800a86a:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800a86e:	f7f5 ff09 	bl	8000684 <__addsf3>
 800a872:	3f01      	subs	r7, #1
 800a874:	2f00      	cmp	r7, #0
 800a876:	daf8      	bge.n	800a86a <__kernel_rem_pio2f+0x48a>
 800a878:	b1bd      	cbz	r5, 800a8aa <__kernel_rem_pio2f+0x4ca>
 800a87a:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800a87e:	9a00      	ldr	r2, [sp, #0]
 800a880:	4601      	mov	r1, r0
 800a882:	6013      	str	r3, [r2, #0]
 800a884:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800a886:	f7f5 fefb 	bl	8000680 <__aeabi_fsub>
 800a88a:	2701      	movs	r7, #1
 800a88c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800a890:	42bc      	cmp	r4, r7
 800a892:	da0c      	bge.n	800a8ae <__kernel_rem_pio2f+0x4ce>
 800a894:	b10d      	cbz	r5, 800a89a <__kernel_rem_pio2f+0x4ba>
 800a896:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a89a:	9b00      	ldr	r3, [sp, #0]
 800a89c:	6058      	str	r0, [r3, #4]
 800a89e:	e7b2      	b.n	800a806 <__kernel_rem_pio2f+0x426>
 800a8a0:	4627      	mov	r7, r4
 800a8a2:	2000      	movs	r0, #0
 800a8a4:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800a8a8:	e7e4      	b.n	800a874 <__kernel_rem_pio2f+0x494>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	e7e7      	b.n	800a87e <__kernel_rem_pio2f+0x49e>
 800a8ae:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800a8b2:	f7f5 fee7 	bl	8000684 <__addsf3>
 800a8b6:	3701      	adds	r7, #1
 800a8b8:	e7ea      	b.n	800a890 <__kernel_rem_pio2f+0x4b0>
 800a8ba:	f8d8 3000 	ldr.w	r3, [r8]
 800a8be:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	4610      	mov	r0, r2
 800a8c6:	9302      	str	r3, [sp, #8]
 800a8c8:	9201      	str	r2, [sp, #4]
 800a8ca:	f7f5 fedb 	bl	8000684 <__addsf3>
 800a8ce:	9a01      	ldr	r2, [sp, #4]
 800a8d0:	4601      	mov	r1, r0
 800a8d2:	4681      	mov	r9, r0
 800a8d4:	4610      	mov	r0, r2
 800a8d6:	f7f5 fed3 	bl	8000680 <__aeabi_fsub>
 800a8da:	9b02      	ldr	r3, [sp, #8]
 800a8dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	f7f5 fecf 	bl	8000684 <__addsf3>
 800a8e6:	f848 0904 	str.w	r0, [r8], #-4
 800a8ea:	f8c8 9000 	str.w	r9, [r8]
 800a8ee:	e798      	b.n	800a822 <__kernel_rem_pio2f+0x442>
 800a8f0:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800a8f4:	f8d7 a000 	ldr.w	sl, [r7]
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	4651      	mov	r1, sl
 800a8fc:	9301      	str	r3, [sp, #4]
 800a8fe:	f7f5 fec1 	bl	8000684 <__addsf3>
 800a902:	9b01      	ldr	r3, [sp, #4]
 800a904:	4601      	mov	r1, r0
 800a906:	4680      	mov	r8, r0
 800a908:	4618      	mov	r0, r3
 800a90a:	f7f5 feb9 	bl	8000680 <__aeabi_fsub>
 800a90e:	4651      	mov	r1, sl
 800a910:	f7f5 feb8 	bl	8000684 <__addsf3>
 800a914:	f847 0904 	str.w	r0, [r7], #-4
 800a918:	f109 39ff 	add.w	r9, r9, #4294967295
 800a91c:	f8c7 8000 	str.w	r8, [r7]
 800a920:	e783      	b.n	800a82a <__kernel_rem_pio2f+0x44a>
 800a922:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800a926:	f7f5 fead 	bl	8000684 <__addsf3>
 800a92a:	3c01      	subs	r4, #1
 800a92c:	e781      	b.n	800a832 <__kernel_rem_pio2f+0x452>
 800a92e:	9900      	ldr	r1, [sp, #0]
 800a930:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800a934:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a938:	600a      	str	r2, [r1, #0]
 800a93a:	604b      	str	r3, [r1, #4]
 800a93c:	460a      	mov	r2, r1
 800a93e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a942:	e780      	b.n	800a846 <__kernel_rem_pio2f+0x466>

0800a944 <__kernel_sinf>:
 800a944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a948:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a94c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a950:	4604      	mov	r4, r0
 800a952:	460f      	mov	r7, r1
 800a954:	4691      	mov	r9, r2
 800a956:	da03      	bge.n	800a960 <__kernel_sinf+0x1c>
 800a958:	f7f6 f978 	bl	8000c4c <__aeabi_f2iz>
 800a95c:	2800      	cmp	r0, #0
 800a95e:	d035      	beq.n	800a9cc <__kernel_sinf+0x88>
 800a960:	4621      	mov	r1, r4
 800a962:	4620      	mov	r0, r4
 800a964:	f7f5 ff96 	bl	8000894 <__aeabi_fmul>
 800a968:	4605      	mov	r5, r0
 800a96a:	4601      	mov	r1, r0
 800a96c:	4620      	mov	r0, r4
 800a96e:	f7f5 ff91 	bl	8000894 <__aeabi_fmul>
 800a972:	4929      	ldr	r1, [pc, #164]	; (800aa18 <__kernel_sinf+0xd4>)
 800a974:	4606      	mov	r6, r0
 800a976:	4628      	mov	r0, r5
 800a978:	f7f5 ff8c 	bl	8000894 <__aeabi_fmul>
 800a97c:	4927      	ldr	r1, [pc, #156]	; (800aa1c <__kernel_sinf+0xd8>)
 800a97e:	f7f5 fe7f 	bl	8000680 <__aeabi_fsub>
 800a982:	4629      	mov	r1, r5
 800a984:	f7f5 ff86 	bl	8000894 <__aeabi_fmul>
 800a988:	4925      	ldr	r1, [pc, #148]	; (800aa20 <__kernel_sinf+0xdc>)
 800a98a:	f7f5 fe7b 	bl	8000684 <__addsf3>
 800a98e:	4629      	mov	r1, r5
 800a990:	f7f5 ff80 	bl	8000894 <__aeabi_fmul>
 800a994:	4923      	ldr	r1, [pc, #140]	; (800aa24 <__kernel_sinf+0xe0>)
 800a996:	f7f5 fe73 	bl	8000680 <__aeabi_fsub>
 800a99a:	4629      	mov	r1, r5
 800a99c:	f7f5 ff7a 	bl	8000894 <__aeabi_fmul>
 800a9a0:	4921      	ldr	r1, [pc, #132]	; (800aa28 <__kernel_sinf+0xe4>)
 800a9a2:	f7f5 fe6f 	bl	8000684 <__addsf3>
 800a9a6:	4680      	mov	r8, r0
 800a9a8:	f1b9 0f00 	cmp.w	r9, #0
 800a9ac:	d111      	bne.n	800a9d2 <__kernel_sinf+0x8e>
 800a9ae:	4601      	mov	r1, r0
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	f7f5 ff6f 	bl	8000894 <__aeabi_fmul>
 800a9b6:	491d      	ldr	r1, [pc, #116]	; (800aa2c <__kernel_sinf+0xe8>)
 800a9b8:	f7f5 fe62 	bl	8000680 <__aeabi_fsub>
 800a9bc:	4631      	mov	r1, r6
 800a9be:	f7f5 ff69 	bl	8000894 <__aeabi_fmul>
 800a9c2:	4601      	mov	r1, r0
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	f7f5 fe5d 	bl	8000684 <__addsf3>
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9d2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a9d6:	4638      	mov	r0, r7
 800a9d8:	f7f5 ff5c 	bl	8000894 <__aeabi_fmul>
 800a9dc:	4641      	mov	r1, r8
 800a9de:	4681      	mov	r9, r0
 800a9e0:	4630      	mov	r0, r6
 800a9e2:	f7f5 ff57 	bl	8000894 <__aeabi_fmul>
 800a9e6:	4601      	mov	r1, r0
 800a9e8:	4648      	mov	r0, r9
 800a9ea:	f7f5 fe49 	bl	8000680 <__aeabi_fsub>
 800a9ee:	4629      	mov	r1, r5
 800a9f0:	f7f5 ff50 	bl	8000894 <__aeabi_fmul>
 800a9f4:	4639      	mov	r1, r7
 800a9f6:	f7f5 fe43 	bl	8000680 <__aeabi_fsub>
 800a9fa:	490c      	ldr	r1, [pc, #48]	; (800aa2c <__kernel_sinf+0xe8>)
 800a9fc:	4605      	mov	r5, r0
 800a9fe:	4630      	mov	r0, r6
 800aa00:	f7f5 ff48 	bl	8000894 <__aeabi_fmul>
 800aa04:	4601      	mov	r1, r0
 800aa06:	4628      	mov	r0, r5
 800aa08:	f7f5 fe3c 	bl	8000684 <__addsf3>
 800aa0c:	4601      	mov	r1, r0
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f7f5 fe36 	bl	8000680 <__aeabi_fsub>
 800aa14:	e7d9      	b.n	800a9ca <__kernel_sinf+0x86>
 800aa16:	bf00      	nop
 800aa18:	2f2ec9d3 	.word	0x2f2ec9d3
 800aa1c:	32d72f34 	.word	0x32d72f34
 800aa20:	3638ef1b 	.word	0x3638ef1b
 800aa24:	39500d01 	.word	0x39500d01
 800aa28:	3c088889 	.word	0x3c088889
 800aa2c:	3e2aaaab 	.word	0x3e2aaaab

0800aa30 <atanf>:
 800aa30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa34:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800aa38:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800aa3c:	4604      	mov	r4, r0
 800aa3e:	4680      	mov	r8, r0
 800aa40:	db0e      	blt.n	800aa60 <atanf+0x30>
 800aa42:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800aa46:	dd04      	ble.n	800aa52 <atanf+0x22>
 800aa48:	4601      	mov	r1, r0
 800aa4a:	f7f5 fe1b 	bl	8000684 <__addsf3>
 800aa4e:	4604      	mov	r4, r0
 800aa50:	e003      	b.n	800aa5a <atanf+0x2a>
 800aa52:	2800      	cmp	r0, #0
 800aa54:	f300 80ce 	bgt.w	800abf4 <atanf+0x1c4>
 800aa58:	4c67      	ldr	r4, [pc, #412]	; (800abf8 <atanf+0x1c8>)
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa60:	4b66      	ldr	r3, [pc, #408]	; (800abfc <atanf+0x1cc>)
 800aa62:	429d      	cmp	r5, r3
 800aa64:	dc0e      	bgt.n	800aa84 <atanf+0x54>
 800aa66:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800aa6a:	da08      	bge.n	800aa7e <atanf+0x4e>
 800aa6c:	4964      	ldr	r1, [pc, #400]	; (800ac00 <atanf+0x1d0>)
 800aa6e:	f7f5 fe09 	bl	8000684 <__addsf3>
 800aa72:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800aa76:	f7f6 f8c9 	bl	8000c0c <__aeabi_fcmpgt>
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	d1ed      	bne.n	800aa5a <atanf+0x2a>
 800aa7e:	f04f 36ff 	mov.w	r6, #4294967295
 800aa82:	e01c      	b.n	800aabe <atanf+0x8e>
 800aa84:	f000 f8e0 	bl	800ac48 <fabsf>
 800aa88:	4b5e      	ldr	r3, [pc, #376]	; (800ac04 <atanf+0x1d4>)
 800aa8a:	4604      	mov	r4, r0
 800aa8c:	429d      	cmp	r5, r3
 800aa8e:	dc7c      	bgt.n	800ab8a <atanf+0x15a>
 800aa90:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800aa94:	429d      	cmp	r5, r3
 800aa96:	dc67      	bgt.n	800ab68 <atanf+0x138>
 800aa98:	4601      	mov	r1, r0
 800aa9a:	f7f5 fdf3 	bl	8000684 <__addsf3>
 800aa9e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800aaa2:	f7f5 fded 	bl	8000680 <__aeabi_fsub>
 800aaa6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800aaaa:	4605      	mov	r5, r0
 800aaac:	4620      	mov	r0, r4
 800aaae:	f7f5 fde9 	bl	8000684 <__addsf3>
 800aab2:	4601      	mov	r1, r0
 800aab4:	4628      	mov	r0, r5
 800aab6:	f7f5 ffa1 	bl	80009fc <__aeabi_fdiv>
 800aaba:	2600      	movs	r6, #0
 800aabc:	4604      	mov	r4, r0
 800aabe:	4621      	mov	r1, r4
 800aac0:	4620      	mov	r0, r4
 800aac2:	f7f5 fee7 	bl	8000894 <__aeabi_fmul>
 800aac6:	4601      	mov	r1, r0
 800aac8:	4607      	mov	r7, r0
 800aaca:	f7f5 fee3 	bl	8000894 <__aeabi_fmul>
 800aace:	4605      	mov	r5, r0
 800aad0:	494d      	ldr	r1, [pc, #308]	; (800ac08 <atanf+0x1d8>)
 800aad2:	f7f5 fedf 	bl	8000894 <__aeabi_fmul>
 800aad6:	494d      	ldr	r1, [pc, #308]	; (800ac0c <atanf+0x1dc>)
 800aad8:	f7f5 fdd4 	bl	8000684 <__addsf3>
 800aadc:	4629      	mov	r1, r5
 800aade:	f7f5 fed9 	bl	8000894 <__aeabi_fmul>
 800aae2:	494b      	ldr	r1, [pc, #300]	; (800ac10 <atanf+0x1e0>)
 800aae4:	f7f5 fdce 	bl	8000684 <__addsf3>
 800aae8:	4629      	mov	r1, r5
 800aaea:	f7f5 fed3 	bl	8000894 <__aeabi_fmul>
 800aaee:	4949      	ldr	r1, [pc, #292]	; (800ac14 <atanf+0x1e4>)
 800aaf0:	f7f5 fdc8 	bl	8000684 <__addsf3>
 800aaf4:	4629      	mov	r1, r5
 800aaf6:	f7f5 fecd 	bl	8000894 <__aeabi_fmul>
 800aafa:	4947      	ldr	r1, [pc, #284]	; (800ac18 <atanf+0x1e8>)
 800aafc:	f7f5 fdc2 	bl	8000684 <__addsf3>
 800ab00:	4629      	mov	r1, r5
 800ab02:	f7f5 fec7 	bl	8000894 <__aeabi_fmul>
 800ab06:	4945      	ldr	r1, [pc, #276]	; (800ac1c <atanf+0x1ec>)
 800ab08:	f7f5 fdbc 	bl	8000684 <__addsf3>
 800ab0c:	4639      	mov	r1, r7
 800ab0e:	f7f5 fec1 	bl	8000894 <__aeabi_fmul>
 800ab12:	4943      	ldr	r1, [pc, #268]	; (800ac20 <atanf+0x1f0>)
 800ab14:	4607      	mov	r7, r0
 800ab16:	4628      	mov	r0, r5
 800ab18:	f7f5 febc 	bl	8000894 <__aeabi_fmul>
 800ab1c:	4941      	ldr	r1, [pc, #260]	; (800ac24 <atanf+0x1f4>)
 800ab1e:	f7f5 fdaf 	bl	8000680 <__aeabi_fsub>
 800ab22:	4629      	mov	r1, r5
 800ab24:	f7f5 feb6 	bl	8000894 <__aeabi_fmul>
 800ab28:	493f      	ldr	r1, [pc, #252]	; (800ac28 <atanf+0x1f8>)
 800ab2a:	f7f5 fda9 	bl	8000680 <__aeabi_fsub>
 800ab2e:	4629      	mov	r1, r5
 800ab30:	f7f5 feb0 	bl	8000894 <__aeabi_fmul>
 800ab34:	493d      	ldr	r1, [pc, #244]	; (800ac2c <atanf+0x1fc>)
 800ab36:	f7f5 fda3 	bl	8000680 <__aeabi_fsub>
 800ab3a:	4629      	mov	r1, r5
 800ab3c:	f7f5 feaa 	bl	8000894 <__aeabi_fmul>
 800ab40:	493b      	ldr	r1, [pc, #236]	; (800ac30 <atanf+0x200>)
 800ab42:	f7f5 fd9d 	bl	8000680 <__aeabi_fsub>
 800ab46:	4629      	mov	r1, r5
 800ab48:	f7f5 fea4 	bl	8000894 <__aeabi_fmul>
 800ab4c:	4601      	mov	r1, r0
 800ab4e:	4638      	mov	r0, r7
 800ab50:	f7f5 fd98 	bl	8000684 <__addsf3>
 800ab54:	4621      	mov	r1, r4
 800ab56:	f7f5 fe9d 	bl	8000894 <__aeabi_fmul>
 800ab5a:	1c73      	adds	r3, r6, #1
 800ab5c:	4601      	mov	r1, r0
 800ab5e:	d133      	bne.n	800abc8 <atanf+0x198>
 800ab60:	4620      	mov	r0, r4
 800ab62:	f7f5 fd8d 	bl	8000680 <__aeabi_fsub>
 800ab66:	e772      	b.n	800aa4e <atanf+0x1e>
 800ab68:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ab6c:	f7f5 fd88 	bl	8000680 <__aeabi_fsub>
 800ab70:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ab74:	4605      	mov	r5, r0
 800ab76:	4620      	mov	r0, r4
 800ab78:	f7f5 fd84 	bl	8000684 <__addsf3>
 800ab7c:	4601      	mov	r1, r0
 800ab7e:	4628      	mov	r0, r5
 800ab80:	f7f5 ff3c 	bl	80009fc <__aeabi_fdiv>
 800ab84:	2601      	movs	r6, #1
 800ab86:	4604      	mov	r4, r0
 800ab88:	e799      	b.n	800aabe <atanf+0x8e>
 800ab8a:	4b2a      	ldr	r3, [pc, #168]	; (800ac34 <atanf+0x204>)
 800ab8c:	429d      	cmp	r5, r3
 800ab8e:	dc14      	bgt.n	800abba <atanf+0x18a>
 800ab90:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800ab94:	f7f5 fd74 	bl	8000680 <__aeabi_fsub>
 800ab98:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800ab9c:	4605      	mov	r5, r0
 800ab9e:	4620      	mov	r0, r4
 800aba0:	f7f5 fe78 	bl	8000894 <__aeabi_fmul>
 800aba4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800aba8:	f7f5 fd6c 	bl	8000684 <__addsf3>
 800abac:	4601      	mov	r1, r0
 800abae:	4628      	mov	r0, r5
 800abb0:	f7f5 ff24 	bl	80009fc <__aeabi_fdiv>
 800abb4:	2602      	movs	r6, #2
 800abb6:	4604      	mov	r4, r0
 800abb8:	e781      	b.n	800aabe <atanf+0x8e>
 800abba:	4601      	mov	r1, r0
 800abbc:	481e      	ldr	r0, [pc, #120]	; (800ac38 <atanf+0x208>)
 800abbe:	f7f5 ff1d 	bl	80009fc <__aeabi_fdiv>
 800abc2:	2603      	movs	r6, #3
 800abc4:	4604      	mov	r4, r0
 800abc6:	e77a      	b.n	800aabe <atanf+0x8e>
 800abc8:	4b1c      	ldr	r3, [pc, #112]	; (800ac3c <atanf+0x20c>)
 800abca:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800abce:	f7f5 fd57 	bl	8000680 <__aeabi_fsub>
 800abd2:	4621      	mov	r1, r4
 800abd4:	f7f5 fd54 	bl	8000680 <__aeabi_fsub>
 800abd8:	4b19      	ldr	r3, [pc, #100]	; (800ac40 <atanf+0x210>)
 800abda:	4601      	mov	r1, r0
 800abdc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800abe0:	f7f5 fd4e 	bl	8000680 <__aeabi_fsub>
 800abe4:	f1b8 0f00 	cmp.w	r8, #0
 800abe8:	4604      	mov	r4, r0
 800abea:	f6bf af36 	bge.w	800aa5a <atanf+0x2a>
 800abee:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800abf2:	e72c      	b.n	800aa4e <atanf+0x1e>
 800abf4:	4c13      	ldr	r4, [pc, #76]	; (800ac44 <atanf+0x214>)
 800abf6:	e730      	b.n	800aa5a <atanf+0x2a>
 800abf8:	bfc90fdb 	.word	0xbfc90fdb
 800abfc:	3edfffff 	.word	0x3edfffff
 800ac00:	7149f2ca 	.word	0x7149f2ca
 800ac04:	3f97ffff 	.word	0x3f97ffff
 800ac08:	3c8569d7 	.word	0x3c8569d7
 800ac0c:	3d4bda59 	.word	0x3d4bda59
 800ac10:	3d886b35 	.word	0x3d886b35
 800ac14:	3dba2e6e 	.word	0x3dba2e6e
 800ac18:	3e124925 	.word	0x3e124925
 800ac1c:	3eaaaaab 	.word	0x3eaaaaab
 800ac20:	bd15a221 	.word	0xbd15a221
 800ac24:	3d6ef16b 	.word	0x3d6ef16b
 800ac28:	3d9d8795 	.word	0x3d9d8795
 800ac2c:	3de38e38 	.word	0x3de38e38
 800ac30:	3e4ccccd 	.word	0x3e4ccccd
 800ac34:	401bffff 	.word	0x401bffff
 800ac38:	bf800000 	.word	0xbf800000
 800ac3c:	0800b42c 	.word	0x0800b42c
 800ac40:	0800b41c 	.word	0x0800b41c
 800ac44:	3fc90fdb 	.word	0x3fc90fdb

0800ac48 <fabsf>:
 800ac48:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ac4c:	4770      	bx	lr
	...

0800ac50 <scalbnf>:
 800ac50:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800ac54:	b538      	push	{r3, r4, r5, lr}
 800ac56:	4603      	mov	r3, r0
 800ac58:	460d      	mov	r5, r1
 800ac5a:	4604      	mov	r4, r0
 800ac5c:	d02a      	beq.n	800acb4 <scalbnf+0x64>
 800ac5e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ac62:	d304      	bcc.n	800ac6e <scalbnf+0x1e>
 800ac64:	4601      	mov	r1, r0
 800ac66:	f7f5 fd0d 	bl	8000684 <__addsf3>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	e022      	b.n	800acb4 <scalbnf+0x64>
 800ac6e:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800ac72:	d117      	bne.n	800aca4 <scalbnf+0x54>
 800ac74:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800ac78:	f7f5 fe0c 	bl	8000894 <__aeabi_fmul>
 800ac7c:	4a17      	ldr	r2, [pc, #92]	; (800acdc <scalbnf+0x8c>)
 800ac7e:	4603      	mov	r3, r0
 800ac80:	4295      	cmp	r5, r2
 800ac82:	db0b      	blt.n	800ac9c <scalbnf+0x4c>
 800ac84:	4604      	mov	r4, r0
 800ac86:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800ac8a:	3a19      	subs	r2, #25
 800ac8c:	442a      	add	r2, r5
 800ac8e:	2afe      	cmp	r2, #254	; 0xfe
 800ac90:	dd0a      	ble.n	800aca8 <scalbnf+0x58>
 800ac92:	4913      	ldr	r1, [pc, #76]	; (800ace0 <scalbnf+0x90>)
 800ac94:	4618      	mov	r0, r3
 800ac96:	f361 001e 	bfi	r0, r1, #0, #31
 800ac9a:	e000      	b.n	800ac9e <scalbnf+0x4e>
 800ac9c:	4911      	ldr	r1, [pc, #68]	; (800ace4 <scalbnf+0x94>)
 800ac9e:	f7f5 fdf9 	bl	8000894 <__aeabi_fmul>
 800aca2:	e7e2      	b.n	800ac6a <scalbnf+0x1a>
 800aca4:	0dd2      	lsrs	r2, r2, #23
 800aca6:	e7f1      	b.n	800ac8c <scalbnf+0x3c>
 800aca8:	2a00      	cmp	r2, #0
 800acaa:	dd05      	ble.n	800acb8 <scalbnf+0x68>
 800acac:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800acb0:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800acb4:	4618      	mov	r0, r3
 800acb6:	bd38      	pop	{r3, r4, r5, pc}
 800acb8:	f112 0f16 	cmn.w	r2, #22
 800acbc:	da05      	bge.n	800acca <scalbnf+0x7a>
 800acbe:	f24c 3250 	movw	r2, #50000	; 0xc350
 800acc2:	4295      	cmp	r5, r2
 800acc4:	dce5      	bgt.n	800ac92 <scalbnf+0x42>
 800acc6:	4907      	ldr	r1, [pc, #28]	; (800ace4 <scalbnf+0x94>)
 800acc8:	e7e4      	b.n	800ac94 <scalbnf+0x44>
 800acca:	3219      	adds	r2, #25
 800accc:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800acd0:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800acd4:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800acd8:	e7e1      	b.n	800ac9e <scalbnf+0x4e>
 800acda:	bf00      	nop
 800acdc:	ffff3cb0 	.word	0xffff3cb0
 800ace0:	7149f2ca 	.word	0x7149f2ca
 800ace4:	0da24260 	.word	0x0da24260

0800ace8 <__errno>:
 800ace8:	4b01      	ldr	r3, [pc, #4]	; (800acf0 <__errno+0x8>)
 800acea:	6818      	ldr	r0, [r3, #0]
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	200000ec 	.word	0x200000ec

0800acf4 <_init>:
 800acf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf6:	bf00      	nop
 800acf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acfa:	bc08      	pop	{r3}
 800acfc:	469e      	mov	lr, r3
 800acfe:	4770      	bx	lr

0800ad00 <_fini>:
 800ad00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad02:	bf00      	nop
 800ad04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad06:	bc08      	pop	{r3}
 800ad08:	469e      	mov	lr, r3
 800ad0a:	4770      	bx	lr
